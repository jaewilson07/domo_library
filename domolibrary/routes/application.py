# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/application.ipynb.

# %% auto 0
__all__ = []

# %% ../../nbs/routes/application.ipynb 2
from typing import Union
import httpx

import domolibrary.client.get_data as gd
import domolibrary.client.ResponseGetData as rgd
import domolibrary.client.DomoAuth as dmda

# %% ../../nbs/routes/application.ipynb 3
async def get_applications(auth: dmda.DomoFullAuth,
                           parent_class :str=None, 
                           debug_num_stacks_to_drop=1,
                           session: Union[httpx.AsyncClient, httpx.AsyncClient, None] = None,
                           debug_api: bool = False
                           )-> rgd.ResponseGetData:

@gd.route_function
async def get_applications(
    auth: dmda.DomoFullAuth,
    session: Union[httpx.AsyncClient, httpx.AsyncClient, None] = None,
    debug_api: bool = False,
    parent_class: str = None,
    debug_num_stacks_to_drop=1,
) -> rgd.ResponseGetData:
    url = f"https://{auth.domo_instance}.domo.com/api/executor/v1/applications/"

    if debug_api:
        print(url)

    return await gd.get_data(
        auth=auth,
        url=url,
        method='GET',
        num_stacks_to_drop=debug_num_stacks_to_drop,
        debug_api=debug_api,
        session=session
    )

    if res.status != 200:
        res.is_sucess = False
        return res.status, res.response 

# %% ../../nbs/routes/application.ipynb 6
async def get_application_by_id(auth: dmda.DomoFullAuth,
                                application_id: str, 
                                parent_class :str = None, 
                                debug_num_stacks_to_drop = 1,
                                session: Union[httpx.AsyncClient, httpx.AsyncClient, None] = None,
                                debug_api: bool = False)-> rgd.ResponseGetData:


@gd.route_function
async def get_application_by_id(
    auth: dmda.DomoFullAuth,
    application_id: str,
    session: Union[httpx.AsyncClient, httpx.AsyncClient, None] = None,
    debug_api: bool = False,
    parent_class: str = None,
    debug_num_stacks_to_drop: int = None,
) -> rgd.ResponseGetData:
    url = f"https://{auth.domo_instance}.domo.com/api/executor/v1/applications/{application_id}"

    if debug_api:
        print(url)

    return await gd.get_data(
        auth=auth,
        url=url,
        method='GET',
        num_stacks_to_drop=debug_num_stacks_to_drop,
        debug_api=debug_api,
        session=session
    )

    if res.status != 200:
        res.is_sucess = False
        return res.status, res.response 
