[
  {
    "objectID": "client/domoerror.html",
    "href": "client/domoerror.html",
    "title": "DomoError",
    "section": "",
    "text": "source\n\nDomoError\n\n DomoError (entity_id:Optional[str]=None,\n            function_name:Optional[str]=None, status:Optional[int]=None,\n            message:str='error', domo_instance:Optional[str]=None,\n            parent_class:str=None, is_exception_not_error:bool=False)\n\nbase exception\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nentity_id\ntyping.Optional[str]\nNone\n\n\n\nfunction_name\ntyping.Optional[str]\nNone\n\n\n\nstatus\ntyping.Optional[int]\nNone\nAPI request status\n\n\nmessage\nstr\nerror\n.domo.com\n\n\ndomo_instance\ntyping.Optional[str]\nNone\n\n\n\nparent_class\nstr\nNone\n\n\n\nis_exception_not_error\nbool\nFalse\n\n\n\n\n\ntry:\n    raise DomoError(\n        entity_id=\"ds_123\",\n        function_name=\"create_dataset\",\n        # parent_class = \"Foo\",\n        status=403,\n        message=\"invalid path\",\n    )\nexcept DomoError as e:\n    print(e)\n\n🛑  DomoError 🛑 - function: create_dataset || ds_123 || status 403 || invalid path\n\n\n\n\nStandard PreRequisite Errors\n\nsource\n\nAuthNotProvidedError\n\n AuthNotProvidedError (entity_id, function_name, message='valid Auth\n                       object not provided', status=None,\n                       domo_instance=None)\n\nbase exception\n\nsource\n\n\nDatasetNotProvidedError\n\n DatasetNotProvidedError (function_name, message='dataset_id not\n                          provided', domo_instance=None, entity_id=None,\n                          status=None)\n\nbase exception",
    "crumbs": [
      "Blog",
      "Client",
      "DomoError"
    ]
  },
  {
    "objectID": "client/responsegetdata.html",
    "href": "client/responsegetdata.html",
    "title": "ResponseGetData",
    "section": "",
    "text": "source\n\n\n\n BlockedByVPN (domo_instance:Optional[str]=None, ip_address:str=None,\n               function_name:str='get_data')\n\nbase exception\n\nsource\n\n\n\n\n ResponseGetData (status:int, response:Any, is_success:bool,\n                  auth:dict=None, parent_class:str=None,\n                  traceback_details:&lt;built-infunctionany&gt;=None)\n\npreferred response class for all API Requests\n\nrgd = ResponseGetData(status=200, response=\"test\", is_success=True)\nrgd",
    "crumbs": [
      "Blog",
      "Client",
      "ResponseGetData"
    ]
  },
  {
    "objectID": "client/responsegetdata.html#requests-library",
    "href": "client/responsegetdata.html#requests-library",
    "title": "ResponseGetData",
    "section": "Requests Library",
    "text": "Requests Library\n\nsource\n\nResponseGetData._from_requests_response\n\n ResponseGetData._from_requests_response (res:requests.models.Response)\n\nreturns ResponseGetData\n\n\n\n\nType\nDetails\n\n\n\n\nres\nResponse\nrequests response object\n\n\nReturns\nResponseGetData\n\n\n\n\n\n# test _from_requests_response returns ResponseGetData class\n\nurl = f\"https://domo-community.domo.com/api/content/v2/authentication\"\n\ntokenHeaders = {\"Content-Type\": \"application/json\"}\n\nbody = {\n    \"method\": \"password\",\n    \"emailAddress\": \"jae@onyxreporting.com\",\n    \"password\": os.environ[\"DOJO_PASSWORD\"],\n}\n\nres = requests.request(method=\"POST\", url=url, json=body, headers=tokenHeaders)\n\nprint(res.status_code)\n\ntest_res = ResponseGetData._from_requests_response(res)\ntest_res.__dict__.keys()",
    "crumbs": [
      "Blog",
      "Client",
      "ResponseGetData"
    ]
  },
  {
    "objectID": "client/responsegetdata.html#httpx-library",
    "href": "client/responsegetdata.html#httpx-library",
    "title": "ResponseGetData",
    "section": "HTTPX Library",
    "text": "HTTPX Library\n\nsource\n\nfind_ip\n\n find_ip (html, html_tag:str='p')",
    "crumbs": [
      "Blog",
      "Client",
      "ResponseGetData"
    ]
  },
  {
    "objectID": "client/responsegetdata.html#asyncio-response-handling",
    "href": "client/responsegetdata.html#asyncio-response-handling",
    "title": "ResponseGetData",
    "section": "Asyncio Response Handling",
    "text": "Asyncio Response Handling\n\nsource\n\nResponseGetData._from_aiohttp_response\n\n ResponseGetData._from_aiohttp_response\n                                         (res:aiohttp.client_reqrep.Client\n                                         Response, auth:Optional[&lt;built-\n                                         infunctionany&gt;]=None,\n                                         process_stream:bool=False,\n                                         stream_chunks:int=10,\n                                         debug_api:bool=False,\n                                         response_file_name:str=None, trac\n                                         eback_details:domolibrary.client.\n                                         Logger.TracebackDetails=None)\n\nasync method returns ResponseGetData\n\nsample implementation of RGD + trackeback\n\n# test _from_aiohttp_response returns ResponseGetData class\n\n\nclass Foo:\n    def __init__(self):\n        pass\n\n    async def get_data(self):\n        url = f\"https://domo-community.domo.com/api/content/v2/authentication\"\n\n        body = {\n            \"method\": \"password\",\n            \"emailAddress\": \"jae@onyxreporting.com\",\n            \"password\": os.environ[\"DOJO_PASSWORD\"],\n        }\n\n        session = aiohttp.ClientSession()\n        res = await session.post(url=url, json=body)\n        await session.close()\n\n        print(res.status)\n\n        traceback_details = dl.get_traceback(\n            root_module=\"&lt;module&gt;\",\n            # drop entries from the top of stack to exclude the functions that retrieve the traceback\n            num_stacks_to_drop=0,\n            parent_class=self.__class__.__name__,\n        )\n\n        return await ResponseGetData._from_aiohttp_response(\n            res, traceback_details=traceback_details\n        )\n\n\ntest_foo = Foo()\n\nres = await test_foo.get_data()\n\nres.traceback_details.__dict__",
    "crumbs": [
      "Blog",
      "Client",
      "ResponseGetData"
    ]
  },
  {
    "objectID": "client/get_data.html",
    "href": "client/get_data.html",
    "title": "get_data",
    "section": "",
    "text": "source",
    "crumbs": [
      "Blog",
      "Client",
      "get_data"
    ]
  },
  {
    "objectID": "client/get_data.html#aiohttp-looper-deprecated",
    "href": "client/get_data.html#aiohttp-looper-deprecated",
    "title": "get_data",
    "section": "Aiohttp Looper DEPRECATED",
    "text": "Aiohttp Looper DEPRECATED\n\nsource\n\nlooper_aiohttp\n\n looper_aiohttp (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 session:aiohttp.client.ClientSession, url, offset_params,\n                 arr_fn:&lt;built-infunctioncallable&gt;,\n                 loop_until_end:bool=False, method='POST', body:dict=None,\n                 fixed_params:dict=None, offset_params_in_body:bool=False,\n                 body_fn=None, limit=1000, skip=0, maximum=2000,\n                 debug_api:bool=False, debug_loop:bool=False)\n\n\nsource\n\n\nroute_function\n\n route_function (func:Callable[...,Any])\n\nDecorator for route functions to ensure they receive certain arguments. If these arguments are not provided, default values are used.\nArgs: func (Callable[…, Any]): The function to decorate.\nReturns: Callable[…, Any]: The decorated function.\nThe decorated function takes the following arguments: *args (Any): Positional arguments for the decorated function. parent_class (str, optional): The parent class. Defaults to None. debug_num_stacks_to_drop (int, optional): The number of stacks to drop for debugging. Defaults to 1. debug_api (bool, optional): Whether to debug the API. Defaults to False. session (httpx.AsyncClient, optional): The HTTPX client session. Defaults to None. **kwargs (Any): Additional keyword arguments for the decorated function.\n\nsource\n\n\nRouteFunction_ResponseTypeError\n\n RouteFunction_ResponseTypeError (result)\n\nInappropriate argument type.\n\nsample test RouteFunction_ResponseTypeError\n\ntry:\n    raise RouteFunction_ResponseTypeError(\"hello world\")\n\nexcept RouteFunction_ResponseTypeError as e:\n    print(e)\n\nExpected function to return an instance of ResponseGetData got &lt;class 'str'&gt; instead.  Refactor function to return ResponseGetData class\n\n\n\n@route_function\nasync def test_fn(\n    parent_class=None, debug_num_stacks_to_drop=1, debug_api=True, session=None\n):\n    return rgd.ResponseGetData(status=200, response=100, is_success=True)\n\n\nawait test_fn()\n\nResponseGetData(status=200, response=100, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Client",
      "get_data"
    ]
  },
  {
    "objectID": "utils/image.html",
    "href": "utils/image.html",
    "title": "Image Utility Class",
    "section": "",
    "text": "source\n\nhandle_string_to_bytes_and_encode\n\n handle_string_to_bytes_and_encode (data:Union[str,bytes])\n\n\nsource\n\n\nhandle_string_to_bytes_and_decode\n\n handle_string_to_bytes_and_decode (data:Union[str,bytes])\n\n\nsource\n\n\nisBase64\n\n isBase64 (s)\n\n\nsource\n\n\nImage.from_image_file\n\n Image.from_image_file (image_path:str)\n\n\nsource\n\n\ncrop_square\n\n crop_square ()\n\n\nsource\n\n\nto_bytes\n\n to_bytes ()\n\n\nimg = Image.from_image_file(image_path=\"../test/route_sample.png\")\nimg\n\n\n\n\n\n\n\n\n\nimg.crop_square()\n\n\n\n\n\n\n\n\n\nbyte_arr = img.to_bytes()\n\nImage.from_bytestr(byte_arr)\n\n\n\n\n\n\n\n\n\n\nUtility Functions\n\nsource\n\nare_same_image\n\n are_same_image (image1, image2)\n\n\ndomo_default_img\n\n\n\n\n\n\n\n\n\nimg2 = Image.from_image_file(\"../classes/images/128618865.png\")\nimg2\n\n\n\n\n\n\n\n\n\nare_same_image(domo_default_img, img2)\n\nimages do not match\n\n\nFalse",
    "crumbs": [
      "Blog",
      "Utils",
      "Image Utility Class"
    ]
  },
  {
    "objectID": "utils/read_creds_from_dotenv.html",
    "href": "utils/read_creds_from_dotenv.html",
    "title": "Read Creds from DotEnv",
    "section": "",
    "text": "source\n\nread_creds_from_dotenv\n\n read_creds_from_dotenv (env_path:str='.env', params:list[str]=None)\n\nuse_prod = false will replace all PROD values with matching TEST values\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nenv_path\nstr\n.env\n\n\n\nparams\nlist\nNone\nlist of params you’re expecting in the env file,\n\n\nReturns\nDictDot\n\n\n\n\n\n\nsource\n\n\nReadCreds_EnvFileNotExist\n\n ReadCreds_EnvFileNotExist (env_path)\n\nCommon base class for all non-exit exceptions.\n\nsample implementation of read creds\n\n# import json\n\n# TEST_ENV_PATH = '_test_env.txt'\n\n# params = [\"APPLICATION_ID\", \"DATASET_ID\", \"ACCOUNT_ID\", \"SAMPLE_ARRAY\"]\n\n# env = read_creds_from_dotenv(TEST_ENV_PATH, params = params)\n\n# print(env)\n# print(json.loads(env.SAMPLE_ARRAY))\n\n\n# # | export\n# def split_creds(env: utils_dd.DictDot, key_starts_with: str, env_var_list: list[str]):\n#     env_lines_to_split = [getattr(env, key) for key in dir(\n#         env) if key.startswith(key_starts_with)]\n\n#     return [utils_dd.split_str_to_obj(env_string=line, value_split_keys=env_var_list) for line in env_lines_to_split]",
    "crumbs": [
      "Blog",
      "Utils",
      "Read Creds from DotEnv"
    ]
  },
  {
    "objectID": "utils/chunk_execution.html",
    "href": "utils/chunk_execution.html",
    "title": "Async Code Execution",
    "section": "",
    "text": "source\n\ngather_with_concurrency\n\n gather_with_concurrency (*coros, n=60)\n\nlimits the number of open coroutines at a time.\n\nsample implementation of gather_with_concurrency\n\nimport random\nimport asyncio\n\n\nasync def sleeper(duration):\n    print(duration)\n    await asyncio.sleep(duration)\n\n\nawait gather_with_concurrency(\n    *[sleeper(random.randint(0, 3)) for index in list(range(1, 20))], n=5\n)\n\n3\n1\n2\n1\n0\n3\n2\n2\n2\n2\n0\n2\n2\n2\n2\n3\n2\n3\n1\n\n\n[None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None,\n None]\n\n\n\nsource\n\n\n\nrun_sequence\n\n run_sequence (*functions:Awaitable[Any])\n\nexecutes a sequence of functions\n\nSample Implementation of run_sequence\n\nimport asyncio\n\n\nasync def t1():\n    print(\"running t1\")\n    await asyncio.sleep(1)\n    print(\"done running t1\")\n\n\nasync def t2():\n    print(\"running t2 next\")\n    await asyncio.sleep(3)\n    print(\"done running t2\")\n\n\nasync def t3():\n    print(\"running t3 next\")\n    await asyncio.sleep(2)\n    print(\"done running t3\")\n\n\nawait_ls = [t1(), t2(), t3()]\n\nawait run_sequence(*await_ls)\n\n# run_sequence uses the same syntax as asyncio.gather().  the following code sample is the same\n# await run_sequence( t1(),t2(),t3())\n\n# run_sequence forces sequential code execution as opposed to asyncio.gather\n# await asyncio.gather(*await_ls)\n\nrunning t1\ndone running t1\nrunning t2 next\ndone running t2\nrunning t3 next\ndone running t3\n\n\n[None, None, None]\n\n\n\nsource\n\n\n\nchunk_list\n\n chunk_list (obj_ls:list[any], chunk_size:int)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nobj_ls\nlist\nlist of entities to split into n chunks\n\n\nchunk_size\nint\nentities per sub list\n\n\nReturns\nlist\nreturns a list of chunk_size lists of objects\n\n\n\n\nsample implementation of chunk_list\n\nnum_ls = list(range(50))\n\n# each list contains six elements\nchunk_list(num_ls, 6)\n\n[[0, 1, 2, 3, 4, 5],\n [6, 7, 8, 9, 10, 11],\n [12, 13, 14, 15, 16, 17],\n [18, 19, 20, 21, 22, 23],\n [24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35],\n [36, 37, 38, 39, 40, 41],\n [42, 43, 44, 45, 46, 47],\n [48, 49]]\n\n\n\n# #| export\n# async def chunk_fn(chunk, api_fun, idx, sleep_time, session, list_id):\n#     print(f'sleeping {idx} and {len(chunk)}')\n\n#     res = await asyncio.gather(*[api_fun(row=row, session=session, list_id=list_id) for row in chunk])\n\n#     await asyncio.sleep(sleep_time)\n#     print(f'end_sleep {idx}')\n#     return res\n\n\n# #| export\n# async def api_request_in_chunks(full_list, api_fn, api_limit_size, list_id, sleep_time=10):\n#     chunked_list = chunk_list(tlist=full_list, chunk_size=api_limit_size)\n#     session = httpx.AsyncClient(request_class=OAuthRequest)\n#     res = await run_sequence(\n#         *[chunk_fn(chunk, api_fn, idx, sleep_time=sleep_time, session=session, list_id=list_id) for idx, chunk in\n#           enumerate(chunked_list)])\n#     await session.aclose()\n#     return res",
    "crumbs": [
      "Blog",
      "Utils",
      "Async Code Execution"
    ]
  },
  {
    "objectID": "integrations/domojupyter.html",
    "href": "integrations/domojupyter.html",
    "title": "DomoJupyter (GetInstanceCredentials)",
    "section": "",
    "text": "get_jupyter_account\nbasic function that uses the wraps the domojupyter get_account_property functions in a loop. Addresses an issue where sometimes DomoJupyter throws an error\n\nsource\n\nget_jupyter_account\n\n get_jupyter_account (account_name:str, domojupyter_fn:&lt;built-\n                      infunctioncallable&gt;, maximum_retry:int=10)\n\nimport a domojupyter account, will loop until success\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\naccount_name\nstr\n\nname of account as it appears in the\n\n\ndomojupyter_fn\ncallable\n\n\n\n\nmaximum_retry\nint\n10\n\n\n\nReturns\ntyping.Tuple[typing.List, dict]\n\nreturns account properties list and a dictionary of the properties.\n\n\n\n\nsource\n\n\nGetJupyter_ErrorRetrievingAccountProperty\n\n GetJupyter_ErrorRetrievingAccountProperty (account_name, property_name)\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nGetJupyter_ErrorRetrievingAccount\n\n GetJupyter_ErrorRetrievingAccount (account_name)\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nGetInstanceConfig\n\n GetInstanceConfig\n                    (logger:Optional[domolibrary.client.Logger.Logger]=Non\n                    e)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nNoConfigCompanyError\n\n NoConfigCompanyError (sql, domo_instance)\n\nCommon base class for all non-exit exceptions.\n\n\n\nGet Domo Jupyter Account objects\nA Class for converting DomoJupyter Account objects into DomoAuth account objects\n\nsource\n\nDomoJupyterAccount_InstanceAuth\n\n DomoJupyterAccount_InstanceAuth (account_name:str,\n                                  domo_username:str=None,\n                                  display_name:str=None,\n                                  domo_instance:str=None,\n                                  domo_instance_ls:list=None,\n                                  raw_cred:dict=None,\n                                  domo_password:str=None,\n                                  domo_access_token:str=None,\n                                  auth_ls:list=None)\n\nclass for interacting with DomoJupyterAccount objects and generating a DomoAuth object\n\nsource\n\n\nInvalidAccountTypeError\n\n InvalidAccountTypeError (account_name, account_type)\n\nraised when account type is not expected type\n\n\n\nGet Domains with Instance Config\nUse this method to configure a dataset that retrieves a list of domains from a config instance (using config credentials). Pass an auth_enum object to enumerate different authenticaiton variations to expect in the result dataset (see example).\nTheoretically, each of the enumerated auth variations should already exist in the instance.\nThe Config Dataset must return columns domo_instance and auth_match_col\n\nsource\n\nprocess_row\n\n process_row (instance:dict, domo_instance,\n              instance_creds:__main__.DomoJupyterAccount_InstanceAuth,\n              config_enum=None, debug_api:bool=False,\n              debug_prn:bool=False, logger=None)\n\n\nsource\n\n\nis_v2\n\n is_v2 (instance_auth:domolibrary.client.DomoAuth.DomoFullAuth)\n\nwrapper for the domo boostrap.is_group_ownership_beta function to return a binary for if the instance has the group ownership beta enabled\n\nsample implementaiton of is_v2\n\nconfig_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=\"jae@onyxreporting.com\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nawait config_auth.print_is_token()\n\nawait is_v2(instance_auth=config_auth)\n\n🎉 full_auth token retrieved from domo-community ⚙️\n\n\n0\n\n\n\nsource\n\n\n\nGetInstanceConfig.get_domains_with_instance_auth\n\n GetInstanceConfig.get_domains_with_instance_auth\n                                                   (default_auth:domolibra\n                                                   ry.client.DomoAuth.Domo\n                                                   Auth,\n                                                   auth_enum:enum.Enum, co\n                                                   nfig_auth:domolibrary.c\n                                                   lient.DomoAuth.DomoAuth\n                                                   =None, config_dataset_i\n                                                   d:str=None,\n                                                   config_sql:str=\"select\n                                                   domain as domo_instance\n                                                   ,concat(config_useprod,\n                                                   '-', project) as\n                                                   auth_match_col from\n                                                   table\",\n                                                   debug_api:bool=False,\n                                                   debug_log:bool=False,\n                                                   debug_prn:bool=False, l\n                                                   ogger:domolibrary.clien\n                                                   t.Logger.Logger=None)\n\nuses a sql query to retrieve a list of domo_instances and map authentication object to each instance\n\nsource\n\n\nGetDomains_Query_AuthMatch_Error\n\n GetDomains_Query_AuthMatch_Error (sql:str=None, domo_instance:str=None,\n                                   message:str=None)\n\nraise if SQL query fails to return column named ‘auth_match_col’\n\nsample implementation of get_domains_with_instance_auth\n\n# import pandas as pd\nconfig_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndefault_auth = dmda.DomoTokenAuth(\n    domo_instance=\"default\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\n\nclass AuthEnum(Enum):\n    \"\"\"enum_name must match values in auth_match_col from config_sql query\"\"\"\n\n    test_1 = dmda.DomoFullAuth(\n        domo_instance=\"domo-community\",\n        domo_password=os.environ[\"DOJO_PASSWORD\"],\n        domo_username=\"jae@onyxreporting.com\",\n    )\n    test_0 = dmda.DomoTokenAuth(\n        domo_instance=\"domo-community-test\",\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    )\n    config_1 = dmda.DomoTokenAuth(\n        domo_instance=\"domo-community-config\",\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    )\n    config_0 = dmda.DomoTokenAuth(\n        domo_instance=\"domo-community-config-test\",\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    )\n\n\nlogger = lc.Logger(app_name=\"test_retrieve_company\")\n\nres = await GetInstanceConfig.get_domains_with_instance_auth(\n    config_auth=config_auth,\n    config_dataset_id=\"8d2a8055-7918-4039-b67d-361647e96ea8\",\n    config_sql=\"\"\"\n    SELECT domain as domo_instance, 'test_1'  as auth_match_col, 1 as config_exception_pw from Table\n    \"\"\",\n    debug_prn=True,\n    debug_log=False,\n    debug_api=False,\n    logger=logger,\n    default_auth=default_auth,\n    auth_enum=AuthEnum,\n)\n\npd.DataFrame(res)\n# pd.DataFrame(logger.logs)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n⚙️ START - Retrieving company list \nhttps://domo-community.domo.com/datasources/8d2a8055-7918-4039-b67d-361647e96ea8/details/overview using \n\n    SELECT domain as domo_instance, 'test_1'  as auth_match_col, 1 as config_exception_pw from Table\n    \n\n⚙️ SUCCESS 🎉 Retrieved company list \nThere are 1 companies to update\n\n\n\n\n\n\n\n\n\n\ndomo_instance\nauth_match_col\nconfig_exception_pw\ninstance_auth\nis_valid\nis_v2\nconfig_auth\n\n\n\n\n0\ndomo-dojo\ntest_1\n1\nDomoFullAuth(domo_instance='domo-community', d...\n1\n0\nDomoTokenAuth(domo_instance='domo-community-co...\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nDomoJupyterAccount_InstanceAuth.get_domo_instance_auth_account\n\n DomoJupyterAccount_InstanceAuth.get_domo_instance_auth_account\n                                                                 (account_\n                                                                 name:str,\n                                                                 domojupyt\n                                                                 er_fn:&lt;bu\n                                                                 ilt-infun\n                                                                 ctioncall\n                                                                 able&gt;, do\n                                                                 mo_instan\n                                                                 ce=None)\n\nretrieves Abstract Credential Store from DomoJupyter environment. expects credentials property to contain DOMO_USERNAME, DOMO_PASSWORD, or DOMO_ACCESS_TOKEN, and (optional) DOMO_INSTANCE\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\naccount_name\nstr\n\ndomojupyter account to retrieve\n\n\ndomojupyter_fn\ncallable\n\nDomo’s domojupyter module, pass in b/c can only be retrieved inside Domo jupyter notebook environment\n\n\ndomo_instance\nNoneType\nNone\nset the domo_instance or retrieve from the domojupyter_account credential store\n\n\n\n\nsource\n\n\nInvalidAccountNameError\n\n InvalidAccountNameError (account_name=None, regex_pattern=None)\n\nraised when account name does not follow format string\n\nsource\n\n\nDomoJupyterAccount_InstanceAuth.get_domo_instance_auth_account\n\n DomoJupyterAccount_InstanceAuth.get_domo_instance_auth_account\n                                                                 (account_\n                                                                 name:str,\n                                                                 domojupyt\n                                                                 er_fn:&lt;bu\n                                                                 ilt-infun\n                                                                 ctioncall\n                                                                 able&gt;, do\n                                                                 mo_instan\n                                                                 ce=None)\n\nretrieves Abstract Credential Store from DomoJupyter environment. expects credentials property to contain DOMO_USERNAME, DOMO_PASSWORD, or DOMO_ACCESS_TOKEN, and (optional) DOMO_INSTANCE\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\naccount_name\nstr\n\ndomojupyter account to retrieve\n\n\ndomojupyter_fn\ncallable\n\nDomo’s domojupyter module, pass in b/c can only be retrieved inside Domo jupyter notebook environment\n\n\ndomo_instance\nNoneType\nNone\nset the domo_instance or retrieve from the domojupyter_account credential store\n\n\n\n\nsource\n\n\nDomoJupyterAccount_InstanceAuth.generate_auth_ls\n\n DomoJupyterAccount_InstanceAuth.generate_auth_ls\n                                                   (domo_instance_ls:list[\n                                                   str]=None)\n\nfor every domo_instance in domo_instance_ls generates an DomoAuth object\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndomo_instance_ls\nlist\nNone\nlist of domo_instances\n\n\nReturns\nlist\n\nlist of domo auth objects\n\n\n\n\nsource\n\n\nDomoJupyterAccount_InstanceAuth.generate_auth\n\n DomoJupyterAccount_InstanceAuth.generate_auth (domo_instance)\n\n\nsource\n\n\nGenerateAuth_CredentialsNotProvided\n\n GenerateAuth_CredentialsNotProvided ()\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nGenerateAuth_InvalidDomoInstanceList\n\n GenerateAuth_InvalidDomoInstanceList ()\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nDomoJupyterAccount_InstanceAuth.generate_auth_ls\n\n DomoJupyterAccount_InstanceAuth.generate_auth_ls\n                                                   (domo_instance_ls:list[\n                                                   str]=None)\n\nfor every domo_instance in domo_instance_ls generates an DomoAuth object\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndomo_instance_ls\nlist\nNone\nlist of domo_instances\n\n\nReturns\nlist\n\nlist of domo auth objects\n\n\n\n\nDomoJupyterAccount_InstanceAuth(account_name=\"test\")\n\nDomoJupyterAccount_InstanceAuth(account_name='test', domo_username=None)",
    "crumbs": [
      "Blog",
      "Integrations",
      "DomoJupyter (GetInstanceCredentials)"
    ]
  },
  {
    "objectID": "classes/domodataset.html",
    "href": "classes/domodataset.html",
    "title": "Dataset",
    "section": "",
    "text": "The DomoDataset_Schema class will be a subclass of DomoDataset. It will handle all of the methods for interacting with schemas.\n\nIn execution, the schema is separate from the data that gets uploaded from Vault to Adrenaline. The domo schema defines how the data is loaded into Vault.\nBe cognizant to match dataset uploads with schema definitions. If the schema and uploaded data types do not match, the dataset may be unable to index in Adrenaline (and therefore not update).\n\n\nsource\n\n\n\n DomoDataset_Schema (dataset:&lt;built-infunctionany&gt;=None,\n                     columns:List[__main__.DomoDataset_Schema_Column]=&lt;fac\n                     tory&gt;)\n\nclass for interacting with dataset schemas\n\nsource\n\n\n\n\n DomoDataset_Schema_Column (name:str, id:str,\n                            type:__main__.DatasetSchema_Types,\n                            order:int=0, visible:bool=True,\n                            upsert_key:bool=False)\n\n\nsource\n\n\n\n\n DatasetSchema_Types (value, names=None, module=None, qualname=None,\n                      type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\n\n\n DomoDataset_Schema.get\n                         (auth:Optional[domolibrary.client.DomoAuth.DomoAu\n                         th]=None, dataset_id:str=None,\n                         debug_api:bool=False, return_raw:bool=False)\n\nmethod that retrieves schema for a dataset\n\n\nStandard implementation will be to access the DomoDataset_Schema class as the DomoDataset.schema property\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='published_dt', id='published_dt', type='DATETIME', order=0, visible=True, upsert_key=False)]\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\ntest_df = pd.DataFrame(columns=[\"A\", \"B\", \"C\"])\n\ntry:\n    res = await ds_schema._test_missing_columns(\n        auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], df=test_df\n    )\n    print(res)\n\nexcept DatasetSchema_InvalidSchema as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  DatasetSchema_InvalidSchema 🛑 - function: 04c1574e-c8be-4721-9846-c6ffa491144b is missing columns A, B, C at domo-community\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nds_schema.to_dict()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'columns': [{'name': 'objectID',\n   'id': 'objectID',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'url',\n   'id': 'url',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'Title',\n   'id': 'Title',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'article',\n   'id': 'article',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'views',\n   'id': 'views',\n   'type': 'LONG',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'created_dt',\n   'id': 'created_dt',\n   'type': 'DATETIME',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'published_dt',\n   'id': 'published_dt',\n   'type': 'DATETIME',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False}]}\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nold_col = ds_schema.columns[-1]\nprint(old_col.name)\nds_schema.remove_col(old_col, debug_prn=True)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\npublished_dt\n\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME', order=0, visible=True, upsert_key=False)]\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nawait ds_schema.alter_schema(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], return_raw=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\nsource\n\n\n\n DomoDataset_Tags (dataset:&lt;built-infunctionany&gt;=None,\n                   tag_ls:List[str]=&lt;factory&gt;)\n\nclass for interacting with dataset tags\n\nsource\n\n\n\n\n DatasetTags_SetTagsError (dataset_id, domo_instance)\n\nreturn if DatasetTags request is not successfull\n\n# eval: false\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['Mar-23-2024 10:00', 'developer_documentation', 'hackercore']\n\n\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday = dt.datetime.now().strftime(\"%b-%d-%Y %H:%M\")\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.set(\n    auth=token_auth,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    tag_ls=[\"developer_documentation\", \"hackercore\", today],\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['developer_documentation', 'Mar-23-2024 10:09', 'hackercore']\n\n\n\nsource\n\n\n\n\n DomoDataset_Tags.add (add_tag_ls:List[str], dataset_id:str=None,\n                       auth:Optional[domolibrary.client.DomoAuth.DomoAuth]\n                       =None, debug_api:bool=False,\n                       session:Optional[httpx.AsyncClient]=None)\n\nappends tags to the list of existing dataset_tags\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\nds_tag = DomoDataset_Tags()\nawait ds_tag.add(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], add_tag_ls=[today_year]\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['2024', 'developer_documentation', 'Mar-23-2024 10:09', 'hackercore']\n\n\n\nsource\n\n\n\n\n DomoDataset_Tags.remove (remove_tag_ls:List[str], dataset_id:str=None,\n                          auth:domolibrary.client.DomoAuth.DomoFullAuth=No\n                          ne, debug_api:bool=False,\n                          session:Optional[httpx.AsyncClient]=None)\n\nremoves tags from the existing list of dataset_tags\n\n\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.remove(\n    auth=token_auth,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    remove_tag_ls=[today_year],\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['developer_documentation', 'Mar-23-2024 10:09', 'hackercore']",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domodataset.html#datasetschema",
    "href": "classes/domodataset.html#datasetschema",
    "title": "Dataset",
    "section": "",
    "text": "The DomoDataset_Schema class will be a subclass of DomoDataset. It will handle all of the methods for interacting with schemas.\n\nIn execution, the schema is separate from the data that gets uploaded from Vault to Adrenaline. The domo schema defines how the data is loaded into Vault.\nBe cognizant to match dataset uploads with schema definitions. If the schema and uploaded data types do not match, the dataset may be unable to index in Adrenaline (and therefore not update).\n\n\nsource\n\n\n\n DomoDataset_Schema (dataset:&lt;built-infunctionany&gt;=None,\n                     columns:List[__main__.DomoDataset_Schema_Column]=&lt;fac\n                     tory&gt;)\n\nclass for interacting with dataset schemas\n\nsource\n\n\n\n\n DomoDataset_Schema_Column (name:str, id:str,\n                            type:__main__.DatasetSchema_Types,\n                            order:int=0, visible:bool=True,\n                            upsert_key:bool=False)\n\n\nsource\n\n\n\n\n DatasetSchema_Types (value, names=None, module=None, qualname=None,\n                      type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\n\n\n DomoDataset_Schema.get\n                         (auth:Optional[domolibrary.client.DomoAuth.DomoAu\n                         th]=None, dataset_id:str=None,\n                         debug_api:bool=False, return_raw:bool=False)\n\nmethod that retrieves schema for a dataset\n\n\nStandard implementation will be to access the DomoDataset_Schema class as the DomoDataset.schema property\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='published_dt', id='published_dt', type='DATETIME', order=0, visible=True, upsert_key=False)]\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\ntest_df = pd.DataFrame(columns=[\"A\", \"B\", \"C\"])\n\ntry:\n    res = await ds_schema._test_missing_columns(\n        auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], df=test_df\n    )\n    print(res)\n\nexcept DatasetSchema_InvalidSchema as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  DatasetSchema_InvalidSchema 🛑 - function: 04c1574e-c8be-4721-9846-c6ffa491144b is missing columns A, B, C at domo-community\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\n\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nds_schema.to_dict()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'columns': [{'name': 'objectID',\n   'id': 'objectID',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'url',\n   'id': 'url',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'Title',\n   'id': 'Title',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'article',\n   'id': 'article',\n   'type': 'STRING',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'views',\n   'id': 'views',\n   'type': 'LONG',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'created_dt',\n   'id': 'created_dt',\n   'type': 'DATETIME',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False},\n  {'name': 'published_dt',\n   'id': 'published_dt',\n   'type': 'DATETIME',\n   'order': 0,\n   'visible': True,\n   'upsertKey': False}]}\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nold_col = ds_schema.columns[-1]\nprint(old_col.name)\nds_schema.remove_col(old_col, debug_prn=True)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\npublished_dt\n\n\n[DomoDataset_Schema_Column(name='objectID', id='objectID', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='url', id='url', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='Title', id='Title', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='article', id='article', type='STRING', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='views', id='views', type='LONG', order=0, visible=True, upsert_key=False),\n DomoDataset_Schema_Column(name='created_dt', id='created_dt', type='DATETIME', order=0, visible=True, upsert_key=False)]\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_schema = DomoDataset_Schema()\nawait ds_schema.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nawait ds_schema.alter_schema(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], return_raw=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domodataset.html#datasettags",
    "href": "classes/domodataset.html#datasettags",
    "title": "Dataset",
    "section": "",
    "text": "source\n\n\n\n DomoDataset_Tags (dataset:&lt;built-infunctionany&gt;=None,\n                   tag_ls:List[str]=&lt;factory&gt;)\n\nclass for interacting with dataset tags\n\nsource\n\n\n\n\n DatasetTags_SetTagsError (dataset_id, domo_instance)\n\nreturn if DatasetTags request is not successfull\n\n# eval: false\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.get(auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['Mar-23-2024 10:00', 'developer_documentation', 'hackercore']\n\n\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday = dt.datetime.now().strftime(\"%b-%d-%Y %H:%M\")\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.set(\n    auth=token_auth,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    tag_ls=[\"developer_documentation\", \"hackercore\", today],\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['developer_documentation', 'Mar-23-2024 10:09', 'hackercore']\n\n\n\nsource\n\n\n\n\n DomoDataset_Tags.add (add_tag_ls:List[str], dataset_id:str=None,\n                       auth:Optional[domolibrary.client.DomoAuth.DomoAuth]\n                       =None, debug_api:bool=False,\n                       session:Optional[httpx.AsyncClient]=None)\n\nappends tags to the list of existing dataset_tags\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\nds_tag = DomoDataset_Tags()\nawait ds_tag.add(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"], add_tag_ls=[today_year]\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['2024', 'developer_documentation', 'Mar-23-2024 10:09', 'hackercore']\n\n\n\nsource\n\n\n\n\n DomoDataset_Tags.remove (remove_tag_ls:List[str], dataset_id:str=None,\n                          auth:domolibrary.client.DomoAuth.DomoFullAuth=No\n                          ne, debug_api:bool=False,\n                          session:Optional[httpx.AsyncClient]=None)\n\nremoves tags from the existing list of dataset_tags\n\n\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntoday_year = dt.datetime.today().strftime(\"%Y\")\n\nds_tag = DomoDataset_Tags()\n\nawait ds_tag.remove(\n    auth=token_auth,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    remove_tag_ls=[today_year],\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['developer_documentation', 'Mar-23-2024 10:09', 'hackercore']",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domodataset.html#query-dataset",
    "href": "classes/domodataset.html#query-dataset",
    "title": "Dataset",
    "section": "Query Dataset",
    "text": "Query Dataset\n\nsource\n\nDomoDataset.query_dataset_private\n\n DomoDataset.query_dataset_private\n                                    (auth:domolibrary.client.DomoAuth.Domo\n                                    Auth, dataset_id:str, sql:str, session\n                                    :Optional[httpx.AsyncClient]=None, fil\n                                    ter_pdp_policy_id_ls:List[int]=None,\n                                    loop_until_end:bool=False, limit=100,\n                                    skip=0, maximum=100,\n                                    debug_api:bool=False,\n                                    debug_loop:bool=False,\n                                    debug_num_stacks_to_drop:int=2,\n                                    timeout=10, maximum_retry:int=5,\n                                    parent_class:str=None,\n                                    is_return_dataframe:bool=True)\n\n\nsource\n\n\nQueryExecutionError\n\n QueryExecutionError (sql, dataset_id, domo_instance, status, message,\n                      function_name=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\nres = await DomoDataset.query_dataset_private(\n    dataset_id=dataset_id,\n    auth=token_auth,\n    loop_until_end=True,\n    sql=\"select * from table\",\n    limit=1000,\n    filter_pdp_policy_id_ls=[1225, 1226],\n    debug_api=False,\n    debug_loop=False,\n)\n\n\nprint(len(res))\nres[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n2\n\n\n\n\n\n\n\n\n\n\nobjectID\nurl\nTitle\narticle\nviews\ncreated_dt\npublished_dt\n\n\n\n\n0\n000005034\nhttps://domo-support.domo.com/s/article/360042...\nAdding Scale Markers to Your Charts\nIntroDomo provides the ability to set scale ma...\n50\n2022-11-02T21:00:00\n2022-11-02T21:04:00\n\n\n1\n000004347\nhttps://domo-support.domo.com/s/article/457779...\nAccessing Goals Data\nIntroIn Goals, you can see the overall status ...\n23\n2022-10-24T21:41:00\n2022-10-24T22:39:00\n\n\n\n\n\n\n\n\n\nsource\n\n\nDomoDataset.delete\n\n DomoDataset.delete (dataset_id=None,\n                     auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                     debug_api:bool=False, session:httpx.AsyncClient=None)\n\n\nsource\n\n\nDomoDataset_DeleteDataset_Error\n\n DomoDataset_DeleteDataset_Error (dataset_id, status, reason,\n                                  domo_instance, function_name)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nuser_id = os.environ[\"DOMO_DOJO_USER_ID\"]\ndomo_user = await dmu.DomoUser.get_by_id(user_id=user_id, auth=token_auth)\n\ndataset_id = \"d2b21660-4ba8-400c-badf-aeef5a9abae1\"\ndomo_dataset = await DomoDataset.get_from_id(dataset_id=dataset_id, auth=token_auth)\n\n\nawait domo_dataset.share(member=domo_user, is_send_email=False, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nℹ️ get_data error -  at https://domo-community.domo.com/api/content/v2/users/663516735\nℹ️ get_data error - Cannot send a request, as the client has been closed. at https://domo-community.domo.com/api/content/v2/users/663516735\nℹ️ get_data error - Cannot send a request, as the client has been closed. at https://domo-community.domo.com/api/content/v2/users/663516735\n\n\nGetData_Error: 🛑  GetData_Error 🛑 - function: Cannot send a request, as the client has been closed. at https://domo-community.domo.com/api/content/v2/users/663516735\n\n\n\n#     @classmethod\n#     async def query_dataset(cls,\n#                             sql: str,\n#                             dataset_id: str,\n#                             dev_auth: DomoDeveloperAuth,\n#                             debug_api: bool = False,\n#                             session: httpx.AsyncClient = None) -&gt; pd.DataFrame:\n\n#         if debug_api:\n#             print(\"query dataset class method\")\n#             print({'dataset_id': dataset_id,\n#                    'dev_auth': dev_auth})\n\n#         res = await dataset_routes.query_dataset_public(dev_auth=dev_auth, id=dataset_id, sql=sql, session=session,\n#                                                         debug=debug)\n\n#         if debug_api:\n#             print(res.response)\n\n#         if res.status == 200:\n#             df = pd.DataFrame(data=res.response.get('rows'),\n#                               columns=res.response.get('columns'))\n#             return df\n#         return None",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domodataset.html#upload-data",
    "href": "classes/domodataset.html#upload-data",
    "title": "Dataset",
    "section": "Upload Data",
    "text": "Upload Data\n\nsource\n\nDomoDataset.index_dataset\n\n DomoDataset.index_dataset\n                            (auth:domolibrary.client.DomoAuth.DomoAuth=Non\n                            e, dataset_id:str=None, debug_api:bool=False,\n                            session:httpx.AsyncClient=None)\n\n\nsource\n\n\nDomoDataset.upload_data\n\n DomoDataset.upload_data (upload_df:pandas.core.frame.DataFrame=None,\n                          upload_df_ls:list[pandas.core.frame.DataFrame]=N\n                          one, upload_file:_io.TextIOWrapper=None,\n                          upload_method:str='REPLACE',\n                          partition_key:str=None, is_index:bool=True,\n                          dataset_id:str=None, dataset_upload_id=None,\n                          auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                          session:httpx.AsyncClient=None,\n                          debug_api:bool=False, debug_prn:bool=False)",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domodataset.html#partitions",
    "href": "classes/domodataset.html#partitions",
    "title": "Dataset",
    "section": "Partitions",
    "text": "Partitions\n\nsource\n\nDomoDataset.list_partitions\n\n DomoDataset.list_partitions\n                              (auth:domolibrary.client.DomoAuth.DomoAuth=N\n                              one, dataset_id:str=None,\n                              debug_api:bool=False,\n                              session:httpx.AsyncClient=None)\n\n\nsample implementation list_partitions\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = \"b102e530-6472-4cc3-b420-d5ab3792fdf9\"\n\nds = await DomoDataset.get_from_id(auth=token_auth, dataset_id=dataset_id)\nds_partition_ls = await ds.list_partitions()\n\npd.DataFrame(ds_partition_ls[0:5])\n\n\nsource\n\n\n\nDomoDataset.create\n\n DomoDataset.create (dataset_name:str, dataset_type='api', schema=None,\n                     auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                     debug_api:bool=False, session:httpx.AsyncClient=None)\n\n\nsource\n\n\nDomoDataset_CreateDataset_Error\n\n DomoDataset_CreateDataset_Error (domo_instance:str, dataset_name:str,\n                                  status:int, reason:str)\n\nCommon base class for all non-exit exceptions.\n\nsample implementation of create dataset\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# await DomoDataset.create( dataset_name= 'Hello world_v2', dataset_type='API', auth = token_auth, debug_api = False)\n\n\nsource\n\n\n\nDomoDataset.delete_partition\n\n DomoDataset.delete_partition (dataset_partition_id:str,\n                               dataset_id:str=None,\n                               empty_df:pandas.core.frame.DataFrame=None, \n                               auth:domolibrary.client.DomoAuth.DomoAuth=N\n                               one, is_index:bool=True,\n                               debug_api:bool=False, debug_prn:bool=False,\n                               return_raw:bool=False)\n\n\nsample data delete_partition\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = \"b102e530-6472-4cc3-b420-d5ab3792fdf9\"\ndataset = await DomoDataset.get_from_id(auth=token_auth, dataset_id=dataset_id)\n\nds_partition_ls = await dataset.list_partitions()\nprint(ds_partition_ls)\n\nds = await dataset.delete_partition(\n    dataset_partition_id=\"2023-04-27\",\n    auth=token_auth,\n    dataset_id=dataset_id,\n    debug_api=False,\n    debug_prn=True,\n)\n\nawait dataset.list_partitions()",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataset"
    ]
  },
  {
    "objectID": "classes/domocertification.html",
    "href": "classes/domocertification.html",
    "title": "Certification",
    "section": "",
    "text": "import os\nimport domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = \"da552832-c04d-46ac-936a-f982d9d3f2e6\"\n\nimport domolibrary.routes.dataset as dataset_routes\n\nres = await dataset_routes.get_dataset_by_id(dataset_id=dataset_id, auth=token_auth)\n\ncert_obj = res.response[\"certification\"]\nprint(cert_obj)\nDomoCertification._from_json(cert_obj)\n\n{'state': 'CERTIFIED', 'lastUpdated': 1680617331402, 'userId': '1893952720', 'processType': 'DEPARTMENT', 'approvalRequestId': 'c32fb7be-62aa-4632-90b5-55a9468a49e0', 'processName': 'Jae Test Certification', 'adminCertified': False}\n\n\nDomoCertification(certification_state='certified', last_updated=datetime.datetime(2023, 4, 4, 14, 8, 51, 402000), certification_type='DEPARTMENT', certification_name='Jae Test Certification')",
    "crumbs": [
      "Blog",
      "Classes",
      "Certification"
    ]
  },
  {
    "objectID": "classes/domoaccount_config.html",
    "href": "classes/domoaccount_config.html",
    "title": "Account Config extensions",
    "section": "",
    "text": "Each Domo Dataset that pulls data into Vault must have a stream, which stores the configuration information related to which data is exctracted from a datasource. Each stream has an associated account which stores the source data’s authentication information.\nBecause each datasource may have different authentication parameters, there may be multiple versions of the same account type (with different credentials) or multiple account types deployed within a domo instance if the user is extracting data from multiple systems.\nAccount’s can be configured such that certain fields are designated as encrypted fields, and the user will never be able to see the encrypted values EXCEPT in Domo’s Jupyter Notebook integration.\n\nsource\n\n\n\n DomoAccount_Config ()\n\nDomoAccount Config abstract base class\n\nsource\n\n\n\n\n DomoAccount_NoConfig (is_defined_config:bool=False)\n\n\nsource\n\n\n\n\n DomoAccount_NoConfig_OAuth (is_oauth:bool=True,\n                             is_defined_config:bool=False)\n\n\nsource\n\n\n\n\n AccountConfig_ProviderTypeNotDefined (data_provider_type)\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\n\n\n AccountConfig_UsesOauth (data_provider_type)\n\nCommon base class for all non-exit exceptions.\n\n\n\n\nsource\n\n\n\n DomoAccount_Config_AbstractCredential (credentials:dict)\n\n\nsource\n\n\n\n\n DomoAccount_Config_DomoAccessToken (domo_access_token:str=None,\n                                     username:str=None, password:str=None)\n\n\nsource\n\n\n\n\n DomoAccount_Config_DatasetCopy (domo_instance:str, access_token:str)\n\n\nsource\n\n\n\n\n DomoAccount_Config_Governance (domo_instance:str, access_token:str)\n\n\n\n\n\n\nsource\n\n\n\n DomoAccount_Config_AmazonS3 (access_key:str, secret_key:str, bucket:str,\n                              region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_AmazonS3Advanced (access_key:str, secret_key:str,\n                                      bucket:str, region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_AwsAthena (access_key:str, secret_key:str, bucket:str,\n                               workgroup:str, region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_HighBandwidthConnector (access_key:str,\n                                            secret_key:str, bucket:str,\n                                            region:str='us-west-2')\n\nthis connector is not enabled by default contact your CSM / AE\n\n\n\naccount_config = DomoAccount_Config_AmazonS3(\n    access_key=\"abc\",\n    secret_key=\"abc\",\n    bucket=\"s3://mybucket_string\",\n    region=\"us-west-2\",\n)\n\naccount_config.to_json()\n\n🤦‍♀️- Domo bucket expects string without s3:// prefix. Trimming to 'mybucket_string' for the output\n\n\n{'accessKey': 'abc',\n 'secretKey': 'abc',\n 'bucket': 'mybucket_string',\n 'region': 'us-west-2'}",
    "crumbs": [
      "Blog",
      "Classes",
      "Account Config extensions"
    ]
  },
  {
    "objectID": "classes/domoaccount_config.html#utility-connector",
    "href": "classes/domoaccount_config.html#utility-connector",
    "title": "Account Config extensions",
    "section": "",
    "text": "source\n\n\n\n DomoAccount_Config_AbstractCredential (credentials:dict)\n\n\nsource\n\n\n\n\n DomoAccount_Config_DomoAccessToken (domo_access_token:str=None,\n                                     username:str=None, password:str=None)\n\n\nsource\n\n\n\n\n DomoAccount_Config_DatasetCopy (domo_instance:str, access_token:str)\n\n\nsource\n\n\n\n\n DomoAccount_Config_Governance (domo_instance:str, access_token:str)",
    "crumbs": [
      "Blog",
      "Classes",
      "Account Config extensions"
    ]
  },
  {
    "objectID": "classes/domoaccount_config.html#amazon-connector",
    "href": "classes/domoaccount_config.html#amazon-connector",
    "title": "Account Config extensions",
    "section": "",
    "text": "source\n\n\n\n DomoAccount_Config_AmazonS3 (access_key:str, secret_key:str, bucket:str,\n                              region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_AmazonS3Advanced (access_key:str, secret_key:str,\n                                      bucket:str, region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_AwsAthena (access_key:str, secret_key:str, bucket:str,\n                               workgroup:str, region:str='us-west-2')\n\n\nsource\n\n\n\n\n DomoAccount_Config_HighBandwidthConnector (access_key:str,\n                                            secret_key:str, bucket:str,\n                                            region:str='us-west-2')\n\nthis connector is not enabled by default contact your CSM / AE\n\n\n\naccount_config = DomoAccount_Config_AmazonS3(\n    access_key=\"abc\",\n    secret_key=\"abc\",\n    bucket=\"s3://mybucket_string\",\n    region=\"us-west-2\",\n)\n\naccount_config.to_json()\n\n🤦‍♀️- Domo bucket expects string without s3:// prefix. Trimming to 'mybucket_string' for the output\n\n\n{'accessKey': 'abc',\n 'secretKey': 'abc',\n 'bucket': 'mybucket_string',\n 'region': 'us-west-2'}",
    "crumbs": [
      "Blog",
      "Classes",
      "Account Config extensions"
    ]
  },
  {
    "objectID": "classes/domogrant.html",
    "href": "classes/domogrant.html",
    "title": "Grant",
    "section": "",
    "text": "source\n\nDomoGrant\n\n DomoGrant (id:str, display_group:str=None, title:str=None,\n            depends_on_ls:list[str]=None, description:str=None,\n            role_membership_ls:list[str]=None)\n\n\nsource\n\n\nDomoGrants\n\n DomoGrants ()\n\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\nres = await DomoGrants.get_grants(auth=token_auth)\nres[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoGrant(id='authorization.roles', display_group='COMPANY', title='Manage all roles', depends_on_ls=['ui.admin'], description='Create, edit and delete custom roles. Assign anyone to any role in this instance.', role_membership_ls=['1', '275763436', '810756122']),\n DomoGrant(id='authorization.roles.assign', display_group='COMPANY', title='Assign users to a role', depends_on_ls=['ui.admin'], description='Assign users to a role in the allowlist.', role_membership_ls=['1', '810756122']),\n DomoGrant(id='entity.attribute.admin', display_group='COMPANY', title='Manage Certified Attributes', depends_on_ls=['ui.admin'], description='Create, edit and delete certified attributes', role_membership_ls=['1', '810756122']),\n DomoGrant(id='audit', display_group='COMPANY', title='View activity logs', depends_on_ls=['ui.admin'], description='View and export audit logs.', role_membership_ls=['1', '275763436', '810756122', '1563101750', '2097317660']),\n DomoGrant(id='customer.edit', display_group='COMPANY', title='Manage all company settings', depends_on_ls=['ui.admin'], description='Manage company metadata, authentication rules, authorized domain rules, export security, mobile home screen layouts, publishing, SSO Configuration, whitelist rules, report scheduler and licenses.', role_membership_ls=['1', '275763436', '810756122'])]",
    "crumbs": [
      "Blog",
      "Classes",
      "Grant"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html",
    "href": "classes/domoinstanceconfig.html",
    "title": "Instance Configuration",
    "section": "",
    "text": "source",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#weekly-digest",
    "href": "classes/domoinstanceconfig.html#weekly-digest",
    "title": "Instance Configuration",
    "section": "Weekly Digest",
    "text": "Weekly Digest\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\ndomo_config = DomoInstanceConfig(auth=auth)\n\nawait domo_config.get_is_weekly_digest_enabled(auth=auth)\n\n{'is_enabled': False, 'feature': 'come-back-to-domo-all-users'}\n\n\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\ndomo_config = DomoInstanceConfig(auth=auth)\n\nawait domo_config.toggle_is_weekly_digest_enabled(auth=auth, is_enabled=False)\n\n{'is_enabled': False, 'feature': 'come-back-to-domo-all-users'}",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#update-sso-config",
    "href": "classes/domoinstanceconfig.html#update-sso-config",
    "title": "Instance Configuration",
    "section": "Update SSO Config",
    "text": "Update SSO Config",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#get-publications",
    "href": "classes/domoinstanceconfig.html#get-publications",
    "title": "Instance Configuration",
    "section": "Get Publications",
    "text": "Get Publications\n\nsample implementation of get_publications\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nlist_pub = await DomoInstanceConfig.get_publications(auth=auth)\nprint(list_pub)\n\n[DomoPublication(id='095426a1-2c35-468b-bb96-36c516382f19', name='Ellibot', description='', is_v2=True, created_dt=datetime.datetime(2023, 11, 10, 11, 5, 10, 961000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='173ee64d-4f68-4d40-b634-22b5332f4e45', publication_id='095426a1-2c35-468b-bb96-36c516382f19', domain='domo-community-ellibot.domo.com', created_dt=datetime.datetime(2023, 11, 10, 11, 5, 10, 961000))], content=[DomoPublication_Content(content_id='c61531b6-81ac-45ec-9a77-d41194406097', entity_type='DATASET', entity_id='f6210193-5322-4481-a1de-d07aed544050', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['f6210193-5322-4481-a1de-d07aed544050'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='99a4f772-f0e0-47a6-873a-5870d03b9134', name='Landing Page QA', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 15, 15, 14, 23, 791000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='e0788b4e-5973-4c48-8a56-433dfb280496', publication_id='99a4f772-f0e0-47a6-873a-5870d03b9134', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 15, 15, 14, 23, 791000))], content=[DomoPublication_Content(content_id='b10b76dd-17f6-4459-9279-d1764035fad8', entity_type='DATASET', entity_id='51260f1d-b146-4dff-a1d8-68b7aa0b740b', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['51260f1d-b146-4dff-a1d8-68b7aa0b740b'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='e3295d79-4dbe-4994-8f8e-f105b178cc3b', name='Sandbox_PROD', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 15, 14, 54, 18, 747000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='7ff7ec45-4a5b-4f5b-ab82-c2d4e00527a1', publication_id='e3295d79-4dbe-4994-8f8e-f105b178cc3b', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 15, 14, 54, 18, 748000))], content=[DomoPublication_Content(content_id='d4414dfc-3d05-41ef-bb47-8b29b75bb6b8', entity_type='DATASET', entity_id='15543b0f-dfe7-4a91-b7db-a86b9e8fec82', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['15543b0f-dfe7-4a91-b7db-a86b9e8fec82'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='17ec9f81-906f-42f7-b70b-6a26e2db523f', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 12, 5, 0, 235000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='c3e2d03e-fd02-4bdc-a2c5-1daa0ae134c4', publication_id='17ec9f81-906f-42f7-b70b-6a26e2db523f', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 12, 5, 0, 235000))], content=[DomoPublication_Content(content_id='72d3f072-cecc-4940-af69-e25a64170148', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='5b4a61f0-4f65-4191-97ff-245702756a4a', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 7, 7, 10, 44, 0, 2000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='5f0989bd-fc58-4590-bdf1-9d358ea9287a', publication_id='5b4a61f0-4f65-4191-97ff-245702756a4a', domain='test.domo.com', created_dt=datetime.datetime(2023, 7, 7, 10, 44, 0, 2000))], content=[DomoPublication_Content(content_id='ede617cc-65d1-419b-bd9d-1ea7205cde62', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='1e7eb490-64fa-4e76-8e48-7bf7e7b73851', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 14, 49, 45, 693000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='f7402872-6a19-4da6-9afc-363efc9c4711', publication_id='1e7eb490-64fa-4e76-8e48-7bf7e7b73851', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 14, 49, 45, 694000))], content=[DomoPublication_Content(content_id='94b4c694-fc20-40dc-9eac-f85ba64121a4', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='544c3a06-84db-441a-b1a1-051e84020976', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 28, 13, 37, 45, 633000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='129a8b4d-298f-4eb8-b2ad-f4205189d0e3', publication_id='544c3a06-84db-441a-b1a1-051e84020976', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 28, 13, 37, 45, 633000))], content=[DomoPublication_Content(content_id='9768f3af-d016-4df2-8663-f01c6955336b', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='67fa93ca-173a-43e1-b830-51ac188d3a2a', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 28, 13, 39, 7, 435000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='ae01ae3f-4461-4159-af58-6f0e977bfb66', publication_id='67fa93ca-173a-43e1-b830-51ac188d3a2a', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 28, 13, 39, 7, 435000))], content=[DomoPublication_Content(content_id='c9b1cf73-8161-435c-b489-808a87948f4b', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='0d5e5bab-8907-4afc-9e81-61b5c8b7196d', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 7, 7, 10, 43, 28, 875000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='827a6e8f-d1c9-432c-a7ec-029e998f07a2', publication_id='0d5e5bab-8907-4afc-9e81-61b5c8b7196d', domain='test.domo.com', created_dt=datetime.datetime(2023, 7, 7, 10, 43, 28, 875000))], content=[DomoPublication_Content(content_id='c6436d38-e321-483e-b297-211556375b16', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='3ed4e4b3-2d0d-422f-8c2a-e0de94d57ef9', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 11, 53, 20, 79000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='0aacf3c0-3c89-45fb-866c-f834c63d30aa', publication_id='3ed4e4b3-2d0d-422f-8c2a-e0de94d57ef9', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 11, 53, 20, 79000))], content=[DomoPublication_Content(content_id='a785b401-34cc-419c-8728-d326f0a95e02', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='868e5bfa-3e0b-43f4-819a-6a34e33f039c', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 16, 9, 29, 900000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='53113e79-3671-4ed0-acf7-f54aef53ae8d', publication_id='868e5bfa-3e0b-43f4-819a-6a34e33f039c', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 16, 9, 29, 900000))], content=[DomoPublication_Content(content_id='425bc84d-a961-4973-8fee-5aafb209431a', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='234bff3e-bfe7-4b2d-859e-18077fa6f151', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 26, 12, 52, 17, 175000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='e34198a4-2885-483d-9916-750d9be78cbc', publication_id='234bff3e-bfe7-4b2d-859e-18077fa6f151', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 26, 12, 52, 17, 175000))], content=[DomoPublication_Content(content_id='80903d8d-1f5f-41bb-8fe9-c1534d2a73d9', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='6af270bd-fe87-4672-abdb-cba982567b3b', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 14, 45, 27, 723000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='4edebbf0-eef8-4a1b-9395-947714fd6438', publication_id='6af270bd-fe87-4672-abdb-cba982567b3b', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 14, 45, 27, 723000))], content=[DomoPublication_Content(content_id='c32832cc-b316-4131-9823-098d0fb4e8dc', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='5696c128-299c-4f43-a7bc-91bf9b412efa', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 14, 52, 26, 775000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='6338cdaa-1103-4e2d-99a9-862a93073efd', publication_id='5696c128-299c-4f43-a7bc-91bf9b412efa', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 14, 52, 26, 775000))], content=[DomoPublication_Content(content_id='2652fdf8-fa3f-4dc4-852f-b47ed5ccaaf7', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='acc9b806-0d17-4a53-b3f0-d8c6b39be67a', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 7, 7, 10, 11, 10, 86000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='e5f1fce4-008e-4ee1-8fe5-f080e80bbe0a', publication_id='acc9b806-0d17-4a53-b3f0-d8c6b39be67a', domain='test.domo.com', created_dt=datetime.datetime(2023, 7, 7, 10, 11, 10, 86000))], content=[DomoPublication_Content(content_id='91c7cb1a-2fa2-41a5-a0eb-e75b587971b6', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='e5f7461f-66f9-4e88-8cb3-2112923748ae', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 5, 23, 6, 44, 24, 995000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='3708f286-9c28-4d97-8e61-233950af35c8', publication_id='e5f7461f-66f9-4e88-8cb3-2112923748ae', domain='test.domo.com', created_dt=datetime.datetime(2023, 5, 23, 6, 44, 24, 995000))], content=[DomoPublication_Content(content_id='328d4a54-e066-4573-80cb-e94191b1b145', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='8e3547ed-9337-49d1-a32b-bf91077b39ac', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 26, 12, 54, 35, 983000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='36a2e742-b091-4a87-ba2e-3dc570509c1a', publication_id='8e3547ed-9337-49d1-a32b-bf91077b39ac', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 26, 12, 54, 35, 983000))], content=[DomoPublication_Content(content_id='d7a63d01-cfac-43f8-8d47-6d4cfcb16722', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='12569e57-ecea-4e3e-88b9-108317051047', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 16, 13, 6, 342000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='21836f64-112a-4400-bbfb-8d89045fe937', publication_id='12569e57-ecea-4e3e-88b9-108317051047', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 16, 13, 6, 343000))], content=[DomoPublication_Content(content_id='d223a65a-b72c-4ff4-b47c-e35b5a06dc33', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='4386c956-205b-4860-a60a-1ba281dc3113', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 7, 7, 9, 17, 45, 236000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='a382635c-676f-416c-95ab-c9b8d143fa8a', publication_id='4386c956-205b-4860-a60a-1ba281dc3113', domain='test.domo.com', created_dt=datetime.datetime(2023, 7, 7, 9, 17, 45, 236000))], content=[DomoPublication_Content(content_id='2be48c34-40df-45f0-b2cc-e46e43ea8841', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='438731a1-7e4e-4863-967f-fcfad22c9247', name='Test OZ - updated', description='', is_v2=True, created_dt=datetime.datetime(2023, 5, 2, 15, 6, 24, 358000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='a0272907-d34c-4c27-b716-f2386dfecd19', publication_id='438731a1-7e4e-4863-967f-fcfad22c9247', domain='test.domo.com', created_dt=datetime.datetime(2023, 5, 2, 15, 6, 24, 358000))], content=[DomoPublication_Content(content_id='16e1b47f-6677-41a3-9c80-894550fec649', entity_type='PAGE', entity_id='384424178', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='14d1a1e9-8673-4b3f-aa72-1d32a6041140', entity_type='DATASET', entity_id='4ef43af5-67e7-4b9e-bd58-c4e592aa289a', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='53ab2b71-7b4c-47c9-9d0f-5deb3c7974f8', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='87579059-fb6a-4d35-99ab-8ff624472dfd', entity_type='DATASET', entity_id='04c1574e-c8be-4721-9846-c6ffa491144b', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=['384424178'], content_dataset_id_ls=['4ef43af5-67e7-4b9e-bd58-c4e592aa289a', 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4', '04c1574e-c8be-4721-9846-c6ffa491144b'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])), DomoPublication(id='701eb547-4244-43f6-bcda-003ed2c483c7', name='test_publish', description='', is_v2=True, created_dt=datetime.datetime(2023, 4, 27, 1, 36, 20, 642000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='447bf630-7113-4323-bf67-773dcc450a3a', publication_id='701eb547-4244-43f6-bcda-003ed2c483c7', domain='test.domo.com', created_dt=datetime.datetime(2023, 4, 27, 1, 36, 20, 642000))], content=[DomoPublication_Content(content_id='cb257f38-6d6b-46b7-92c5-aee90fde7b66', entity_type='PAGE', entity_id='1880852133', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='06c56df0-c58b-4afd-ab3f-41de5089273a', entity_type='DATASET', entity_id='ea859b06-5dbe-4c31-be76-de921447d550', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='40d4d296-af58-42e9-98a1-131d3b9c1c97', entity_type='DATASET', entity_id='cf149711-df55-4dc3-a159-59a26d066baa', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='a600cd85-3820-47ab-b66f-6ad682d139fb', entity_type='DATASET', entity_id='ee24d234-303e-46aa-b062-9905dc0d8622', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='f80ef8c8-a133-439c-b459-7967ce7df4b3', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=['1880852133'], content_dataset_id_ls=['ea859b06-5dbe-4c31-be76-de921447d550', 'cf149711-df55-4dc3-a159-59a26d066baa', 'ee24d234-303e-46aa-b062-9905dc0d8622', 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[]))]",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#alter-the-allowlist",
    "href": "classes/domoinstanceconfig.html#alter-the-allowlist",
    "title": "Instance Configuration",
    "section": "ALTER the allowlist",
    "text": "ALTER the allowlist\n\nThe updating the allowlist will automatically include the IP Address that submits the set_allowlist request. This prevents users from accidentally locking themselves out of domo.\nthe set_allowlist API always does a SET command, by default there is no UPDATE or INSERT option. This class-based implementation uses a combination of get_allowlist, MERGE and set_allowlist to perform an UPSERT equivalent.\n\n\nsample implementation of set and upsert allowlist\n\n# this route requires full auth\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\ndmicnfg = DomoInstanceConfig(auth=auth)\ntry:\n    await dmicnfg.set_allowlist(auth=auth, ip_address_ls=[\"0.0.0.0/0\"])\nexcept Exception as e:\n    print(e)\n\n\n# this route requires full auth\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\ndmicnfg = DomoInstanceConfig(auth=auth)\ntry:\n    await dmicnfg.upsert_allowlist(auth=auth, ip_address_ls=[\"192.168.0.1\"])\nexcept Exception as e:\n    print(e)",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#domo-grants",
    "href": "classes/domoinstanceconfig.html#domo-grants",
    "title": "Instance Configuration",
    "section": "Domo Grants",
    "text": "Domo Grants\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\ndmicnfg = DomoInstanceConfig(auth=token_auth)\n\nres = await dmicnfg.get_grants(debug_prn=True)\n\npd.DataFrame(res[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\ndisplay_group\ntitle\ndepends_on_ls\ndescription\nrole_membership_ls\n\n\n\n\n0\nauthorization.roles\nCOMPANY\nManage all roles\n[ui.admin]\nCreate, edit and delete custom roles. Assign a...\n[1, 275763436, 810756122]\n\n\n1\nauthorization.roles.assign\nCOMPANY\nAssign users to a role\n[ui.admin]\nAssign users to a role in the allowlist.\n[1, 810756122]\n\n\n2\nentity.attribute.admin\nCOMPANY\nManage Certified Attributes\n[ui.admin]\nCreate, edit and delete certified attributes\n[1, 810756122]\n\n\n3\naudit\nCOMPANY\nView activity logs\n[ui.admin]\nView and export audit logs.\n[1, 275763436, 810756122, 1563101750, 2097317660]\n\n\n4\ncustomer.edit\nCOMPANY\nManage all company settings\n[ui.admin]\nManage company metadata, authentication rules,...\n[1, 275763436, 810756122]",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#domo-roles",
    "href": "classes/domoinstanceconfig.html#domo-roles",
    "title": "Instance Configuration",
    "section": "Domo Roles",
    "text": "Domo Roles\n\nsample implementation of get_roles\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndmdic = DomoInstanceConfig(auth=token_auth)\n\nres = await dmdic.get_roles(return_raw=False)\n\npd.DataFrame(res)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nauth\nid\nname\ndescription\nis_system_role\nis_default_role\ngrant_ls\nmembership_ls\n\n\n\n\n0\n{'domo_instance': 'domo-community', 'domo_acce...\n1\nAdmin\nFull access to everything\nTrue\nFalse\n[]\n[]\n\n\n1\n{'domo_instance': 'domo-community', 'domo_acce...\n2\nPrivileged\nFull access except for editing users and setti...\nTrue\nTrue\n[]\n[]\n\n\n2\n{'domo_instance': 'domo-community', 'domo_acce...\n3\nEditor\nCan edit Cards, Pages, DataSets, and Dataflows\nTrue\nFalse\n[]\n[]\n\n\n3\n{'domo_instance': 'domo-community', 'domo_acce...\n4\nParticipant\nRead only access to Cards and Pages\nTrue\nFalse\n[]\n[]\n\n\n4\n{'domo_instance': 'domo-community', 'domo_acce...\n5\nSocial\nAccess limited to social features\nTrue\nFalse\n[]\n[]\n\n\n5\n{'domo_instance': 'domo-community', 'domo_acce...\n104295428\nsuper_admin_v3\nupsert via DomoLibrary\n0\nFalse\n[]\n[]\n\n\n6\n{'domo_instance': 'domo-community', 'domo_acce...\n275763436\nmanual_super_admin\nFull access to everything - h9\n0\nFalse\n[]\n[]\n\n\n7\n{'domo_instance': 'domo-community', 'domo_acce...\n810756122\nsuper_admin\nlast updated - 2024-03-23\n0\nFalse\n[]\n[]\n\n\n8\n{'domo_instance': 'domo-community', 'domo_acce...\n1563101750\ndl_department_admin\ndeployed via domo_library script - updated 202...\n0\nFalse\n[]\n[]\n\n\n9\n{'domo_instance': 'domo-community', 'domo_acce...\n1662852841\ndl_test\ndeployed via domo_library script - updated 202...\n0\nFalse\n[]\n[]\n\n\n10\n{'domo_instance': 'domo-community', 'domo_acce...\n2097317660\nCommunity_Default_Priviliged\nFull access except for editing users and setti...\n0\nFalse\n[]\n[]",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#authorized-domains",
    "href": "classes/domoinstanceconfig.html#authorized-domains",
    "title": "Instance Configuration",
    "section": "Authorized Domains",
    "text": "Authorized Domains\n\nsample implementation of get_authorized_domains\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndmdic = DomoInstanceConfig(auth=token_auth)\n\nawait dmdic.get_authorized_domains(return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[]",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#custom-application-authorized-domains",
    "href": "classes/domoinstanceconfig.html#custom-application-authorized-domains",
    "title": "Instance Configuration",
    "section": "Custom Application Authorized Domains",
    "text": "Custom Application Authorized Domains\n\nsample implementation of get_authorized_custom_app_domains\n\n# import domolibrary.client.DomoAuth as dmda\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndmdic = DomoInstanceConfig(auth=token_auth)\n\nawait dmdic.get_authorized_custom_app_domains(return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['domo.com',\n 'salesforce.com',\n 'facebook.com',\n 'twitter.com',\n 'instagram.com',\n 'youtube.com',\n 'linkedin.com']\n\n\n\n\nSet and Upsert of custom app authorized domains",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig.html#applications",
    "href": "classes/domoinstanceconfig.html#applications",
    "title": "Instance Configuration",
    "section": "Applications",
    "text": "Applications\n\nsample implementation of get_applications()\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndmdic = DomoInstanceConfig(auth=auth)\n\nawait dmdic.get_applications(auth=auth, return_raw=False)\n\n[DomoApplication(id='25a97e0c-df6b-11eb-ba80-0242ac130004', version='1.0.102_1', name='Toolkit: PDP Automation', customer_id='mmmm-0012-0200', description='PDP Automation', execution_class='com.domo.executor.pdp.PDPAutomationApplication', grants=['pipeline.executor.job.create', 'dataset.manage'], jobs=None),\n DomoApplication(id='4ddbf5d7-6441-4eb3-b5aa-97707cae2d2b', version='1.0.25_3', name='Toolkit: Schema Management', customer_id='mmmm-0012-0200', description='Schema Management', execution_class='com.domo.executor.schema.SchemaManagement', grants=['pipeline.executor.job.create', 'dataset.admin'], jobs=None),\n DomoApplication(id='e37a6942-9c0f-485a-8288-4fe95e10b23d', version='1.0.7_2', name='Toolkit: DataSet S3 Backup', customer_id='mmmm-0012-0200', description='DataSet S3 Backup', execution_class='com.domo.executor.backup.DataSetBackupExecutor', grants=['dataset.admin', 'search.allentities.query'], jobs=None),\n DomoApplication(id='b52f3c80-2642-4dcb-b874-b327326021b0', version='1.80_1', name='Toolkit: User Automation', customer_id='mmmm-0012-0200', description='Toolkit: User Automation', execution_class='com.domo.executor.userautomation.UserAutomationExecutor', grants=['pipeline.executor.job.create', 'dataset.manage', 'authorization.roles', 'user.invite', 'user.edit'], jobs=None),\n DomoApplication(id='2f6573a5-97d8-4e27-b0fd-3c0f2313a3c8', version='1.0.43_2', name='Toolkit: Group Management', customer_id='mmmm-0012-0200', description='Group Management', execution_class='com.domo.executor.automation.GroupAutomationExecutor', grants=['pipeline.executor.job.create', 'dataset.admin', 'group.admin', 'content.admin'], jobs=None),\n DomoApplication(id='bf651f89-2b76-4290-a5d8-d4dbcddc86a3', version='1.0.7_2', name='Toolkit: Triggered Reports', customer_id='mmmm-0012-0200', description='Triggers Scheduled reports based on triggered Alerts, or DataSet updates', execution_class='com.domo.executor.reports.ReportTriggerExecutor', grants=['pipeline.executor.job.create', 'dataset.manage', 'content.export', 'alert.edit'], jobs=None),\n DomoApplication(id='50e7230f-d2f2-42e2-a208-d94c8ae9f64c', version='1.2.401_1', name='Toolkit: Remote Domo Stats', customer_id='mmmm-0012-0200', description='Remote Domo Stats', execution_class='com.domo.executor.subscriberstats.SubscriberStatsExecutor', grants=['developer.token.manage', 'pipeline.executor.job.create', 'content.export', 'service.internal', 'dataset.admin', 'audit', 'domostats-connector', 'content.admin', 'usage.reports.view', 'authenticated.user'], jobs=None),\n DomoApplication(id='a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4', version='1.0.35_2', name='Toolkit: DataSet Tag Automation', customer_id='mmmm-0012-0200', description='DataSet Tag Automation', execution_class='com.domo.executor.tags.ResourceTagApplication', grants=['dataflow.admin', 'dataset.admin', 'search.allentities.query'], jobs=None),\n DomoApplication(id='068a1c2d-7a1a-449d-82d9-5ab54e2eb16e', version='1.0.76_2', name='Geocoder Executor', customer_id='mmmm-0012-0200', description='Geocoder Executor Service', execution_class='com.domo.executor.geocoder.GeocoderApplication', grants=['pipeline.executor.job.create'], jobs=None),\n DomoApplication(id='69a16dc5-1d0e-45a6-8e15-459d8c0b1b42', version='1.0.21_2', name='Toolkit: Virtual Dataset Sharing', customer_id='mmmm-0012-0200', description='Virtual Dataset Sharing', execution_class='com.domo.executor.dataset.DataSetSharingApplication', grants=['pipeline.executor.job.create', 'dataset.manage'], jobs=None)]\n\n\n\n\nsample implementation of generate_appications_report\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_config = DomoInstanceConfig(auth=auth)\n\n(await domo_config.generate_applications_report())[0:5]\n\n\n\n\n\n\n\n\n\napplication_description\napplication_id\napplication_name\napplication_version\ncustomer_id\ndomo_instance\nexecution_class\ngrants\njobs\njobs_schedule\n\n\n\n\n0\nPDP Automation\n25a97e0c-df6b-11eb-ba80-0242ac130004\nToolkit: PDP Automation\n1.0.102_1\nmmmm-0012-0200\ndomo-community\ncom.domo.executor.pdp.PDPAutomationApplication\n[pipeline.executor.job.create, dataset.manage]\nNone\nNone\n\n\n1\nSchema Management\n4ddbf5d7-6441-4eb3-b5aa-97707cae2d2b\nToolkit: Schema Management\n1.0.25_3\nmmmm-0012-0200\ndomo-community\ncom.domo.executor.schema.SchemaManagement\n[pipeline.executor.job.create, dataset.admin]\nNone\nNone\n\n\n2\nDataSet S3 Backup\ne37a6942-9c0f-485a-8288-4fe95e10b23d\nToolkit: DataSet S3 Backup\n1.0.7_2\nmmmm-0012-0200\ndomo-community\ncom.domo.executor.backup.DataSetBackupExecutor\n[dataset.admin, search.allentities.query]\nNone\nNone\n\n\n3\nToolkit: User Automation\nb52f3c80-2642-4dcb-b874-b327326021b0\nToolkit: User Automation\n1.80_1\nmmmm-0012-0200\ndomo-community\ncom.domo.executor.userautomation.UserAutomatio...\n[pipeline.executor.job.create, dataset.manage,...\nNone\nNone\n\n\n4\nGroup Management\n2f6573a5-97d8-4e27-b0fd-3c0f2313a3c8\nToolkit: Group Management\n1.0.43_2\nmmmm-0012-0200\ndomo-community\ncom.domo.executor.automation.GroupAutomationEx...\n[pipeline.executor.job.create, dataset.admin, ...\nNone\nNone",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration"
    ]
  },
  {
    "objectID": "classes/domojupyter.html",
    "href": "classes/domojupyter.html",
    "title": "DomoJupyter Integration",
    "section": "",
    "text": "![Tutorial Video pt 4 of 4]",
    "crumbs": [
      "Blog",
      "Classes",
      "DomoJupyter Integration"
    ]
  },
  {
    "objectID": "classes/domojupyter.html#domojupyter-content-and-class",
    "href": "classes/domojupyter.html#domojupyter-content-and-class",
    "title": "DomoJupyter Integration",
    "section": "DomoJupyter Content and Class",
    "text": "DomoJupyter Content and Class\n\nsource\n\nDomoJupyterWorkspace_Content\n\n DomoJupyterWorkspace_Content (name:str, folder:str,\n                               last_modified:datetime.datetime,\n                               file_type:str, content:str, auth:domolibrar\n                               y.client.DomoAuth.DomoJupyterAuth,\n                               default_export_folder:str='export')",
    "crumbs": [
      "Blog",
      "Classes",
      "DomoJupyter Integration"
    ]
  },
  {
    "objectID": "classes/domosandbox.html",
    "href": "classes/domosandbox.html",
    "title": "Sandbox",
    "section": "",
    "text": "source\n\nDomoSandbox\n\n DomoSandbox ()\n\n\nsource\n\n\nDomoRepository\n\n DomoRepository (id:str, name:str, last_updated_dt:datetime.datetime,\n                 commit_dt:datetime.datetime, commit_version:str,\n                 auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                 content_page_id_ls:list[str]=None,\n                 content_card_id_ls:list[str]=None,\n                 content_dataflow_id_ls:list[str]=None,\n                 content_view_id_ls:list[str]=None)\n\n\nsource\n\n\nInvalidRepositoryError\nCommon base class for all non-exit exceptions.\nSample of call to get Sandbox repositories\n\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nsandbox_repos = await DomoSandbox.get_repositories(auth=token_auth)\n\nfrom pprint import pprint\n\npprint(sandbox_repos)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n[DomoRepository(id='abd4cb2b-ec72-4373-a471-2a04db500713', name='Landing Page_PROD', last_updated_dt=datetime.datetime(2023, 6, 15, 21, 9, 0, 244000), commit_dt=datetime.datetime(2023, 6, 15, 21, 17, 17, 188000), commit_version='v2', auth=DomoTokenAuth(domo_instance='domo-community', token_name='token_auth', is_valid_token=True, url_manual_login='https://domo-community.domo.com/auth/index?domoManualLogin=true'), content_page_id_ls=[], content_card_id_ls=[], content_dataflow_id_ls=[226], content_view_id_ls=[]),\n DomoRepository(id='bc9b553c-ea02-4fce-ba63-2a4a63b455ef', name='Landing Page_QA', last_updated_dt=datetime.datetime(2023, 6, 15, 21, 11, 39, 941000), commit_dt=datetime.datetime(2023, 6, 15, 21, 15, 56, 382000), commit_version='v2', auth=DomoTokenAuth(domo_instance='domo-community', token_name='token_auth', is_valid_token=True, url_manual_login='https://domo-community.domo.com/auth/index?domoManualLogin=true'), content_page_id_ls=[], content_card_id_ls=[], content_dataflow_id_ls=[226], content_view_id_ls=[]),\n DomoRepository(id='0c6fd62b-6c27-4397-b487-55d4e0179d69', name='Domo Variables Use Cases', last_updated_dt=datetime.datetime(2022, 11, 30, 22, 58, 54, 99000), commit_dt=datetime.datetime(2022, 12, 1, 15, 56, 21, 190000), commit_version='v2', auth=DomoTokenAuth(domo_instance='domo-community', token_name='token_auth', is_valid_token=True, url_manual_login='https://domo-community.domo.com/auth/index?domoManualLogin=true'), content_page_id_ls=[1880852133], content_card_id_ls=[], content_dataflow_id_ls=[], content_view_id_ls=[])]",
    "crumbs": [
      "Blog",
      "Classes",
      "Sandbox"
    ]
  },
  {
    "objectID": "classes/domodataflow_history.html",
    "href": "classes/domodataflow_history.html",
    "title": "Dataflow",
    "section": "",
    "text": "Dataflow_History_Execution\nclass that models a dataflow execution event. can include list of DomoDataflow_ActionResult which are tile executions\n\nsource\n\nDomoDataflow_History_Execution\n\n DomoDataflow_History_Execution (auth:dmda.DomoAuth, id:str,\n                                 dataflow_id:str,\n                                 dataflow_execution_id:str,\n                                 dataflow_version:str,\n                                 begin_time:dt.datetime,\n                                 end_time:dt.datetime,\n                                 last_updated:dt.datetime, is_failed:bool,\n                                 state:str, activation_type:str,\n                                 data_processor:str, telemetry:dict,\n                                 execution_stats:dict, action_results:List\n                                 [DomoDataflow_ActionResult]=None)\n\n\nsource\n\n\nDomoDataflow_History_Execution.get_by_id\n\n DomoDataflow_History_Execution.get_by_id\n                                           (auth:domolibrary.client.DomoAu\n                                           th.DomoAuth, dataflow_id:int,\n                                           execution_id:int,\n                                           debug_api:bool=False,\n                                           debug_num_stacks_to_drop=1,\n                                           session:httpx.AsyncClient=None,\n                                           return_raw:bool=False)\n\nretrieves details about a dataflow execution including actions\n\nsample implementation of Dataflow_History_Execution get_by_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nfrom pprint import pprint\n\npprint(\n    await DomoDataflow_History_Execution.get_by_id(\n        dataflow_id=70, execution_id=433238, auth=token_auth, return_raw=False\n    )\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoDataflow_History_Execution(id=433238, dataflow_id=70, dataflow_execution_id='88e96b86-0dcd-4a84-a946-bcb22224ea2f', dataflow_version=262, begin_time=datetime.datetime(2023, 12, 5, 6, 16, 31), end_time=datetime.datetime(2023, 12, 5, 6, 17, 4), last_updated=datetime.datetime(2023, 12, 5, 6, 17, 4), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 97986, 'total_rows_read': 909, 'total_bytes_read': 291266, 'mean_download_rate_kbps': 56.014071115596686, 'total_rows_written': 1816}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 487000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 2, 754000), duration_in_sec=1.267), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 0, 983000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 100000), duration_in_sec=0.117), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 5, 6, 16, 55, 894000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 0, 972000), duration_in_sec=5.078), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 100000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 487000), duration_in_sec=0.387)])\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nfrom pprint import pprint\n\ndomo_dataflow_execution = await DomoDataflow_History_Execution.get_by_id(\n    dataflow_id=70, execution_id=433238, auth=token_auth, return_raw=False\n)\nawait domo_dataflow_execution.get_actions()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 487000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 2, 754000), duration_in_sec=1.267),\n DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 0, 983000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 100000), duration_in_sec=0.117),\n DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 5, 6, 16, 55, 894000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 0, 972000), duration_in_sec=5.078),\n DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 100000), end_time=datetime.datetime(2023, 12, 5, 6, 17, 1, 487000), duration_in_sec=0.387)]\n\n\n\nsource\n\n\n\nDomoDataflow_History\n\n DomoDataflow_History (auth:dmda.DomoAuth, dataflow_id:int,\n                       dataflow:None=None, execution_history:List[DomoData\n                       flow_History_Execution]=None)\n\n\nsource\n\n\nDomoDataflow_History.get_execution_history\n\n DomoDataflow_History.get_execution_history\n                                             (auth:domolibrary.client.Domo\n                                             Auth.DomoAuth=None,\n                                             maximum=10,\n                                             debug_api:bool=False,\n                                             debug_num_stacks_to_drop=2,\n                                             return_raw:bool=False)\n\nretrieves metadata about execution history. includes details like execution status.\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataflow_history = DomoDataflow_History(dataflow_id=185, auth=token_auth)\n\n(await domo_dataflow_history.get_execution_history(debug_api=False, return_raw=False))[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow_History_Execution(id=327615, dataflow_id=185, dataflow_execution_id='98fb0606-fa1b-48ea-bf96-0f3a052b7e99', dataflow_version=741, begin_time=datetime.datetime(2023, 6, 15, 15, 17, 58), end_time=datetime.datetime(2023, 6, 15, 15, 18, 9), last_updated=datetime.datetime(2023, 6, 15, 15, 18, 9), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MAGIC', telemetry=[{'name': 'activeOptimizations', 'value': 'c'}, {'name': 'maxFileMemoryBytes', 'value': '1991360'}], execution_stats={'total_bytes_written': 2299757, 'total_rows_read': 5988, 'total_bytes_read': 624402, 'mean_download_rate_kbps': 239.78276764648052, 'total_rows_written': 5988}, action_results=[DomoDataflow_ActionResult(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 5, 716000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 8000), duration_in_sec=1.292), DomoDataflow_ActionResult(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 133000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 590000), duration_in_sec=0.457), DomoDataflow_ActionResult(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 180000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 590000), duration_in_sec=0.41), DomoDataflow_ActionResult(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 216000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 590000), duration_in_sec=0.374), DomoDataflow_ActionResult(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 216000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 590000), duration_in_sec=0.374), DomoDataflow_ActionResult(id='435803f2-08a4-42b3-8eb2-295b1519c85f', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 217000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 590000), duration_in_sec=0.373), DomoDataflow_ActionResult(id='0c0f0aa1-06b7-4ec1-a3bb-2b28c9a28fa7', type='PublishToVault', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 218000), end_time=datetime.datetime(2023, 6, 15, 15, 18, 7, 693000), duration_in_sec=0.475)]),\n DomoDataflow_History_Execution(id=327600, dataflow_id=185, dataflow_execution_id='33118cae-2a9f-45dc-96dc-7bad72301333', dataflow_version=704, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 5), end_time=datetime.datetime(2023, 6, 15, 15, 3, 16), last_updated=datetime.datetime(2023, 6, 15, 15, 3, 16), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MAGIC', telemetry=[{'name': 'activeOptimizations', 'value': 'c'}, {'name': 'maxFileMemoryBytes', 'value': '1991360'}], execution_stats={'total_bytes_written': 1874609, 'total_rows_read': 5988, 'total_bytes_read': 624402, 'mean_download_rate_kbps': 271.8535791908159, 'total_rows_written': 5988}, action_results=[DomoDataflow_ActionResult(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 12, 484000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 668000), duration_in_sec=1.184), DomoDataflow_ActionResult(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 774000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 273000), duration_in_sec=0.499), DomoDataflow_ActionResult(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 852000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 262000), duration_in_sec=0.41), DomoDataflow_ActionResult(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 866000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 262000), duration_in_sec=0.396), DomoDataflow_ActionResult(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 867000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 262000), duration_in_sec=0.395), DomoDataflow_ActionResult(id='435803f2-08a4-42b3-8eb2-295b1519c85f', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 868000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 262000), duration_in_sec=0.394), DomoDataflow_ActionResult(id='0c0f0aa1-06b7-4ec1-a3bb-2b28c9a28fa7', type='PublishToVault', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 6, 15, 15, 3, 13, 874000), end_time=datetime.datetime(2023, 6, 15, 15, 3, 14, 408000), duration_in_sec=0.534)]),\n DomoDataflow_History_Execution(id=311629, dataflow_id=185, dataflow_execution_id='ff0206d4-2117-408e-b45c-f651281bb531', dataflow_version=667, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 45), end_time=datetime.datetime(2023, 5, 18, 17, 0, 56), last_updated=datetime.datetime(2023, 5, 18, 17, 0, 56), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MAGIC', telemetry=[{'name': 'activeOptimizations', 'value': 'c'}, {'name': 'maxFileMemoryBytes', 'value': '1991360'}], execution_stats={'total_bytes_written': 1820717, 'total_rows_read': 5988, 'total_bytes_read': 624402, 'mean_download_rate_kbps': 267.7942811264822, 'total_rows_written': 5988}, action_results=[DomoDataflow_ActionResult(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 52, 937000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 159000), duration_in_sec=1.222), DomoDataflow_ActionResult(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 316000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 762000), duration_in_sec=0.446), DomoDataflow_ActionResult(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 341000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 762000), duration_in_sec=0.421), DomoDataflow_ActionResult(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 356000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 762000), duration_in_sec=0.406), DomoDataflow_ActionResult(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 357000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 762000), duration_in_sec=0.405), DomoDataflow_ActionResult(id='0c0f0aa1-06b7-4ec1-a3bb-2b28c9a28fa7', type='PublishToVault', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 358000), end_time=datetime.datetime(2023, 5, 18, 17, 0, 54, 900000), duration_in_sec=0.542)]),\n DomoDataflow_History_Execution(id=311627, dataflow_id=185, dataflow_execution_id='10367d5b-3f1a-40ac-a235-eddd23fbc436', dataflow_version=666, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 23), end_time=datetime.datetime(2023, 5, 18, 16, 57, 33), last_updated=datetime.datetime(2023, 5, 18, 16, 57, 33), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MAGIC', telemetry=[{'name': 'activeOptimizations', 'value': 'c'}, {'name': 'maxFileMemoryBytes', 'value': '1991360'}], execution_stats={'total_bytes_written': 1814729, 'total_rows_read': 5988, 'total_bytes_read': 624402, 'mean_download_rate_kbps': 268.50179573976226, 'total_rows_written': 5988}, action_results=[DomoDataflow_ActionResult(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 30, 89000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 402000), duration_in_sec=1.313), DomoDataflow_ActionResult(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 579000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 982000), duration_in_sec=0.403), DomoDataflow_ActionResult(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 602000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 982000), duration_in_sec=0.38), DomoDataflow_ActionResult(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 610000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 982000), duration_in_sec=0.372), DomoDataflow_ActionResult(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 675000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 982000), duration_in_sec=0.307), DomoDataflow_ActionResult(id='0c0f0aa1-06b7-4ec1-a3bb-2b28c9a28fa7', type='PublishToVault', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 57, 31, 676000), end_time=datetime.datetime(2023, 5, 18, 16, 57, 32, 114000), duration_in_sec=0.438)]),\n DomoDataflow_History_Execution(id=311626, dataflow_id=185, dataflow_execution_id='0c493b3f-e44f-4e5a-8aec-db2f4fb3ce97', dataflow_version=664, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 36), end_time=datetime.datetime(2023, 5, 18, 16, 55, 47), last_updated=datetime.datetime(2023, 5, 18, 16, 55, 47), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MAGIC', telemetry=[{'name': 'activeOptimizations', 'value': 'c'}, {'name': 'maxFileMemoryBytes', 'value': '1991360'}], execution_stats={'total_bytes_written': 1366868, 'total_rows_read': 5988, 'total_bytes_read': 624402, 'mean_download_rate_kbps': 314.1512509659969, 'total_rows_written': 5988}, action_results=[DomoDataflow_ActionResult(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 44, 63000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 77000), duration_in_sec=1.014), DomoDataflow_ActionResult(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 261000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 653000), duration_in_sec=0.392), DomoDataflow_ActionResult(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 269000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 653000), duration_in_sec=0.384), DomoDataflow_ActionResult(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 354000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 653000), duration_in_sec=0.299), DomoDataflow_ActionResult(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 355000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 653000), duration_in_sec=0.298), DomoDataflow_ActionResult(id='0c0f0aa1-06b7-4ec1-a3bb-2b28c9a28fa7', type='PublishToVault', name=None, is_success=True, rows_processed=5988, begin_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 356000), end_time=datetime.datetime(2023, 5, 18, 16, 55, 45, 777000), duration_in_sec=0.421)])]",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataflow"
    ]
  },
  {
    "objectID": "classes/domoaccesstoken.html",
    "href": "classes/domoaccesstoken.html",
    "title": "AccessToken",
    "section": "",
    "text": "Access Token\n\nsource\n\nDomoAccessToken\n\n DomoAccessToken (id:int, name:str, owner:None,\n                  expiration_date:datetime.datetime, token:str,\n                  auth:domolibrary.client.DomoAuth.DomoAuth)\n\n\nsource\n\n\nget_access_tokens\n\n get_access_tokens (auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                    return_raw:bool=False, debug_api:bool=False,\n                    debug_num_stacks_to_drop=2,\n                    session:httpx.AsyncClient=None, parent_class=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_tokens = await get_access_tokens(auth=token_auth)\ndomo_tokens[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoAccessToken(id=156180, name='Governance', owner=DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title='Executive Analytics', avatar_key='09/6CF6C801EEF440968C88ECC9824D66', phone_number='6304647034', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=datetime.datetime(2030, 5, 13, 14, 47, 33)),\n DomoAccessToken(id=159191, name='Java CLI', owner=DomoUser(id='1345408759', display_name='Alexis Lorenz (DataMaven)', email_address='DataMaven42@gmail.com', role_id=1, department='Owner', title='Major Domo Support Specialist', avatar_key='3ad4c694-c9e8-4b6b-8b80-366d347d826e', phone_number='518-496-4710', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1590156374000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=datetime.datetime(2030, 7, 26, 20, 11, 21)),\n DomoAccessToken(id=163868, name='Governance', owner=DomoUser(id='1345408759', display_name='Alexis Lorenz (DataMaven)', email_address='DataMaven42@gmail.com', role_id=1, department='Owner', title='Major Domo Support Specialist', avatar_key='3ad4c694-c9e8-4b6b-8b80-366d347d826e', phone_number='518-496-4710', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1590156374000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=datetime.datetime(2030, 11, 4, 21, 6)),\n DomoAccessToken(id=168840, name='Dataset Copy', owner=DomoUser(id='1345408759', display_name='Alexis Lorenz (DataMaven)', email_address='DataMaven42@gmail.com', role_id=1, department='Owner', title='Major Domo Support Specialist', avatar_key='3ad4c694-c9e8-4b6b-8b80-366d347d826e', phone_number='518-496-4710', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1590156374000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=datetime.datetime(2031, 2, 20, 18, 55, 14)),\n DomoAccessToken(id=182879, name='S3 Export', owner=DomoUser(id='68216396', display_name='Elliott Leonard', email_address='egleonard88@gmail.com', role_id=1, department='Owner', title=None, avatar_key='77cad494-6551-47e1-82eb-9e7d840d3a2d', phone_number='9702198956', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=datetime.datetime(2022, 10, 8, 2, 51, 55))]\n\n\n\n# import domolibrary.classes.DomoUser as dmu\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user = await dmu.DomoUsers.by_email(email_ls=[\"test4@domo.com\"], auth=token_auth)\n\ntoken = await DomoAccessToken.generate(\n    token_name=f\"DL test {dt.date.today()}\",\n    owner=domo_user,\n    duration_in_days=30,\n    auth=token_auth,\n    debug_api=False,\n)\ntoken\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccessToken(id=186930, name='DL test 2024-03-23', owner=DomoUser(id='1216550715', display_name='8:26 - go to sleep', email_address='test4@domo.com', role_id=2, department='test', title=None, avatar_key=None, phone_number='152', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=1713807205000)\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait token.regenerate()\n\nDomoAccessToken(id=186931, name='DL test 2024-03-23', owner=DomoUser(id='1216550715', display_name='8:26 - go to sleep', email_address='test4@domo.com', role_id=2, department='test', title=None, avatar_key=None, phone_number='152', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[])), expiration_date=1718991210000)",
    "crumbs": [
      "Blog",
      "Classes",
      "AccessToken"
    ]
  },
  {
    "objectID": "classes/domogroup_membership.html",
    "href": "classes/domogroup_membership.html",
    "title": "Group",
    "section": "",
    "text": "source\n\n\n\n GroupMembership (group)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\n\n\n UpdateGroupMembership (member_name, group_name, domo_instance)\n\nbase exception",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domolineage.html",
    "href": "classes/domolineage.html",
    "title": "Lineage",
    "section": "",
    "text": "source\n\nDomoLineage\n\n DomoLineage (parent:&lt;built-infunctionany&gt;,\n              auth:domolibrary.client.DomoAuth.DomoAuth=None,\n              page_id_ls:List[str]=&lt;factory&gt;,\n              card_id_ls:List[str]=&lt;factory&gt;,\n              dataflow_id_ls:List[str]=&lt;factory&gt;,\n              dataset_id_ls:List[str]=&lt;factory&gt;, entity_ls:List[&lt;built-\n              infunctionany&gt;]=&lt;factory&gt;)\n\n\nsource\n\n\nDomoLineage_Type\n\n DomoLineage_Type (value, names=None, module=None, qualname=None,\n                   type=None, start=1)\n\nAn enumeration.\n\n# import domolibrary.classes.DomoDataflow as dmdf\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataflow = dmdf.DomoDataflow(id=112, auth=token_auth)\n\ndomo_lineage = DomoLineage(auth=token_auth, parent=domo_dataflow)\n\nawait domo_lineage.get_entity_lineage_upstream(debug_api=False, return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow(id=112, name='Time Zone Test', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='74e125a8-76fb-49e6-8825-c1d0ee121641', type='LoadFromVault', name='Time Zone Test', datasource_id='3929c2cd-6549-4f53-9539-0f3e34233ef0', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='7a287510-67d9-40e2-9a6e-d8f247b8b005', type='ExpressionEvaluator', name='Offset Prep', datasource_id=None, sql=None, depends_on=['74e125a8-76fb-49e6-8825-c1d0ee121641'], parent_actions=[DomoDataflow_Action(id='74e125a8-76fb-49e6-8825-c1d0ee121641', type='LoadFromVault', name='Time Zone Test', datasource_id='3929c2cd-6549-4f53-9539-0f3e34233ef0', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='be94da12-290e-41bc-a8f2-a076348a9b1a', type='DateCalculator', name='Date Operations', datasource_id=None, sql=None, depends_on=['7a287510-67d9-40e2-9a6e-d8f247b8b005'], parent_actions=[DomoDataflow_Action(id='7a287510-67d9-40e2-9a6e-d8f247b8b005', type='ExpressionEvaluator', name='Offset Prep', datasource_id=None, sql=None, depends_on=['74e125a8-76fb-49e6-8825-c1d0ee121641'], parent_actions=[DomoDataflow_Action(id='74e125a8-76fb-49e6-8825-c1d0ee121641', type='LoadFromVault', name='Time Zone Test', datasource_id='3929c2cd-6549-4f53-9539-0f3e34233ef0', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='65e20743-2ca9-4bd7-ac1d-7b4a27ee9c5c', type='ExpressionEvaluator', name='Time Conversions 1', datasource_id=None, sql=None, depends_on=['be94da12-290e-41bc-a8f2-a076348a9b1a'], parent_actions=[DomoDataflow_Action(id='be94da12-290e-41bc-a8f2-a076348a9b1a', type='DateCalculator', name='Date Operations', datasource_id=None, sql=None, depends_on=['7a287510-67d9-40e2-9a6e-d8f247b8b005'], parent_actions=[DomoDataflow_Action(id='7a287510-67d9-40e2-9a6e-d8f247b8b005', type='ExpressionEvaluator', name='Offset Prep', datasource_id=None, sql=None, depends_on=['74e125a8-76fb-49e6-8825-c1d0ee121641'], parent_actions=[DomoDataflow_Action(id='74e125a8-76fb-49e6-8825-c1d0ee121641', type='LoadFromVault', name='Time Zone Test', datasource_id='3929c2cd-6549-4f53-9539-0f3e34233ef0', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='3e7dd3a3-9f6a-4a66-a709-4e9f2172bb36', type='PublishToVault', name='Time Zone Test | Output', datasource_id='df5f6051-6842-460a-995b-ffcd9721b361', sql=None, depends_on=['65e20743-2ca9-4bd7-ac1d-7b4a27ee9c5c'], parent_actions=[DomoDataflow_Action(id='65e20743-2ca9-4bd7-ac1d-7b4a27ee9c5c', type='ExpressionEvaluator', name='Time Conversions 1', datasource_id=None, sql=None, depends_on=['be94da12-290e-41bc-a8f2-a076348a9b1a'], parent_actions=[DomoDataflow_Action(id='be94da12-290e-41bc-a8f2-a076348a9b1a', type='DateCalculator', name='Date Operations', datasource_id=None, sql=None, depends_on=['7a287510-67d9-40e2-9a6e-d8f247b8b005'], parent_actions=[DomoDataflow_Action(id='7a287510-67d9-40e2-9a6e-d8f247b8b005', type='ExpressionEvaluator', name='Offset Prep', datasource_id=None, sql=None, depends_on=['74e125a8-76fb-49e6-8825-c1d0ee121641'], parent_actions=[DomoDataflow_Action(id='74e125a8-76fb-49e6-8825-c1d0ee121641', type='LoadFromVault', name='Time Zone Test', datasource_id='3929c2cd-6549-4f53-9539-0f3e34233ef0', sql=None, depends_on=None, parent_actions=None)])])])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None)),\n DomoDataset(id='3929c2cd-6549-4f53-9539-0f3e34233ef0', display_type='webform', data_provider_type='webform', name='Time Zone Test', description=None, row_count=8, column_count=3, stream_id=832, owner={'id': '1345408759', 'name': 'Alexis Lorenz (DataMaven)', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f6fbc68f370&gt;)]\n\n\n\n# async def _get_entity_ls_lineage(self,\n#                                  domo_entity: dmdc.DomoEntity,\n#                                  full_auth=None,\n#                                  session: dmda.DomoFullAuth = None,\n#                                  debug: bool = False, debug_prn: bool = False):\n#     full_auth = full_auth or self.full_auth\n\n#     entity_attribute = f\"{domo_entity.name.lower()}_id_ls\"\n\n#     return await asyncio.gather(*[self.get_entity_lineage_upstream(full_auth=full_auth,\n#                                                                    entity_id=entity_id,\n#                                                                    entity_type=domo_entity.value,\n#                                                                    session=session,\n#                                                                    debug=debug, debug_prn=debug_prn)\n#                                   for entity_id in getattr(self, entity_attribute)])\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npublication_id = \"701eb547-4244-43f6-bcda-003ed2c483c7\"\n\ndomo_publication = await dmpb.DomoPublication.get_from_id(\n    publication_id=publication_id, auth=token_auth\n)\n\ndomo_lineage = DomoLineage(auth=token_auth, parent=domo_publication)\n\nawait domo_lineage.get()\n\n# domo_lineage\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\nimport nbdev\n\nnbdev.nbdev_export()",
    "crumbs": [
      "Blog",
      "Classes",
      "Lineage"
    ]
  },
  {
    "objectID": "classes/domoinstanceconfig_userattributes.html",
    "href": "classes/domoinstanceconfig_userattributes.html",
    "title": "Instance Configuration User Attributes",
    "section": "",
    "text": "source\n\nUserAttribute\n\n UserAttribute (auth:domolibrary.client.DomoAuth.DomoAuth, id:str,\n                name:str, description:str, issuer_type:domolibrary.routes.\n                user_attributes.UserAttributes_IssuerType,\n                customer_id:str, value_type:str, validator:str,\n                validator_configuration:None, security_voter:str,\n                custom:bool)\n\nutility class that absorbs many of the domo instance configuration methods\n\n\nsource\n\nUserAttribute.get_by_id\n\n UserAttribute.get_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                          attribute_id:str,\n                          session:httpx.AsyncClient=None,\n                          debug_api:bool=False,\n                          debug_num_stacks_to_drop=2,\n                          return_raw:bool=False)\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait UserAttribute.get_by_id(\n    attribute_id=\"DomoLibraryTestFranchise\", auth=token_auth, debug_api=False\n)\n\nUserAttribute(id='DomoLibraryTestFranchise', name='franchise_id', description='test', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True)\n\n\n\n\nsource\n\nUserAttribute.update\n\n UserAttribute.update (name=None, description=None, issuer_type:domolibrar\n                       y.routes.user_attributes.UserAttributes_IssuerType=\n                       None, data_type:str=None, security_voter=None,\n                       session:httpx.AsyncClient=None,\n                       debug_api:bool=False, debug_num_stacks_to_drop=2)\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\ntry:\n    domo_user_attribute = await UserAttribute.get_by_id(\n        auth=token_auth, attribute_id=\"TestLibraryStore\"\n    )\n\n    res = await domo_user_attribute.update(\n        description=f\"domo_library test:  updated from classmethod, {dt.datetime.now().strftime('%Y-%m-%d - %H:%M')}\"\n    )\n    print(res)\n\nexcept (UserAttributes_GET_Error, UserAttributes_CRUD_Error) as e:\n    print(e)\n\n🛑  UserAttributes_GET_Error 🛑 - function: UserAttribute.get_user_attributes || status 200 || attribute TestLibraryStore not found at domo-community\n\n\n\nsource\n\n\nUserAttributes\n\n UserAttributes (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 attributes:List[__main__.UserAttribute]=None)\n\n\n\nsource\n\nUserAttributes.get_attributes\n\n UserAttributes.get_attributes (issuer_type_ls:List[domolibrary.routes.use\n                                r_attributes.UserAttributes_IssuerType]=No\n                                ne, session:httpx.AsyncClient=None,\n                                debug_api:bool=False,\n                                debug_num_stacks_to_drop=2)\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user_attributes = UserAttributes(auth=token_auth)\n\nawait domo_user_attributes.get_attributes(debug_api=False)\n\n[UserAttribute(id='DomoLibraryStore', name='store_id', description='store ids', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True),\n UserAttribute(id='DomoLibraryTestFranchise', name='franchise_id', description='test', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True),\n UserAttribute(id='domo.policy.managed_email_address', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False),\n UserAttribute(id='domo.policy.managed_employee_id', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False),\n UserAttribute(id='domo.policy.managed_employee_number', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False),\n UserAttribute(id='domo.policy.managed_hire_date', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False),\n UserAttribute(id='domo.policy.managed_user_department', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False),\n UserAttribute(id='domo.policy.managed_user_title', name=None, description=None, issuer_type=&lt;UserAttributes_IssuerType.SYSTEM: 'domo-defined'&gt;, customer_id=None, value_type=None, validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=False)]\n\n\n\n\nsource\n\nUserAttributes.create\n\n UserAttributes.create (attribute_id:str, name=None, description='updated\n                        via domolibrary 2024-03-23 - 20:06',\n                        data_type:str='ANY_VALUE',\n                        security_voter='FULL_VIS_ADMIN_IDP', issuer_type:d\n                        omolibrary.routes.user_attributes.UserAttributes_I\n                        ssuerType=&lt;UserAttributes_IssuerType.CUSTOM:\n                        'customer-defined'&gt;,\n                        session:httpx.AsyncClient=None,\n                        debug_api:bool=False, debug_num_stacks_to_drop=2,\n                        return_raw:bool=False)\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user_attributes = UserAttributes(auth=token_auth)\ntry:\n    res = await domo_user_attributes.create(\n        attribute_id=\"Test Library Store\", name=\"test library store\"\n    )\n    print(res)\n\nexcept UserAttributes_CRUD_Error as e:\n    print(e)\n\nUserAttribute(id='TestLibraryStore', name='test library store', description='updated via domolibrary 2024-01-03 - 04:50', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True)\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user_attributes = UserAttributes(auth=token_auth)\n\nawait domo_user_attributes.upsert(\n    attribute_id=\"TestLibraryStore\",\n    description=f\"domo_libary upsert test {dt.datetime.now().strftime('%Y-%m-%d - %H:%M')}\",\n    debug_prn=True,\n    debug_api=True,\n)\n\ncreating TestLibraryStore in domo-community\n🐛 debugging get_data\n{'body': {'description': 'domo_libary upsert test 2024-01-03 - 04:51',\n          'key': 'TestLibraryStore',\n          'keyspace': 'customer-defined',\n          'securityVoter': 'FULL_VIS_ADMIN_IDP',\n          'title': 'TestLibraryStore',\n          'validator': 'ANY_VALUE'},\n 'function_name': 'create',\n 'headers': {'Connection': 'keep-alive',\n             'Content-Type': 'application/json',\n             'accept': 'application/json, text/plain',\n             'x-domo-developer-token': '83ece44f1451d4b581e1191f98cd411164f0b5b6ad2755b3'},\n 'method': 'POST',\n 'params': None,\n 'parent_class': 'UserAttributes',\n 'url': 'https://domo-community.domo.com/api/user/v1/properties/meta/keys/TestLibraryStore'}\nget_data: sending json\nget_data_response &lt;Response [200 OK]&gt;\n\n\nUserAttribute(id='TestLibraryStore', name='TestLibraryStore', description='domo_libary upsert test 2024-01-03 - 04:51', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True)\n\n\n\n\nsource\n\nUserAttributes.delete\n\n UserAttributes.delete (attribute_id:str, session:httpx.AsyncClient=None,\n                        debug_api:bool=False, debug_num_stacks_to_drop=2,\n                        return_raw:bool=False)\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user_attributes = UserAttributes(auth=token_auth)\n\nawait domo_user_attributes.delete(\n    attribute_id=\"TestLibraryStore\",\n)\n\nResponseGetData(status=200, response='deleted TestLibraryStore', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "Instance Configuration User Attributes"
    ]
  },
  {
    "objectID": "classes/domopage.html",
    "href": "classes/domopage.html",
    "title": "Page",
    "section": "",
    "text": "source\n\n\n\n DomoPage (id:int, title:str=None, top_page_id:int=None,\n           parent_page_id:int=None,\n           auth:domolibrary.client.DomoAuth.DomoAuth=None,\n           is_locked:bool=None, collections:list=&lt;factory&gt;,\n           owners:list=&lt;factory&gt;, cards:list=&lt;factory&gt;,\n           custom_attributes:dict=&lt;factory&gt;, layout:domolibrary.classes.Do\n           moPage_Content.PageLayout=&lt;factory&gt;)",
    "crumbs": [
      "Blog",
      "Classes",
      "Page"
    ]
  },
  {
    "objectID": "classes/domopage.html#get_by_id",
    "href": "classes/domopage.html#get_by_id",
    "title": "Page",
    "section": "get_by_id",
    "text": "get_by_id\n\nsource\n\nDomoPage.get_by_id\n\n DomoPage.get_by_id (page_id:str,\n                     auth:domolibrary.client.DomoAuth.DomoAuth,\n                     return_raw:bool=False, debug_api:bool=False,\n                     include_layout:bool=False,\n                     include_recursive_children:bool=True,\n                     include_recursive_parents:bool=False)\n\n\nsample implementations of get_by_id\nretrieve page without get_children_recursion\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 109096720\n\nawait DomoPage.get_by_id(\n    page_id=page_id,\n    auth=token_auth,\n    return_raw=False,\n    include_layout=True,\n    include_recursive_children=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout=PageLayout(id=391912007, page_id='109096720', is_print_friendly=True, is_enabled=True, is_dynamic=False, has_page_breaks=False, content=[PageLayoutContent(accept_date_filter=True, accept_filters=True, accept_segments=True, card_id=721561037, card_urn='721561037', compact_interaction_default=True, content_key=0, fit_to_frame=False, has_summary=False, hide_border=False, hide_description=True, hide_footer=True, hide_margins=False, hide_summary=False, hide_timeframe=False, hide_title=True, hide_wrench=True, id=1411, summary_number_only=False, type='CARD', text=None, background_id=None, background=None), PageLayoutContent(accept_date_filter=True, accept_filters=True, accept_segments=True, card_id=1133480621, card_urn='1133480621', compact_interaction_default=True, content_key=2, fit_to_frame=False, has_summary=False, hide_border=False, hide_description=True, hide_footer=True, hide_margins=False, hide_summary=False, hide_timeframe=False, hide_title=True, hide_wrench=False, id=1412, summary_number_only=False, type='CARD', text=None, background_id=None, background=None), PageLayoutContent(accept_date_filter=True, accept_filters=True, accept_segments=True, card_id=1786467530, card_urn='1786467530', compact_interaction_default=True, content_key=4, fit_to_frame=False, has_summary=True, hide_border=False, hide_description=True, hide_footer=True, hide_margins=False, hide_summary=False, hide_timeframe=False, hide_title=False, hide_wrench=False, id=1413, summary_number_only=False, type='CARD', text=None, background_id=None, background=None), PageLayoutContent(accept_date_filter=True, accept_filters=True, accept_segments=True, card_id=1879752213, card_urn='1879752213', compact_interaction_default=True, content_key=10, fit_to_frame=False, has_summary=False, hide_border=False, hide_description=True, hide_footer=True, hide_margins=False, hide_summary=False, hide_timeframe=False, hide_title=True, hide_wrench=True, id=1414, summary_number_only=False, type='CARD', text=None, background_id=None, background=None)], standard=PageLayoutStandard(aspect_ratio=1.67, width=60, frame_margin=None, frame_padding=None, type='STANDARD', template=[PageLayoutTemplate(content_key=0, x=0, y=0, width=44, height=26, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=10, x=44, y=0, width=16, height=26, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=4, x=0, y=26, width=18, height=26, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=2, x=18, y=26, width=42, height=26, type='CARD', virtual=False, virtual_appendix=False)]), compact=PageLayoutCompact(aspect_ratio=1.0, width=12, frame_margin=None, frame_padding=None, type='COMPACT', template=[PageLayoutTemplate(content_key=0, x=0, y=0, width=12, height=6, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=10, x=0, y=6, width=12, height=6, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=4, x=0, y=12, width=12, height=6, type='CARD', virtual=False, virtual_appendix=False), PageLayoutTemplate(content_key=2, x=0, y=18, width=12, height=6, type='CARD', virtual=False, virtual_appendix=False)]), background=None))\n\n\n\nwith parent_page and top_page\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 717329130\n\ndomo_page = await DomoPage.get_by_id(\n    page_id=page_id,\n    auth=token_auth,\n    return_raw=False,\n    include_layout=True,\n    include_recursive_parents=True,\n    include_recursive_children=False,\n)\n\nprint(domo_page.custom_attributes[\"top_page\"])\nprint(domo_page.custom_attributes[\"parent_page\"])\ndomo_page.custom_attributes.get(\"parent_hierarchy\", None)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})\nDomoPage(id=531423275, title='Domo APIs', top_page_id=109096720, parent_page_id=109096720, is_locked=None, collections=[], owners=[DomoUser(id='1158827447', display_name='Ken Boyer', email_address='ken.boyer@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'top_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'parent_hierarchy': [{'hierarchy': 0, 'path': 'Domo APIs', 'page': ...}, {'hierarchy': 1, 'path': 'Domo APIs &gt; Domo IDEA Exchange', 'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]}, layout={})\n\n\n[{'hierarchy': 0,\n  'path': 'CLI',\n  'page': DomoPage(id=717329130, title='CLI', top_page_id=109096720, parent_page_id=531423275, is_locked=None, collections=[], owners=[DomoUser(id='1158827447', display_name='Ken Boyer', email_address='ken.boyer@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': DomoPage(id=531423275, title='Domo APIs', top_page_id=109096720, parent_page_id=109096720, is_locked=None, collections=[], owners=[DomoUser(id='1158827447', display_name='Ken Boyer', email_address='ken.boyer@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'top_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'parent_hierarchy': [{'hierarchy': 0, 'path': 'Domo APIs', 'page': ...}, {'hierarchy': 1, 'path': 'Domo APIs &gt; Domo IDEA Exchange', 'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]}, layout={}), 'top_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'parent_hierarchy': [{'hierarchy': 0, 'path': 'CLI', 'page': ...}, {'hierarchy': 1, 'path': 'CLI &gt; Domo APIs', 'page': DomoPage(id=531423275, title='Domo APIs', top_page_id=109096720, parent_page_id=109096720, is_locked=None, collections=[], owners=[DomoUser(id='1158827447', display_name='Ken Boyer', email_address='ken.boyer@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'top_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'parent_hierarchy': [{'hierarchy': 0, 'path': 'Domo APIs', 'page': ...}, {'hierarchy': 1, 'path': 'Domo APIs &gt; Domo IDEA Exchange', 'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]}, layout={})}, {'hierarchy': 2, 'path': 'CLI &gt; Domo APIs &gt; Domo IDEA Exchange', 'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]}, layout={})},\n {'hierarchy': 1,\n  'path': 'CLI &gt; Domo APIs',\n  'page': DomoPage(id=531423275, title='Domo APIs', top_page_id=109096720, parent_page_id=109096720, is_locked=None, collections=[], owners=[DomoUser(id='1158827447', display_name='Ken Boyer', email_address='ken.boyer@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'top_page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={}), 'parent_hierarchy': [{'hierarchy': 0, 'path': 'Domo APIs', 'page': ...}, {'hierarchy': 1, 'path': 'Domo APIs &gt; Domo IDEA Exchange', 'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]}, layout={})},\n {'hierarchy': 2,\n  'path': 'CLI &gt; Domo APIs &gt; Domo IDEA Exchange',\n  'page': DomoPage(id=109096720, title='Domo IDEA Exchange', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={'parent_page': None, 'top_page': None}, layout={})}]\n\n\nwith get_children_recursion\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 109096720\n\ndomo_page = await DomoPage.get_by_id(\n    page_id=page_id,\n    auth=token_auth,\n    return_raw=False,\n    include_recursive_children=True,\n    include_recursive_parents=False,\n)\n\n[\n    f\"{fc['hierarchy']} - {fc['path']} : {fc['page'].title}\"\n    for fc in domo_page.flat_children\n]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n['0 - Domo IDEA Exchange : Domo IDEA Exchange',\n '1 - Domo IDEA Exchange &gt; Beast Modes : Beast Modes',\n '1 - Domo IDEA Exchange &gt; Crypto Use-Case : Crypto Use-Case',\n '1 - Domo IDEA Exchange &gt; Custom Apps : Custom Apps',\n '1 - Domo IDEA Exchange &gt; Data Stories : Data Stories',\n '1 - Domo IDEA Exchange &gt; Domo APIs : Domo APIs',\n '2 - Domo IDEA Exchange &gt; Domo APIs &gt; CLI : CLI',\n '2 - Domo IDEA Exchange &gt; Domo APIs &gt; Developer Portal : Developer Portal',\n '2 - Domo IDEA Exchange &gt; Domo APIs &gt; SDKs : SDKs',\n '1 - Domo IDEA Exchange &gt; Forecasting / Inline Editor App : Forecasting / Inline Editor App',\n '1 - Domo IDEA Exchange &gt; Text Analytics : Text Analytics']\n\n\n\nsource\n\n\n\n\nPage_NoAccess\n\n Page_NoAccess (page_id, page_title, domo_instance, function_name,\n                parent_class)\n\nbase exception\n\nsource\n\n\nDomoPage.test_page_access\n\n DomoPage.test_page_access (suppress_no_access_error:bool=False,\n                            debug_api:bool=False, return_raw:bool=False)\n\nthrows an error if user doesn’t have access to the page API returns the owners of the page\n\nsample implementation of test_page_access\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\ndomo_page = await DomoPage.get_by_id(page_id=page_id, auth=token_auth)\n\nres = await domo_page.test_page_access(suppress_no_access_error=True)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'pageId': 1761849366,\n 'pageName': 'delete me',\n 'owners': [{'id': 592838897,\n   'type': 'GROUP',\n   'displayName': 'Test Group ABC'}],\n 'pageAccess': True}\n\n\n\nsource\n\n\n\nDomoPage.get_accesslist\n\n DomoPage.get_accesslist (auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                          return_raw:bool=False, debug_api:bool=False)\n\n\nsample get_accesslist\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\ndomo_page = DomoPage(id=page_id, auth=token_auth)\n\nres = await domo_page.get_accesslist(return_raw=False, debug_api=False)\n\n\n# res.response['groups']\n# res['domo_users']\n\nres\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'explicit_shared_user_count': 1,\n 'total_user_count': 3,\n 'domo_users': [DomoUser(id='55874022', display_name='Grant Smith', email_address='grantsmith@gmail.com', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={'is_explicit_share': False, 'group_membership': [DomoGroup(id=1307490673, name='Test Group a', type='open', description=None, custom_attributes={'is_owner': False})], 'is_owner': False}, role=None),\n  DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={'is_explicit_share': False, 'group_membership': [DomoGroup(id=592838897, name='Test Group ABC', type='open', description='in use - do not alte', custom_attributes={'is_owner': True})], 'is_owner': True}, role=None),\n  DomoUser(id='1906627316', display_name='test_participant', email_address='test_participant@domo.com', role_id=4, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={'is_explicit_share': True, 'group_membership': [], 'is_owner': False}, role=None)],\n 'domo_groups': [DomoGroup(id=592838897, name='Test Group ABC', type='open', description='in use - do not alte', custom_attributes={'is_owner': True}),\n  DomoGroup(id=1307490673, name='Test Group a', type='open', description=None, custom_attributes={'is_owner': False})]}\n\n\n\n\nsample share_page\n\n# import domolibrary.classes.DomoGroup as dmg\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_group = await dmg.DomoGroup.get_by_id(group_id=1324037627, auth=token_auth)\n\ndomo_page = DomoPage(id=30507758, auth=token_auth)\n\nawait domo_page.share(\n    auth=token_auth,\n    domo_groups=[domo_group],\n    message=None,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='page 30507758 successfully shared with 1324037627', is_success=True, parent_class=None)\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await DomoPage.get_cards(page_id=30507758, auth=token_auth)\n\nres[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoCard(id=2004118217, title=\"Bryan Van Kampen's Notebook May 8, 2020\", description=None, type='Text', urn='2004118217', chart_type=None, dataset_id=None, certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title='Executive Analytics', avatar_key='09/6CF6C801EEF440968C88ECC9824D66', phone_number='6304647034', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1986891634, title='Data Team Request Form', description=None, type='domoapp', urn='1986891634', chart_type='domoapp', dataset_id='08541d79-2ae2-4e9d-86b4-a1f8ce8edccc', certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoGroup(id=1814479647, name='Admin Test', type='closed', description='', custom_attributes={}), DomoUser(id='68216396', display_name='Elliott Leonard', email_address='egleonard88@gmail.com', role_id=1, department='Owner', title=None, avatar_key='77cad494-6551-47e1-82eb-9e7d840d3a2d', phone_number='9702198956', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1642792973, title='Navbar with Track Events', description=None, type='domoapp', urn='1642792973', chart_type='domoapp', dataset_id='0baed823-d4d1-48cf-93bf-b5d75b0a5e47', certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoUser(id='68216396', display_name='Elliott Leonard', email_address='egleonard88@gmail.com', role_id=1, department='Owner', title=None, avatar_key='77cad494-6551-47e1-82eb-9e7d840d3a2d', phone_number='9702198956', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=372273206, title=\"Bryan Van Kampen's Notebook May 8, 2020\", description=None, type='Text', urn='372273206', chart_type=None, dataset_id=None, certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title='Executive Analytics', avatar_key='09/6CF6C801EEF440968C88ECC9824D66', phone_number='6304647034', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1519617053, title=\"Bryan Van Kampen's Notebook Oct 27, 2023\", description=None, type='Text', urn='1519617053', chart_type=None, dataset_id=None, certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title='Executive Analytics', avatar_key='09/6CF6C801EEF440968C88ECC9824D66', phone_number='6304647034', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))])]\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await DomoPage.get_datasets(page_id=30507758, auth=token_auth)\n\nres[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataset(id='bcfb536a-f4d8-4d1b-8d68-c6b2bf116ae8', display_type='webform', data_provider_type='webform', name='Budget 2022', description=None, row_count=12, column_count=2, stream_id=858, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f97e48b4190&gt;),\n DomoDataset(id='8a721f95-d78b-4f8d-be8b-e06e913c4a5a', display_type='webform', data_provider_type='webform', name='Profit 2022', description=None, row_count=13, column_count=2, stream_id=860, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f97e48f7760&gt;),\n DomoDataset(id='586d93d4-a31c-4457-8cb1-5d5417d63398', display_type='domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600', data_provider_type='domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600', name='Domo Governance - Users', description='', row_count=932, column_count=11, stream_id=900, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f97e48f5f60&gt;),\n DomoDataset(id='f8a99562-795f-46f4-8b2b-1e22754256e0', display_type='dataset-view', data_provider_type='dataset-view', name='Page Views - Last 30 Days', description='Excludes current day', row_count=1590, column_count=20, stream_id=903, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f97e48f4f10&gt;),\n DomoDataset(id='08541d79-2ae2-4e9d-86b4-a1f8ce8edccc', display_type='webform', data_provider_type='webform', name='Store Example Data', description=None, row_count=19378, column_count=5, stream_id=872, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f97e48f43a0&gt;)]\n\n\n\n\nSample update page layout by background color\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\ndomo_page = await DomoPage.get_by_id(\n    page_id=page_id, auth=token_auth, return_raw=False, include_layout=True\n)\n\nbody = domo_page.layout.get_body()\n\nif not hasattr(body, \"background\"):\n    new_background_body = dmpg_c.PageLayout.generate_new_background_body()\n    body[\"background\"] = new_background_body\n\nbody[\"background\"][\"selectedColor\"] = \"#FF0000\"\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nawait DomoPage.update_layout(auth=auth, body=body, layout_id=domo_page.layout.id)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nTrue\n\n\nSample implementation of add_page_owner\n\n#eval : false\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = \"1755881138\"\nuser_id = \"1893952720\"\nawait DomoPage.add_page_owner(\n    page_id_ls=[page_id], auth=token_auth, group_id_ls=[], user_id_ls=[user_id]\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "Page"
    ]
  },
  {
    "objectID": "classes/domopublish.html",
    "href": "classes/domopublish.html",
    "title": "Publish",
    "section": "",
    "text": "Publish\n\nsource\n\nDomoPublication_Subscription\n\n DomoPublication_Subscription (subscription_id:str, publication_id:str,\n                               domain:str, created_dt:Optional[datetime.da\n                               tetime]=None)\n\n\nsource\n\n\nDomoPublication_Content\n\n DomoPublication_Content (content_id:str, entity_type:str, entity_id:str,\n                          entity_domain:str, is_v2:bool,\n                          is_direct_content:bool)\n\n\nsource\n\n\nDomoPublication_UnexpectedContentType\n\n DomoPublication_UnexpectedContentType (publication_id, content_type,\n                                        domo_instance)\n\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nDomoPublication\n\n DomoPublication (id:str, name:str, description:str, is_v2:bool,\n                  created_dt:datetime.datetime,\n                  auth:domolibrary.client.DomoAuth.DomoAuth=None, subscrip\n                  tion_authorizations:List[__main__.DomoPublication_Subscr\n                  iption]=&lt;factory&gt;, content:List[__main__.DomoPublication\n                  _Content]=&lt;factory&gt;,\n                  content_page_id_ls:List[str]=&lt;factory&gt;,\n                  content_dataset_id_ls:List[str]=&lt;factory&gt;, lineage:domol\n                  ibrary.classes.DomoLineage.DomoLineage=None)\n\n\nsource\n\n\nDomoPublication.get_from_id\n\n DomoPublication.get_from_id (publication_id=None,\n                              auth:domolibrary.client.DomoAuth.DomoAuth=No\n                              ne, timeout=10)\n\n\nsample implementation of get_from_id\n\npublication_id = \"701eb547-4244-43f6-bcda-003ed2c483c7\"\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_publication = await DomoPublication.get_from_id(\n    publication_id=publication_id, auth=token_auth\n)\n\nfrom pprint import pprint\n\npprint(domo_publication)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoPublication(id='701eb547-4244-43f6-bcda-003ed2c483c7', name='test_publish', description='', is_v2=True, created_dt=datetime.datetime(2023, 4, 27, 7, 36, 20, 642000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='447bf630-7113-4323-bf67-773dcc450a3a', publication_id='701eb547-4244-43f6-bcda-003ed2c483c7', domain='test.domo.com', created_dt=datetime.datetime(2023, 4, 27, 7, 36, 20, 642000))], content=[DomoPublication_Content(content_id='cb257f38-6d6b-46b7-92c5-aee90fde7b66', entity_type='PAGE', entity_id='1880852133', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='06c56df0-c58b-4afd-ab3f-41de5089273a', entity_type='DATASET', entity_id='ea859b06-5dbe-4c31-be76-de921447d550', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='40d4d296-af58-42e9-98a1-131d3b9c1c97', entity_type='DATASET', entity_id='cf149711-df55-4dc3-a159-59a26d066baa', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='a600cd85-3820-47ab-b66f-6ad682d139fb', entity_type='DATASET', entity_id='ee24d234-303e-46aa-b062-9905dc0d8622', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='f80ef8c8-a133-439c-b459-7967ce7df4b3', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=['1880852133'], content_dataset_id_ls=['ea859b06-5dbe-4c31-be76-de921447d550', 'cf149711-df55-4dc3-a159-59a26d066baa', 'ee24d234-303e-46aa-b062-9905dc0d8622', 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[]))\n\n\n\n\n\n\nSubscription\n\n\nDomoPublications\n\nsource\n\nDomoPublications\n\n DomoPublications ()\n\n\nsample implementation of get_subscription_summaries\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoPublications.get_subscription_summaries(auth=token_auth, return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[]\n\n\n\nsource\n\n\n\nDomoPublications.search_publications\n\n DomoPublications.search_publications (auth=&lt;class\n                                       'domolibrary.client.DomoAuth.DomoAu\n                                       th'&gt;, search_term:str=None,\n                                       session:httpx.AsyncClient=None,\n                                       debug_api:bool=False,\n                                       return_raw:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n(await DomoPublications.search_publications(auth=token_auth, return_raw=False))[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoPublication(id='095426a1-2c35-468b-bb96-36c516382f19', name='Ellibot', description='', is_v2=True, created_dt=datetime.datetime(2023, 11, 10, 11, 5, 10, 961000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='173ee64d-4f68-4d40-b634-22b5332f4e45', publication_id='095426a1-2c35-468b-bb96-36c516382f19', domain='domo-community-ellibot.domo.com', created_dt=datetime.datetime(2023, 11, 10, 11, 5, 10, 961000))], content=[DomoPublication_Content(content_id='c61531b6-81ac-45ec-9a77-d41194406097', entity_type='DATASET', entity_id='f6210193-5322-4481-a1de-d07aed544050', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['f6210193-5322-4481-a1de-d07aed544050'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])),\n DomoPublication(id='99a4f772-f0e0-47a6-873a-5870d03b9134', name='Landing Page QA', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 15, 15, 14, 23, 791000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='e0788b4e-5973-4c48-8a56-433dfb280496', publication_id='99a4f772-f0e0-47a6-873a-5870d03b9134', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 15, 15, 14, 23, 791000))], content=[DomoPublication_Content(content_id='b10b76dd-17f6-4459-9279-d1764035fad8', entity_type='DATASET', entity_id='51260f1d-b146-4dff-a1d8-68b7aa0b740b', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['51260f1d-b146-4dff-a1d8-68b7aa0b740b'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])),\n DomoPublication(id='e3295d79-4dbe-4994-8f8e-f105b178cc3b', name='Sandbox_PROD', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 15, 14, 54, 18, 747000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='7ff7ec45-4a5b-4f5b-ab82-c2d4e00527a1', publication_id='e3295d79-4dbe-4994-8f8e-f105b178cc3b', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 15, 14, 54, 18, 748000))], content=[DomoPublication_Content(content_id='d4414dfc-3d05-41ef-bb47-8b29b75bb6b8', entity_type='DATASET', entity_id='15543b0f-dfe7-4a91-b7db-a86b9e8fec82', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['15543b0f-dfe7-4a91-b7db-a86b9e8fec82'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])),\n DomoPublication(id='17ec9f81-906f-42f7-b70b-6a26e2db523f', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 6, 27, 12, 5, 0, 235000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='c3e2d03e-fd02-4bdc-a2c5-1daa0ae134c4', publication_id='17ec9f81-906f-42f7-b70b-6a26e2db523f', domain='test.domo.com', created_dt=datetime.datetime(2023, 6, 27, 12, 5, 0, 235000))], content=[DomoPublication_Content(content_id='72d3f072-cecc-4940-af69-e25a64170148', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[])),\n DomoPublication(id='5b4a61f0-4f65-4191-97ff-245702756a4a', name='Test OZ', description='', is_v2=True, created_dt=datetime.datetime(2023, 7, 7, 10, 44, 0, 2000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='5f0989bd-fc58-4590-bdf1-9d358ea9287a', publication_id='5b4a61f0-4f65-4191-97ff-245702756a4a', domain='test.domo.com', created_dt=datetime.datetime(2023, 7, 7, 10, 44, 0, 2000))], content=[DomoPublication_Content(content_id='ede617cc-65d1-419b-bd9d-1ea7205cde62', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=[], content_dataset_id_ls=['e17fd398-8abf-4cb5-8ed1-5394e274fbf4'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[]))]\n\n\n\nsource\n\n\nDomoPublication.convert_lineage_to_dataframe\n\n DomoPublication.convert_lineage_to_dataframe (return_raw:bool=False)\n\n\nsource\n\n\nDomoPublication.convert_content_to_dataframe\n\n DomoPublication.convert_content_to_dataframe (return_raw:bool=False)\n\n\nsource\n\n\nDomoPublication.create_publication\n\n DomoPublication.create_publication (name:str,\n                                     content_ls:List[__main__.DomoPublicat\n                                     ion_Content], subscription_ls:List[__\n                                     main__.DomoPublication_Subscription],\n                                     unique_id:str=None,\n                                     description:str=None, auth:domolibrar\n                                     y.client.DomoAuth.DomoAuth=None,\n                                     debug_api:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ncontent_ls = []\ncontent_item = DomoPublication_Content(\n    content_id=\"\",\n    entity_type=\"DATASET\",\n    entity_id=\"e17fd398-8abf-4cb5-8ed1-5394e274fbf4\",\n    entity_domain=\"domo-community.domo.com\",\n    is_v2=True,\n    is_direct_content=True,\n)\ncontent_ls.append(content_item)\n\nsub_ls = []\nsub_item = DomoPublication_Subscription(\n    subscription_id=\"\",\n    publication_id=\"\",\n    domain=\"test.domo.com\",\n    created_dt=dt.datetime.now(),\n)\nsub_ls.append(sub_item)\n\n# await DomoPublication.create_publication(auth = token_auth, name=\"Test OZ\",\n#                                  content_ls=content_ls,\n#                                  subscription_ls=sub_ls)\n\n\nsource\n\n\nDomoPublication.update_publication\n\n DomoPublication.update_publication (name:str,\n                                     content_ls:List[__main__.DomoPublicat\n                                     ion_Content], subscription_ls:List[__\n                                     main__.DomoPublication_Subscription],\n                                     publication_id:str,\n                                     description:str=None, auth:domolibrar\n                                     y.client.DomoAuth.DomoAuth=None,\n                                     debug_api:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\npublication_id = \"438731a1-7e4e-4863-967f-fcfad22c9247\"\ndomo_publication = await DomoPublication.get_from_id(\n    publication_id=publication_id, auth=token_auth\n)\n\nawait DomoPublication.update_publication(\n    auth=token_auth,\n    name=\"Test OZ - updated\",\n    publication_id=publication_id,\n    content_ls=domo_publication.content,\n    subscription_ls=domo_publication.subscription_authorizations,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nResponseGetData(status=202, response={'name': 'Test OZ - updated', 'description': '', 'domain': 'domo-community.domo.com', 'content': [{'id': '5b49b7a5-8bad-4531-845e-aea6a600248e', 'domain': 'domo-community.domo.com', 'customerId': 'domo-community.domo.com', 'userId': 'Fake User Id', 'domoObjectId': '384424178', 'type': 'PAGE', 'updated': 1711219382904, 'hash': '01d7c069-9912-4948-9b2f-4a1223d944f7'}, {'id': '23543278-a0e3-4f68-a9cc-15931d1d81f9', 'domain': 'domo-community.domo.com', 'customerId': 'domo-community.domo.com', 'userId': 'Fake User Id', 'domoObjectId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a', 'type': 'DATASET', 'updated': 1711219382904, 'hash': '73dfb293-73c9-4ea9-b8e3-755059f6c375'}, {'id': '92856ce0-4c33-41c1-bbd6-b89f94e42867', 'domain': 'domo-community.domo.com', 'customerId': 'domo-community.domo.com', 'userId': 'Fake User Id', 'domoObjectId': 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4', 'type': 'DATASET', 'updated': 1711219382904, 'hash': '84a0ed90-757b-4e42-aaaa-5e26e326ebdf'}, {'id': 'a7472c23-4083-4a4d-9f5c-d935cde1405f', 'domain': 'domo-community.domo.com', 'customerId': 'domo-community.domo.com', 'userId': 'Fake User Id', 'domoObjectId': '04c1574e-c8be-4721-9846-c6ffa491144b', 'type': 'DATASET', 'updated': 1711219382904, 'hash': '334bdfaf-077f-486a-9082-52d68b58c666'}], 'subscriberDomain': ['test.domo.com'], 'id': '438731a1-7e4e-4863-967f-fcfad22c9247', 'type': 'CONTENT', 'isPublic': False}, is_success=True, parent_class=None)\n\n\nDomoPublication(id='438731a1-7e4e-4863-967f-fcfad22c9247', name='Test OZ - updated', description='', is_v2=True, created_dt=datetime.datetime(2023, 5, 2, 15, 6, 24, 358000), subscription_authorizations=[DomoPublication_Subscription(subscription_id='a0272907-d34c-4c27-b716-f2386dfecd19', publication_id='438731a1-7e4e-4863-967f-fcfad22c9247', domain='test.domo.com', created_dt=datetime.datetime(2023, 5, 2, 15, 6, 24, 358000))], content=[DomoPublication_Content(content_id='16e1b47f-6677-41a3-9c80-894550fec649', entity_type='PAGE', entity_id='384424178', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='14d1a1e9-8673-4b3f-aa72-1d32a6041140', entity_type='DATASET', entity_id='4ef43af5-67e7-4b9e-bd58-c4e592aa289a', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='53ab2b71-7b4c-47c9-9d0f-5deb3c7974f8', entity_type='DATASET', entity_id='e17fd398-8abf-4cb5-8ed1-5394e274fbf4', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True), DomoPublication_Content(content_id='87579059-fb6a-4d35-99ab-8ff624472dfd', entity_type='DATASET', entity_id='04c1574e-c8be-4721-9846-c6ffa491144b', entity_domain='domo-community.domo.com', is_v2=True, is_direct_content=True)], content_page_id_ls=['384424178'], content_dataset_id_ls=['4ef43af5-67e7-4b9e-bd58-c4e592aa289a', 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4', '04c1574e-c8be-4721-9846-c6ffa491144b'], lineage=DomoLineage(page_id_ls=[], card_id_ls=[], dataflow_id_ls=[], dataset_id_ls=[], entity_ls=[]))\n\n\n\nsource\n\n\nDomoPublication.accept_invite_by_id\n\n DomoPublication.accept_invite_by_id\n                                      (auth:domolibrary.client.DomoAuth.Do\n                                      moAuth, subscription_id:str,\n                                      debug_api:bool=False)\n\n\nsource\n\n\nDomoPublication.get_subscription_invites_list\n\n DomoPublication.get_subscription_invites_list\n                                                (auth:domolibrary.client.D\n                                                omoAuth.DomoAuth,\n                                                debug_api:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoPublication.get_subscription_invites_list(auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[]",
    "crumbs": [
      "Blog",
      "Classes",
      "Publish"
    ]
  },
  {
    "objectID": "classes/domopage_content.html",
    "href": "classes/domopage_content.html",
    "title": "PageContent",
    "section": "",
    "text": "PageLayout",
    "crumbs": [
      "Blog",
      "Classes",
      "PageContent"
    ]
  },
  {
    "objectID": "classes/domopage_content.html#pagelayoutcompact",
    "href": "classes/domopage_content.html#pagelayoutcompact",
    "title": "PageContent",
    "section": "",
    "text": "PageLayout",
    "crumbs": [
      "Blog",
      "Classes",
      "PageContent"
    ]
  },
  {
    "objectID": "routes/activity_log.html",
    "href": "routes/activity_log.html",
    "title": "Activity Log Routes",
    "section": "",
    "text": "source\n\nget_activity_log_object_types\n\n get_activity_log_object_types (auth:domolibrary.client.DomoAuth.DomoAuth,\n                                parent_class:str=None,\n                                debug_num_stacks_to_drop=1,\n                                debug_api:bool=False,\n                                session:httpx.AsyncClient=None)\n\nretrieves a list of valid objectTypes that can be used to search the activity_log API\n\nsample implementation of get_activity_log_object_types\n\n# import pandas as pd\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n        domo_instance=\"domo-community\",\n    )\n\n    al_objecttype_res = await get_activity_log_object_types(auth=token_auth)\n\n    print(pd.DataFrame(al_objecttype_res.response))\n\n    # use to update `ActivityLog_ObjectType` enum\n    # [ f\"{objecttype.get('translation').upper().replace(' ', '_')} = '{objecttype.get('type')}'\" for objecttype in  al_objecttype_res.response]\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n                      type             translation\n0             ACCESS_TOKEN            Access token\n1                  ACCOUNT                 Account\n2             ACTIVITY_LOG            Activity log\n3                    ALERT                   Alert\n4                      APP                     App\n..                     ...                     ...\n85            VIRTUAL_USER            Virtual user\n86       WAREHOUSE_ACCOUNT       Warehouse account\n87       WORKFLOW_INSTANCE       Workflow Instance\n88          WORKFLOW_MODEL          Workflow Model\n89  WORKFLOW_MODEL_VERSION  Workflow Model Version\n\n[90 rows x 2 columns]\n\n\n\nsource\n\n\n\nsearch_activity_log\n\n search_activity_log (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      start_time:int, end_time:int, maximum:int,\n                      object_type:str=None, debug_api:bool=False,\n                      debug_loop:bool=False, parent_class:str=None,\n                      debug_num_stacks_to_drop:int=1,\n                      session:httpx.AsyncClient=None)\n\nloops over activity log api to retrieve audit logs\n\n# import pandas as pd\n# import datetime as dt\n\n# import domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\npage_res = await search_activity_log(\n    object_type=\"PAGE\",\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=16,\n    debug_loop=False,\n    debug_api=False,\n)\n\npd.DataFrame(page_res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nobjectId\nobjectName\n\n\n\n\n0\n-100000\nOverview\n\n\n1\n-100001\nAlerts\n\n\n2\n-100002\nShared\n\n\n3\n-100003\nFavorites\n\n\n4\n-100012\nCEO\n\n\n\n\n\n\n\n\n\nsample implementation of search_activity_log\n\n# import pandas as pd\n# import datetime as dt\n# import domolibrary.utils.convert as convert\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\nactivity_log_res = await search_activity_log(\n    object_type=\"ACTIVITY_LOG\",\n    start_time=convert.convert_datetime_to_epoch_millisecond(start_datetime),\n    end_time=convert.convert_datetime_to_epoch_millisecond(end_datetime),\n    auth=token_auth,\n    maximum=10,\n    debug_loop=False,\n    debug_api=False,\n)\n\npd.DataFrame(activity_log_res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nuserName\nuserId\nuserType\nactorName\nactorId\nactionType\nobjectName\nobjectId\nobjectType\nadditionalComment\ntime\neventText\nclientId\nauthenticationMethod\n\n\n\n\n0\nJae Wilson1\n1893952720\nUSER\n\n0\nEXECUTED\ntag_inactive_owners\n743c1c6f-80d5-4b47-b02e-0ea28f6a5683\nEXECUTOR_JOB\nJae Wilson1 executed Executor job tag_inactive...\n1711218047106\nExecuted Executor Job\nNone\nDEV_TOKEN\n\n\n1\nJae Wilson1\n1893952720\nUSER\n\n0\nDELETED\nDL_test\n186953\nACCESS_TOKEN\nJae Wilson1 deleted access token DL_test. 8:26...\n1711218000296\nAccess token deleted\nNone\nDEV_TOKEN\n\n\n2\nJae Wilson1\n1893952720\nUSER\n\n0\nCREATED\nDL_test\n186953\nACCESS_TOKEN\nJae Wilson1 created access token DL_test. 8:26...\n1711217999954\nAccess token created\nNone\nDEV_TOKEN\n\n\n3\nJae Wilson1\n1893952720\nUSER\n\n0\nDELETED\nDL_test\n186952\nACCESS_TOKEN\nJae Wilson1 deleted access token DL_test. 8:26...\n1711217964379\nAccess token deleted\nNone\nDEV_TOKEN\n\n\n4\nJae Wilson1\n1893952720\nUSER\n\n0\nCREATED\nDL_test\n186952\nACCESS_TOKEN\nJae Wilson1 created access token DL_test. 8:26...\n1711217964112\nAccess token created\nNone\nDEV_TOKEN",
    "crumbs": [
      "Blog",
      "Routes",
      "Activity Log Routes"
    ]
  },
  {
    "objectID": "routes/publish.html",
    "href": "routes/publish.html",
    "title": "Publish Routes",
    "section": "",
    "text": "Publications\n\nsource\n\nsearch_publications\n\n search_publications (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      search_term:str=None, limit=100, offset=0,\n                      session:httpx.AsyncClient=None,\n                      debug_api:bool=False)\n\n\n# import pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await search_publications(auth=token_auth)\n\npd.DataFrame(res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n\n\n\n\n\n\n\n\nid\nname\ndescription\ndataSets\ndataApps\ndataAppViews\npages\nembedPages\ncards\nsubscribers\n...\ninvalidDataAppViewSubscribers\ninvalidPageSubscribers\ninvalidCardSubscribers\nisV2\nhasDuplicate\nrefreshing\nexecutionType\nexecutionEstimatedCompletionTime\nexecutionStartTime\nexecutionEndTime\n\n\n\n\n0\n095426a1-2c35-468b-bb96-36c516382f19\nEllibot\n\n1\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\nTrue\nFalse\nFalse\nNEW_PUBLICATION\n1699639530737\n1699639510737\n1699639511580\n\n\n1\n99a4f772-f0e0-47a6-873a-5870d03b9134\nLanding Page QA\n\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\nTrue\nFalse\nFalse\nNEW_PUBLICATION\n1686863683474\n1686863663474\n1686863665990\n\n\n2\ne3295d79-4dbe-4994-8f8e-f105b178cc3b\nSandbox_PROD\n\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\nTrue\nFalse\nFalse\nNEW_PUBLICATION\n1686862478414\n1686862458414\n1686862460962\n\n\n3\n17ec9f81-906f-42f7-b70b-6a26e2db523f\nTest OZ\n\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\nTrue\nFalse\nFalse\nNEW_PUBLICATION\n1687889119944\n1687889099944\n1687889100595\n\n\n4\n5b4a61f0-4f65-4191-97ff-245702756a4a\nTest OZ\n\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\nTrue\nFalse\nFalse\nNEW_PUBLICATION\n1688748259797\n1688748239797\n1688748240363\n\n\n\n\n5 rows × 24 columns\n\n\n\n\n\nsource\n\n\nget_publication_by_id\n\n get_publication_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        publication_id:str,\n                        session:httpx.AsyncClient=None,\n                        debug_api:bool=False, timeout=10)\n\n\n# import pandas as pd\n\npublication_id = \"701eb547-4244-43f6-bcda-003ed2c483c7\"\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_publication_by_id(\n    publication_id=publication_id, auth=token_auth, timeout=10\n)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n{'id': '701eb547-4244-43f6-bcda-003ed2c483c7',\n 'name': 'test_publish',\n 'customerId': 'mmmm-0012-0200',\n 'created': 1682580980642,\n 'content': {'id': 'dc7b65dd-28fc-4fa6-b469-26873c668549',\n  'domain': 'domo-community.domo.com',\n  'customerId': 'mmmm-0012-0200',\n  'userId': '612085674',\n  'type': 'PACKAGE',\n  'updated': 1682580980642,\n  'hash': 'c67e00a5-bbe5-49a6-9639-414869282288',\n  'publicationId': '701eb547-4244-43f6-bcda-003ed2c483c7'},\n 'description': '',\n 'isV2': True,\n 'hasDuplicate': False,\n 'useDirectContent': True,\n 'type': 'CONTENT',\n 'isBackup': False,\n 'children': [{'id': 'cb257f38-6d6b-46b7-92c5-aee90fde7b66',\n   'customerId': '',\n   'created': 1711216738914,\n   'content': {'id': '891a25be-30b3-4b77-bbc4-18c4619417c4',\n    'domain': 'domo-community.domo.com',\n    'customerId': '',\n    'userId': '1893952720',\n    'domoObjectId': '1880852133',\n    'type': 'PAGE',\n    'updated': 1711216738914,\n    'hash': '8730c630-6596-4c8c-8de8-6deab6a007f9'},\n   'isV2': True,\n   'hasDuplicate': False,\n   'useDirectContent': True,\n   'type': 'CONTENT',\n   'isBackup': False,\n   'children': [],\n   'subscriptionAuthorizations': [],\n   'subscribers': [],\n   'isPublic': False},\n  {'id': '06c56df0-c58b-4afd-ab3f-41de5089273a',\n   'customerId': '',\n   'created': 1711216738914,\n   'content': {'id': '3ec590ae-641c-4a2d-b0af-632448479f03',\n    'domain': 'domo-community.domo.com',\n    'customerId': '',\n    'userId': '1893952720',\n    'domoObjectId': 'ea859b06-5dbe-4c31-be76-de921447d550',\n    'type': 'DATASET',\n    'updated': 1711216738914,\n    'hash': '9a6be2a1-3508-455b-a49f-ff763a0c6769'},\n   'isV2': True,\n   'hasDuplicate': False,\n   'useDirectContent': True,\n   'type': 'CONTENT',\n   'isBackup': False,\n   'children': [],\n   'subscriptionAuthorizations': [],\n   'subscribers': [],\n   'isPublic': False},\n  {'id': '40d4d296-af58-42e9-98a1-131d3b9c1c97',\n   'customerId': '',\n   'created': 1711216738914,\n   'content': {'id': '011bd6fc-4713-42cd-9ae3-fc92ab1352e3',\n    'domain': 'domo-community.domo.com',\n    'customerId': '',\n    'userId': '1893952720',\n    'domoObjectId': 'cf149711-df55-4dc3-a159-59a26d066baa',\n    'type': 'DATASET',\n    'updated': 1711216738914,\n    'hash': '1292a473-824c-4724-ae5c-ee2495a1d2cf'},\n   'isV2': True,\n   'hasDuplicate': False,\n   'useDirectContent': True,\n   'type': 'CONTENT',\n   'isBackup': False,\n   'children': [],\n   'subscriptionAuthorizations': [],\n   'subscribers': [],\n   'isPublic': False},\n  {'id': 'a600cd85-3820-47ab-b66f-6ad682d139fb',\n   'customerId': '',\n   'created': 1711216738914,\n   'content': {'id': 'a9305110-2330-4c07-a798-d5ede792e7d3',\n    'domain': 'domo-community.domo.com',\n    'customerId': '',\n    'userId': '1893952720',\n    'domoObjectId': 'ee24d234-303e-46aa-b062-9905dc0d8622',\n    'type': 'DATASET',\n    'updated': 1711216738914,\n    'hash': 'dc7a199b-86c2-4f85-aeec-3651b8889fdb'},\n   'isV2': True,\n   'hasDuplicate': False,\n   'useDirectContent': True,\n   'type': 'CONTENT',\n   'isBackup': False,\n   'children': [],\n   'subscriptionAuthorizations': [],\n   'subscribers': [],\n   'isPublic': False},\n  {'id': 'f80ef8c8-a133-439c-b459-7967ce7df4b3',\n   'customerId': '',\n   'created': 1711216738914,\n   'content': {'id': '7234b90b-09d9-48cb-876a-d8ed11fc6c2a',\n    'domain': 'domo-community.domo.com',\n    'customerId': '',\n    'userId': '612085674',\n    'domoObjectId': 'e17fd398-8abf-4cb5-8ed1-5394e274fbf4',\n    'type': 'DATASET',\n    'updated': 1711216738914,\n    'hash': '12cbf8f4-2aa0-49ee-8ec1-c691a5c77f96'},\n   'isV2': True,\n   'hasDuplicate': False,\n   'useDirectContent': True,\n   'type': 'CONTENT',\n   'isBackup': False,\n   'children': [],\n   'subscriptionAuthorizations': [],\n   'subscribers': [],\n   'isPublic': False}],\n 'subscriptionAuthorizations': [{'id': '447bf630-7113-4323-bf67-773dcc450a3a',\n   'domain': 'test.domo.com',\n   'created': 1682580980642,\n   'publicationId': '701eb547-4244-43f6-bcda-003ed2c483c7'}],\n 'subscribers': [],\n 'userId': 612085674,\n 'isPublic': False}\n\n\n\nsource\n\n\ngenerate_publish_body\n\n generate_publish_body (url:str, sub_domain_ls:List[str],\n                        content_ls:List[str], name:str, description:str,\n                        unique_id:str, is_new:bool)\n\n\npublication_id = \"701eb547-4244-43f6-bcda-003ed2c483c7\"\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\nbody = generate_publish_body(\n    \"domo-community.domo.com\", [\"test.domo.com\"], [\"content\"], \"test\", \"\", \"id\", True\n)\nbody\n\n{'id': 'id',\n 'name': 'test',\n 'description': '',\n 'domain': 'domo-community.domo.com',\n 'content': ['content'],\n 'subscriberDomain': ['test.domo.com'],\n 'new': 'true'}\n\n\n\nsource\n\n\ncreate_publish_job\n\n create_publish_job (auth:domolibrary.client.DomoAuth.DomoAuth, body:dict,\n                     session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\nsource\n\n\nudpate_publish_job\n\n udpate_publish_job (auth:domolibrary.client.DomoAuth.DomoAuth,\n                     publication_id:str, body:dict,\n                     session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\n\n\nSubscriptions\n\nsource\n\nget_subscription_summaries\n\n get_subscription_summaries (auth:domolibrary.client.DomoAuth.DomoAuth,\n                             session:httpx.AsyncClient=None,\n                             debug_api:bool=False)\n\nretrieves a summary of existing subscriptions\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_subscription_summaries(auth=token_auth)\n\npd.DataFrame(res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nget_subscription_invititations\n\n get_subscription_invititations\n                                 (auth:domolibrary.client.DomoAuth.DomoAut\n                                 h, session:httpx.AsyncClient=None,\n                                 debug_api:bool=False)\n\nretrieves a list of subscription invitations\n\nsample implementation of get_subscription_invitations\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_subscription_invititations(auth=token_auth)\n\npd.DataFrame(res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\n\naccept_invite_by_id\n\n accept_invite_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      subscription_id:str, session:httpx.AsyncClient=None,\n                      debug_api:bool=False)\n\nthis takes get_subscription_invites_list into account and accepts - not instant\n\nsource\n\n\naccept_invite_by_id_v2\n\n accept_invite_by_id_v2 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         publication_id:str, owner_id:str,\n                         session:httpx.AsyncClient=None,\n                         debug_api:bool=False)\n\nthis takes get_subscription_invites_list into account and accepts - not instant\n\nsource\n\n\nrefresh_publish_jobs\n\n refresh_publish_jobs (auth:domolibrary.client.DomoAuth.DomoAuth,\n                       publish_ids:list, session:httpx.AsyncClient=None,\n                       debug_api:bool=False)\n\nRefreshing list of publish jobs. Typically “instance” = publisher instance",
    "crumbs": [
      "Blog",
      "Routes",
      "Publish Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html",
    "href": "routes/instance_config.html",
    "title": "Instance Config Routes",
    "section": "",
    "text": "# pip install httpcore['asyncio']\n# hide\nimport os\nimport domolibrary.routes.bootstrap as bootstrap_routes",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#toggle-is-social-users-enabled",
    "href": "routes/instance_config.html#toggle-is-social-users-enabled",
    "title": "Instance Config Routes",
    "section": "Toggle is Social Users Enabled",
    "text": "Toggle is Social Users Enabled\n\nsource\n\nget_is_invite_social_users_enabled\n\n get_is_invite_social_users_enabled\n                                     (auth:domolibrary.client.DomoAuth.Dom\n                                     oAuth, customer_id:str,\n                                     session:httpx.AsyncClient=None,\n                                     debug_api:bool=False,\n                                     parent_class=None,\n                                     return_raw:bool=False,\n                                     debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nToggleSocialUsers_Error\n\n ToggleSocialUsers_Error (status, domo_instance, message='failure to\n                          toggle social users')\n\nbase exception\n\nsample implementation of get is invite social users enabled\n\n# import domolibrary.routes.bootstrap as bootstrap_routes\n# import domolibrary.client.DomoAuth as dmda\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbootstrap_info_res = await bootstrap_routes.get_bootstrap(\n    auth=full_auth, debug_api=False\n)\ncustomer_id = bootstrap_info_res.response[\"currentUser\"][\"USER_GROUP\"]\n\nawait get_is_invite_social_users_enabled(\n    auth=full_auth, customer_id=customer_id, debug_api=False\n)\n\nResponseGetData(status=200, response={'name': 'free-invite', 'is_enabled': True}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\ntoggle_is_social_users_enabled\n\n toggle_is_social_users_enabled (is_enabled:bool,\n                                 auth:domolibrary.client.DomoAuth.DomoAuth\n                                 , session:httpx.AsyncClient=None,\n                                 debug_api:bool=False,\n                                 return_raw:bool=False,\n                                 parent_class=False,\n                                 debug_num_stacks_to_drop=1)\n\nAdmin &gt; Features &gt; Buzz Toggles the ability for users to add social users to Domo when sharing content\n\nsample implementation of toggle_is_social_users_enabled\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait toggle_is_social_users_enabled(auth=auth, is_enabled=True, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'is_enabled': True, 'feature': 'free-invite'}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#toggle-user-invite-notification-youve-been-domoed",
    "href": "routes/instance_config.html#toggle-user-invite-notification-youve-been-domoed",
    "title": "Instance Config Routes",
    "section": "Toggle user invite notification (You’ve been Domoed’)",
    "text": "Toggle user invite notification (You’ve been Domoed’)\nAdmin &gt; Company Settings &gt; Notifications Handles toggling “you’ve been domo’ed email”\n\nsource\n\ntoggle_is_user_invite_enabled\n\n toggle_is_user_invite_enabled (auth:domolibrary.client.DomoAuth.DomoAuth,\n                                is_enabled:bool,\n                                session:httpx.AsyncClient=None,\n                                debug_api:bool=False,\n                                return_raw:bool=False, parent_class=None,\n                                debug_num_stacks_to_drop=1)\n\nAdmin &gt; Company Settings &gt; Notifications\n\nsource\n\n\nToggleUserInvite_Error\n\n ToggleUserInvite_Error (status, domo_instance, message='failure to toggle\n                         user invite enabled')\n\nbase exception\n\nSample implementation of toggle_is_user_invite_enabled\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait toggle_is_user_invite_enabled(auth=auth, is_enabled=True, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=204, response={'feature': 'user.invite.email.enabled', 'is_enabled': True}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nget_is_user_invite_notifications_enabled\n\n get_is_user_invite_notifications_enabled\n                                           (auth:domolibrary.client.DomoAu\n                                           th.DomoFullAuth,\n                                           session:httpx.AsyncClient=None,\n                                           debug_api:bool=False,\n                                           parent_class=None,\n                                           debug_num_stacks_to_drop=1,\n                                           return_raw:bool=False)\n\n\nsample implementation of get_is_user_invite_notifications_enabled\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_is_user_invite_notifications_enabled(\n    auth=auth, debug_api=False, return_raw=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'name': 'user.invite.email.enabled', 'is_enabled': True}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#crud-sso-configuration",
    "href": "routes/instance_config.html#crud-sso-configuration",
    "title": "Instance Config Routes",
    "section": "CRUD SSO Configuration",
    "text": "CRUD SSO Configuration\n\nsource\n\ngenerate_sso_body\n\n generate_sso_body (login_enabled:bool=None, idp_enabled:bool=None,\n                    import_groups:bool=None, require_invitation:bool=None,\n                    enforce_allowlist:bool=None, skip_to_idp:bool=None,\n                    auth_request_endpoint:str=None,\n                    token_endpoint:str=None, user_info_endpoint:str=None,\n                    public_key:str=None, redirect_url:str=None,\n                    certificate:str=None, override_sso:bool=None,\n                    override_embed:bool=None, well_known_config:str=None,\n                    assertion_endpoint:str=None,\n                    ingest_attributes:bool=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlogin_enabled\nbool\nNone\nFalse\n\n\nidp_enabled\nbool\nNone\nFalse\n\n\nimport_groups\nbool\nNone\nFalse\n\n\nrequire_invitation\nbool\nNone\nFalse\n\n\nenforce_allowlist\nbool\nNone\nFalse\n\n\nskip_to_idp\nbool\nNone\nFalse\n\n\nauth_request_endpoint\nstr\nNone\n\n\n\ntoken_endpoint\nstr\nNone\n\n\n\nuser_info_endpoint\nstr\nNone\n\n\n\npublic_key\nstr\nNone\n\n\n\nredirect_url\nstr\nNone\n\n\n\ncertificate\nstr\nNone\n\n\n\noverride_sso\nbool\nNone\nFalse\n\n\noverride_embed\nbool\nNone\nFalse\n\n\nwell_known_config\nstr\nNone\n“https://{domo_instance}}.domo.com/auth/oidc”\n\n\nassertion_endpoint\nstr\nNone\n\n\n\ningest_attributes\nbool\nNone\nFalse\n\n\n\n\nsource\n\n\nupdate_sso_config\n\n update_sso_config (auth:domolibrary.client.DomoAuth.DomoAuth,\n                    config_body:dict, session:httpx.AsyncClient=None,\n                    debug_api:bool=False, parent_class:str=None,\n                    debug_num_stacks_to_drop=1)\n\nto successfully update the SSO Configuration, you must send all the parameters related to SSO Configuration\n\nsource\n\n\nUpdateSSO_Error\n\n UpdateSSO_Error (domo_instance, config_body, function_name, status=None,\n                  parent_class=None)\n\nbase exception\n\nsample implementation of update_sso_config\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_sso_config(auth=auth)\n\nconfig_body = res.response\nconfig_body.update(generate_sso_body(require_invitation=False))\n\n# config_body = {'hello': 'failure'}\n\nawait update_sso_config(auth=auth, config_body=config_body, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#allowlist",
    "href": "routes/instance_config.html#allowlist",
    "title": "Instance Config Routes",
    "section": "Allowlist",
    "text": "Allowlist\n\nsource\n\nget_allowlist\n\n get_allowlist (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                session:httpx.AsyncClient=None, return_raw:bool=False,\n                debug_api:bool=False, parent_class=None,\n                debug_num_stacks_to_drop=1)\n\n\nsample implementation of get_allowlist with the wrong auth type\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    await get_allowlist(auth=auth)\nexcept dmda.InvalidAuthTypeError as e:\n    print(e)\n\n🛑  InvalidAuthTypeError 🛑 - function: get_allowlist || This API rquires DomoFullAuth at domo-community\n\n\n\n\nsample implementation of get_allowlist with the correct auth type\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nres = await get_allowlist(auth=auth)\n\nres\n\nResponseGetData(status=200, response={'addresses': ['0.0.0.0/0', '172.59.153.95']}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nAllowlist_UnableToUpdate\n\n Allowlist_UnableToUpdate (status:int, reason:str, domo_instance:str,\n                           function_name:str='update_allowlist')\n\nbase exception\n\nsource\n\n\nset_allowlist\n\n set_allowlist (auth:domolibrary.client.DomoAuth.DomoAuth,\n                ip_address_ls:list[str], debug_api:bool=False,\n                return_raw:bool=False, session:httpx.AsyncClient=None,\n                parent_class=None, debug_num_stacks_to_drop=1)\n\ncompanysettings/whitelist API only allows users to SET the allowlist does not allow INSERT or UPDATE\n\n# import domolibrary.client.DomoAuth as dmda\n\nip_address_ls = [\"0.0.0.0/0\"]\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nauth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nawait set_allowlist(auth=auth, ip_address_ls=ip_address_ls)\n\nResponseGetData(status=200, response='allow list updated from 172.59.153.95', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#authorized-domains",
    "href": "routes/instance_config.html#authorized-domains",
    "title": "Instance Config Routes",
    "section": "Authorized Domains",
    "text": "Authorized Domains\n\nsource\n\nset_authorized_domains\n\n set_authorized_domains (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         authorized_domain_ls:List[str],\n                         debug_api:bool=False,\n                         session:httpx.AsyncClient=None,\n                         parent_class=None, debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nget_authorized_domains\n\n get_authorized_domains (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         return_raw:bool=False, debug_api:bool=False,\n                         session:httpx.AsyncClient=None,\n                         parent_class=None, debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nGetDomains_NotFound\n\n GetDomains_NotFound (status, message, domo_instance)\n\nbase exception\n\nsample implementation of get_authorized_domains\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-domo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nawait get_authorized_domains(auth=token_auth, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response=[], is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/instance_config.html#authorized-custom-applications-domains",
    "href": "routes/instance_config.html#authorized-custom-applications-domains",
    "title": "Instance Config Routes",
    "section": "Authorized Custom Applications Domains",
    "text": "Authorized Custom Applications Domains\n\nsource\n\nget_authorized_custom_app_domains\n\n get_authorized_custom_app_domains\n                                    (auth:domolibrary.client.DomoAuth.Domo\n                                    Auth, return_raw:bool=False,\n                                    debug_api:bool=False,\n                                    session:httpx.AsyncClient=None,\n                                    parent_class=None,\n                                    debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nGetAppDomains_NotFound\n\n GetAppDomains_NotFound (status, message, domo_instance)\n\nbase exception\n\nsample implementation of get_authorized_custom_app_domains\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-domo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nawait get_authorized_custom_app_domains(auth=token_auth, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response=['domo.com', 'salesforce.com', 'facebook.com', 'twitter.com', 'instagram.com', 'youtube.com', 'linkedin.com'], is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nset_authorized_custom_app_domains\n\n set_authorized_custom_app_domains\n                                    (auth:domolibrary.client.DomoAuth.Domo\n                                    Auth, authorized_custom_app_domain_ls:\n                                    List[str], debug_api:bool=False,\n                                    session:httpx.AsyncClient=None,\n                                    parent_class=None,\n                                    debug_num_stacks_to_drop=1)\n\n\n# import domolibrary.client.DomoAuth as dmda\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-domo\", domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"]\n)\n\nres = await get_authorized_custom_app_domains(auth=token_auth, debug_api=False)\nauthorized_app_domains = res.response\n\nawait set_authorized_custom_app_domains(\n    auth=token_auth, authorized_custom_app_domain_ls=authorized_app_domains\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Instance Config Routes"
    ]
  },
  {
    "objectID": "routes/pdp.html",
    "href": "routes/pdp.html",
    "title": "PDP Routes",
    "section": "",
    "text": "source",
    "crumbs": [
      "Blog",
      "Routes",
      "PDP Routes"
    ]
  },
  {
    "objectID": "routes/pdp.html#generate-body-for-create_policy-endpoint",
    "href": "routes/pdp.html#generate-body-for-create_policy-endpoint",
    "title": "PDP Routes",
    "section": "generate body for create_policy endpoint",
    "text": "generate body for create_policy endpoint\n\nsource\n\ngenerate_policy_parameter_simple\n\n generate_policy_parameter_simple (column_name:str, type:str='COLUMN',\n                                   column_values_ls:list[str]=None,\n                                   operator='EQUALS',\n                                   ignore_case:bool=True)\n\n\nsource\n\n\ngenerate_policy_body\n\n generate_policy_body (policy_name:str, dataset_id:str,\n                       parameters_ls:list[dict], policy_id:str=None,\n                       user_ids:list[str]=None, group_ids:list[str]=None,\n                       virtual_user_ids:list[str]=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npolicy_name\nstr\n\n\n\n\ndataset_id\nstr\n\n\n\n\nparameters_ls\nlist\n\ngenerated by generate_policy_parameter_simple method\n\n\npolicy_id\nstr\nNone\nonly included if updating existing policy\n\n\nuser_ids\nlist\nNone\n\n\n\ngroup_ids\nlist\nNone\n\n\n\nvirtual_user_ids\nlist\nNone",
    "crumbs": [
      "Blog",
      "Routes",
      "PDP Routes"
    ]
  },
  {
    "objectID": "routes/pdp.html#policy-crud-operations",
    "href": "routes/pdp.html#policy-crud-operations",
    "title": "PDP Routes",
    "section": "Policy CRUD Operations",
    "text": "Policy CRUD Operations\n\nCreate PDP Policy\n\nsource\n\n\ncreate_policy\n\n create_policy (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n                body:dict, session:httpx.AsyncClient=None,\n                override_same_name:bool=False, debug_api:bool=False)\n\n\nsource\n\n\nCreatePolicy_Error\n\n CreatePolicy_Error (status, message, domo_instance,\n                     function_name='create_policy')\n\nbase exception\n\nsample implementation of create_policy, generate_policy_parameter_simple and generate_policy_body\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\nsample_parameter = generate_policy_parameter_simple(\n    column_name=\"Employee ID\",\n    column_values_ls=[\"123\"],\n    operator=\"EQUALS\",\n    ignore_case=True,\n)\n\nbody = generate_policy_body(\n    policy_name=\"Test Policy Name Employee 1789\",\n    dataset_id=dataset_id,\n    # policy_id=\"123\",  # including the policy_id updates that existing policy\n    parameters_ls=sample_parameter,\n    user_ids=[\"1893952720\"],\n)\n\nres = await create_policy(\n    auth=token_auth, dataset_id=dataset_id, body=body, override_same_name=False\n)\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nCreating policy...\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n'Bad Request'\n\n\n\n### Update PDP Policy\n\n\n\n\nUpdate PDP Policy\n\nsource\n\n\nupdate_policy\n\n update_policy (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n                policy_id:str, body:dict, session:httpx.AsyncClient=None,\n                debug_api:bool=False)\n\n\nsample implementation of update_policy\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\nsample_parameters = generate_policy_parameter_simple(\n    column_name=\"Employee ID\",\n    column_values_ls=[\"123\"],\n    operator=\"EQUALS\",\n    ignore_case=True,\n)\n\nbody = generate_policy_body(\n    \"Test Policy Name Employee 123\",\n    dataset_id=dataset_id,\n    # policy_id='1153',\n    parameters_ls=[sample_parameters],\n    user_ids=[\"1893952720\"],\n)\n\nres = await update_policy(\n    auth=token_auth, dataset_id=dataset_id, policy_id=\"1178\", body=body, debug_api=False\n)\n\nres\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\nResponseGetData(status=404, response='Not Found', is_success=False, parent_class=None)\n\n\n\n\n\nDelete PDP Policy\n\nsource\n\n\ndelete_policy\n\n delete_policy (auth:domolibrary.client.DomoAuth.DomoAuth,\n                dataset_id:str=None, policy_id:str=None,\n                session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\n\nsample implementation of delete_policy\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\nres = await delete_policy(\n    auth=token_auth, dataset_id=dataset_id, policy_id=\"1179\", debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\n\n\nEnable / Disable PDP on dataset (toggle_pdp)\n\nsource\n\n\ntoggle_pdp\n\n toggle_pdp (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n             is_enable:bool=True, debug_api:bool=False,\n             session:httpx.AsyncClient=None)\n\n\nsample implementation of toggle_pdp\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\nres = await toggle_pdp(\n    auth=token_auth,\n    dataset_id=dataset_id,\n    is_enable=True,\n)\nres\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\nResponseGetData(status=200, response={'enabled': True, 'secured': False, 'external': False, 'enabledColumn': False}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "PDP Routes"
    ]
  },
  {
    "objectID": "routes/dataset.html",
    "href": "routes/dataset.html",
    "title": "Dataset Routes",
    "section": "",
    "text": "source\n\n\n\n DatasetNotFoundError (dataset_id, domo_instance, status=None,\n                       parent_class=None, function_name=None)\n\nbase exception\n\nsource\n\n\n\n\n query_dataset_private (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        dataset_id:str, sql:str,\n                        session:Optional[httpx.AsyncClient]=None,\n                        loop_until_end:bool=False, limit=100, skip=0,\n                        maximum=100,\n                        filter_pdp_policy_id_ls:List[int]=None,\n                        debug_api:bool=False, debug_loop:bool=False,\n                        timeout:int=10, parent_class=None,\n                        debug_num_stacks_to_drop=1)\n\nexecute SQL queries against private APIs, requires DomoFullAuth or DomoTokenAuth\n\nsource\n\n\n\n\n query_dataset_public\n                       (dev_auth:domolibrary.client.DomoAuth.DomoDeveloper\n                       Auth, dataset_id:str, sql:str,\n                       session:httpx.AsyncClient, debug_api:bool=False)\n\nquery for hitting public apis, requires client_id and secret authentication\n\nsource\n\n\n\n\n QueryRequestError (dataset_id, domo_instance, sql, status=None,\n                    message='', parent_class=None, function_name=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\n\nsql = f\"SELECT * FROM TABLE\"\n\nds_res = await query_dataset_private(\n    dataset_id=dataset_id,\n    auth=token_auth,\n    sql=sql,\n    skip=0,\n    limit=1000,\n    filter_pdp_policy_id_ls=[1225, 1226],  # to apply pdp filter context\n    loop_until_end=True,\n    debug_api=False,\n)\nprint(len(ds_res.response))\npd.DataFrame(ds_res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n2\n\n\n\n\n\n\n\n\n\n\nobjectID\nurl\nTitle\narticle\nviews\ncreated_dt\npublished_dt\n\n\n\n\n0\n000005034\nhttps://domo-support.domo.com/s/article/360042...\nAdding Scale Markers to Your Charts\nIntroDomo provides the ability to set scale ma...\n50\n2022-11-02T21:00:00\n2022-11-02T21:04:00\n\n\n1\n000004347\nhttps://domo-support.domo.com/s/article/457779...\nAccessing Goals Data\nIntroIn Goals, you can see the overall status ...\n23\n2022-10-24T21:41:00\n2022-10-24T22:39:00",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataset Routes"
    ]
  },
  {
    "objectID": "routes/dataset.html#query-datasets",
    "href": "routes/dataset.html#query-datasets",
    "title": "Dataset Routes",
    "section": "",
    "text": "source\n\n\n\n DatasetNotFoundError (dataset_id, domo_instance, status=None,\n                       parent_class=None, function_name=None)\n\nbase exception\n\nsource\n\n\n\n\n query_dataset_private (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        dataset_id:str, sql:str,\n                        session:Optional[httpx.AsyncClient]=None,\n                        loop_until_end:bool=False, limit=100, skip=0,\n                        maximum=100,\n                        filter_pdp_policy_id_ls:List[int]=None,\n                        debug_api:bool=False, debug_loop:bool=False,\n                        timeout:int=10, parent_class=None,\n                        debug_num_stacks_to_drop=1)\n\nexecute SQL queries against private APIs, requires DomoFullAuth or DomoTokenAuth\n\nsource\n\n\n\n\n query_dataset_public\n                       (dev_auth:domolibrary.client.DomoAuth.DomoDeveloper\n                       Auth, dataset_id:str, sql:str,\n                       session:httpx.AsyncClient, debug_api:bool=False)\n\nquery for hitting public apis, requires client_id and secret authentication\n\nsource\n\n\n\n\n QueryRequestError (dataset_id, domo_instance, sql, status=None,\n                    message='', parent_class=None, function_name=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\n\nsql = f\"SELECT * FROM TABLE\"\n\nds_res = await query_dataset_private(\n    dataset_id=dataset_id,\n    auth=token_auth,\n    sql=sql,\n    skip=0,\n    limit=1000,\n    filter_pdp_policy_id_ls=[1225, 1226],  # to apply pdp filter context\n    loop_until_end=True,\n    debug_api=False,\n)\nprint(len(ds_res.response))\npd.DataFrame(ds_res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n2\n\n\n\n\n\n\n\n\n\n\nobjectID\nurl\nTitle\narticle\nviews\ncreated_dt\npublished_dt\n\n\n\n\n0\n000005034\nhttps://domo-support.domo.com/s/article/360042...\nAdding Scale Markers to Your Charts\nIntroDomo provides the ability to set scale ma...\n50\n2022-11-02T21:00:00\n2022-11-02T21:04:00\n\n\n1\n000004347\nhttps://domo-support.domo.com/s/article/457779...\nAccessing Goals Data\nIntroIn Goals, you can see the overall status ...\n23\n2022-10-24T21:41:00\n2022-10-24T22:39:00",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataset Routes"
    ]
  },
  {
    "objectID": "routes/dataset.html#dataset-properties",
    "href": "routes/dataset.html#dataset-properties",
    "title": "Dataset Routes",
    "section": "Dataset Properties",
    "text": "Dataset Properties\n\nsource\n\nget_dataset_by_id\n\n get_dataset_by_id (dataset_id:str,\n                    auth:Optional[domolibrary.client.DomoAuth.DomoAuth]=No\n                    ne, debug_api:bool=False,\n                    session:Optional[httpx.AsyncClient]=None,\n                    parent_class:str=None, debug_num_stacks_to_drop=1)\n\nretrieve dataset metadata\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_instance=\"domo-community\",\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    )\n\n    await get_dataset_by_id(dataset_id=123, auth=token_auth)\n\nexcept DatasetNotFoundError as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  DatasetNotFoundError 🛑 - function: get_dataset_by_id || dataset - 123 not found || status 404 || error at domo-community\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_res = await get_dataset_by_id(\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"], auth=token_auth\n)\npd.DataFrame([ds_res.response])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\ndisplayType\ndataProviderType\ntype\nname\nowner\nstatus\ncreated\nlastTouched\nlastUpdated\n...\nadcSource\ncloudId\ncloudName\npermissions\nhidden\ntags\nscheduleActive\ncardCount\ncryoStatus\ncloudEngine\n\n\n\n\n0\n04c1574e-c8be-4721-9846-c6ffa491144b\ndomo-jupyterdata\ndomo-jupyterdata\nJupyter\ndomo_kbs\n{'id': '1893952720', 'name': 'Jae Wilson1', 't...\nSUCCESS\n1668379680000\n1711216181000\n1668385822045\n...\nDIRECT\ndomo\nDomo\nREAD_WRITE_DELETE_SHARE_ADMIN\nFalse\n[\"developer_documentation\",\"hackercore\"]\nTrue\n2\nADRENALINE\ndomo\n\n\n\n\n1 rows × 31 columns\n\n\n\n\n\nsource\n\n\nget_schema\n\n get_schema (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n             debug_api:bool=False, debug_num_stacks_to_drop=1,\n             parent_class=None)\n\nretrieve the schema for a dataset\n\nsample implementation of get_schema\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_schema(dataset_id=os.environ[\"DOJO_DATASET_ID\"], auth=token_auth)\n# retrieve schema from response\npd.DataFrame(res.response.get(\"tables\")[0].get(\"columns\"))\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nname\nid\ntype\nvisible\norder\n\n\n\n\n0\nobjectID\nobjectID\nSTRING\nTrue\n0\n\n\n1\nurl\nurl\nSTRING\nTrue\n0\n\n\n2\nTitle\nTitle\nSTRING\nTrue\n0\n\n\n3\narticle\narticle\nSTRING\nTrue\n0\n\n\n4\nviews\nviews\nLONG\nTrue\n0\n\n\n5\ncreated_dt\ncreated_dt\nDATETIME\nTrue\n0\n\n\n6\npublished_dt\npublished_dt\nDATETIME\nTrue\n0\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nalter_schema\n\n alter_schema (auth:domolibrary.client.DomoAuth.DomoAuth, schema_obj:dict,\n               dataset_id:str, debug_api:bool=False,\n               parent_class:str=None, debug_num_stacks_to_drop:int=1)\n\nretrieve the schema for a dataset\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nschema_res = await get_schema(dataset_id=os.environ[\"DOJO_DATASET_ID\"], auth=token_auth)\n\nschema_obj = schema_res.response[\"tables\"][0]\n\nawait alter_schema(\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"], auth=token_auth, schema_obj=schema_obj\n)\n\n## must index dataset after alter schema\n# await index_dataset(dataset_id=os.environ[\"DOJO_DATASET_ID\"], auth=token_auth )\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'schemaId': 3}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\nset_dataset_tags\n\n set_dataset_tags (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                   tag_ls:List[str], dataset_id:str, debug_api:bool=False,\n                   session:Optional[httpx.AsyncClient]=None,\n                   return_raw:bool=False, parent_class:str=None,\n                   debug_num_stacks_to_drop:int=1)\n\nREPLACE tags on this dataset with a new list\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\ntag_ls = [\"hackercore\", \"developer_documentation\"]\n\nawait set_dataset_tags(\n    auth=token_auth,\n    tag_ls=tag_ls,\n    dataset_id=os.environ[\"DOJO_DATASET_ID\"],\n    debug_api=False,\n    return_raw=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='Dataset 04c1574e-c8be-4721-9846-c6ffa491144b tags updated to [hackercore, developer_documentation]', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataset Routes"
    ]
  },
  {
    "objectID": "routes/dataset.html#upload-data",
    "href": "routes/dataset.html#upload-data",
    "title": "Dataset Routes",
    "section": "Upload Data",
    "text": "Upload Data\n\noverview\nIn the URL, parts refers to the multi-part API and is unrelated to the partitions concept. The multi-part API was designed to allow sending multiple streams of Data into a data_version simultaneously.\nIn stage 1, the values passed in the Body will be superseded by values in the COMMIT (stage 3), so best practices is to not populate values here.\nThe response includes an uploadId, which must be stored and passed to the URL of the subsequent upload request (stages 2 and 3).\n\n\nurl params\nThe dataTag parameter allows users to UPDATE or REPLACE a datatag (partition)\nNOTE: restateDataTag is largely deprecated // exists for backward compatibility\n\n\nbody params\nThe appendId parameter accepts “latest” or “None”\nlatest will APPEND the data version to the dataset\n\nsource\n\n\nUploadDataError\n\n UploadDataError (stage_num:int, dataset_id:str, status, message,\n                  domo_instance:str)\n\nraise if unable to upload data to Domo\n\nsource\n\n\nupload_dataset_stage_1\n\n upload_dataset_stage_1 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         dataset_id:str, partition_tag:str=None,\n                         session:Optional[httpx.AsyncClient]=None,\n                         debug_api:bool=False, return_raw:bool=False)\n\npreps dataset for upload by creating an upload_id (upload session key) pass to stage 2 as a parameter\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = \"b102e530-6472-4cc3-b420-d5ab3792fdf9\"\npartition_key = \"2023-04-27\"\n\nawait upload_dataset_stage_1(\n    auth=token_auth, dataset_id=dataset_id, partition_tag=partition_key, debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\nResponseGetData(status=200, response=1000, is_success=True, parent_class=None)\n\n\n\nsource\n\n\nupload_dataset_stage_2_file\n\n upload_dataset_stage_2_file (auth:domolibrary.client.DomoAuth.DomoAuth,\n                              dataset_id:str, upload_id:str,\n                              data_file:Optional[_io.TextIOWrapper]=None,\n                              session:Optional[httpx.AsyncClient]=None,\n                              part_id:str=2, debug_api:bool=False)\n\n\nsource\n\n\nupload_dataset_stage_2_df\n\n upload_dataset_stage_2_df (auth:domolibrary.client.DomoAuth.DomoAuth,\n                            dataset_id:str, upload_id:str,\n                            upload_df:pandas.core.frame.DataFrame,\n                            session:Optional[httpx.AsyncClient]=None,\n                            part_id:str=2, debug_api:bool=False)\n\n\nsource\n\n\nupload_dataset_stage_3\n\n upload_dataset_stage_3 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         dataset_id:str, upload_id:str,\n                         session:Optional[httpx.AsyncClient]=None,\n                         update_method:str='REPLACE',\n                         partition_tag:str=None, is_index:bool=False,\n                         debug_api:bool=False)\n\ncommit will close the upload session, upload_id. this request defines how the data will be loaded into Adrenaline, update_method has optional flag for indexing dataset.\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nds_id = \"cbae0e0c-a92d-4a4c-8d0c-c9ccd38fe928\"\n\n# await get_schema(dataset_id= ds_id, auth=token_auth)\n\ndf = pd.DataFrame([{\"col_a\": \"a\", \"col_b\": \"b\", \"col_c\": \"c\"}])\n\n\ns1_res = await upload_dataset_stage_1(\n    auth=token_auth, dataset_id=ds_id, partition_tag=None, debug_api=False\n)\n\nupload_id = s1_res.response\nupload_id\n\ns2_res = await upload_dataset_stage_2_df(\n    auth=token_auth,\n    dataset_id=ds_id,\n    upload_id=upload_id,\n    upload_df=df,\n    part_id=2,\n    debug_api=False,\n)\n\n\ns3_res = await upload_dataset_stage_3(\n    auth=token_auth,\n    dataset_id=ds_id,\n    upload_id=upload_id,\n    update_method=\"REPLACE\",  # accepts REPLACE or APPEND\n    is_index=True,  # index after uploading\n)\n\ns3_res.is_success\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n\n\nTrue\n\n\n\nsource\n\n\nindex_dataset\n\n index_dataset (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n                session:Optional[httpx.AsyncClient]=None,\n                debug_api:bool=False)\n\nmanually index a dataset\n\nsource\n\n\nindex_status\n\n index_status (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n               index_id:str, session:Optional[httpx.AsyncClient]=None,\n               debug_api:bool=False)\n\nget the completion status of an index",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataset Routes"
    ]
  },
  {
    "objectID": "routes/dataset.html#working-with-partitions",
    "href": "routes/dataset.html#working-with-partitions",
    "title": "Dataset Routes",
    "section": "Working with Partitions",
    "text": "Working with Partitions\n\nsource\n\nlist_partitions\n\n list_partitions (auth:domolibrary.client.DomoAuth.DomoAuth,\n                  dataset_id:str, body:dict=None,\n                  session:httpx.AsyncClient=None, debug_api:bool=False,\n                  debug_loop:bool=False)\n\n\nsource\n\n\ngenerate_list_partitions_body\n\n generate_list_partitions_body (limit=100, offset=0)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataset_id = \"d2b21660-4ba8-400c-badf-aeef5a9abae1\"\n\nres = await list_partitions(auth=token_auth, dataset_id=dataset_id)\n\nds_partition_ls = res.response\n\npd.DataFrame(ds_partition_ls[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\ndataId\npartitionId\ndateCompleted\nrowCount\n\n\n\n\n0\n372\n2013-07-02\n2023-01-24T14:27:21.000+00:00\n1\n\n\n1\n373\n2013-07-01\n2023-01-24T14:27:21.000+00:00\n1\n\n\n2\n354\n2013-07-20\n2023-01-24T14:27:20.000+00:00\n1\n\n\n3\n355\n2013-07-19\n2023-01-24T14:27:20.000+00:00\n1\n\n\n4\n356\n2013-07-18\n2023-01-24T14:27:20.000+00:00\n1\n\n\n\n\n\n\n\n\n\nsource\n\n\ncreate\n\n create (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_name:str,\n         dataset_type:str='api', session:httpx.AsyncClient=None,\n         schema:dict=None, debug_api:bool=False)\n\n\nsource\n\n\ngenerate_create_dataset_body\n\n generate_create_dataset_body (dataset_name:str, dataset_type:str='API',\n                               schema:dict=None)\n\n\nsample implementation of create dataset\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# await create(dataset_name = 'hello world', dataset_type = 'api', auth = token_auth)\n\n\nsource\n\n\n\ndelete_partition_stage_1\n\n delete_partition_stage_1 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                           dataset_id:str, dataset_partition_id:str,\n                           debug_api:bool=False)\n\n\nsource\n\n\ndelete_partition_stage_2\n\n delete_partition_stage_2 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                           dataset_id:str, dataset_partition_id:str,\n                           debug_api:bool=False)\n\n\nsource\n\n\ndelete\n\n delete (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n         session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\nsource\n\n\ngenerate_share_dataset_payload\n\n generate_share_dataset_payload (entity_type, entity_id, access_level:__ma\n                                 in__.ShareDataset_AccessLevelEnum=&lt;ShareD\n                                 ataset_AccessLevelEnum.CAN_SHARE:\n                                 'CAN_SHARE'&gt;, is_send_email:bool=False)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nentity_type\n\n\nUSER or GROUP\n\n\nentity_id\n\n\n\n\n\naccess_level\nShareDataset_AccessLevelEnum\nShareDataset_AccessLevelEnum.CAN_SHARE\n\n\n\nis_send_email\nbool\nFalse\n\n\n\n\n\nsource\n\n\nShareDataset_AccessLevelEnum\n\n ShareDataset_AccessLevelEnum (value, names=None, module=None,\n                               qualname=None, type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\nshare_dataset\n\n share_dataset (auth:domolibrary.client.DomoAuth.DomoAuth, dataset_id:str,\n                body:dict, session:httpx.AsyncClient=None,\n                debug_api=False, parent_class=None,\n                debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nShareDataset_Error\n\n ShareDataset_Error (dataset_id, status, response, domo_instance,\n                     parent_class=None, function_name=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nbody = generate_share_dataset_payload(\n    entity_type=\"USER\",\n    entity_id=os.environ[\"DOMO_DOJO_USER_ID\"],\n    #    access_level=ShareDataset_EntityTypes_Enum.CO_OWNER\n)\n\ndataset_id = \"d2b21660-4ba8-400c-badf-aeef5a9abae1\"\n\ntry:\n    print(await share_dataset(dataset_id=dataset_id, body=body, auth=token_auth))\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nResponseGetData(status=200, response='updated access list USER - 663516735 added to d2b21660-4ba8-400c-badf-aeef5a9abae1', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataset Routes"
    ]
  },
  {
    "objectID": "routes/bootstrap.html",
    "href": "routes/bootstrap.html",
    "title": "Bootstrap Routes",
    "section": "",
    "text": "Bootstrap Routes\n\nError Classes\n\nsource\n\nBootstrap_RetrievalError\n\n Bootstrap_RetrievalError (status, response, domo_instance, parent_class,\n                           function_name)\n\nbase exception\n\nBootstrap_RetrievalError(\n    status=400,\n    response=\"fail\",\n    domo_instance=\"test\",\n    parent_class=123,\n    function_name=\"foo\",\n)\n\n__main__.Bootstrap_RetrievalError('🛑  Bootstrap_RetrievalError 🛑 - function: 123.foo || status 400 || fail at test')\n\n\n\n\n\nGet Bootstrap\nThe base API requires DomoFullAuth flow to query and retrieve data\n\nsource\n\nget_bootstrap\n\n get_bootstrap (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                debug_api:bool=False, session:httpx.AsyncClient=None,\n                parent_class=None, debug_num_stacks_to_drop=1)\n\nget bootstrap data\n\nsample implementation of get_boostrap\nThe bootstrap API requires dmda.DomoFUllAuth. Passing Token Auth will throw an error\n\n# eval: false\n\n# import domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    await get_bootstrap(auth=auth, debug_api=False)\n\nexcept InvalidAuthTypeError as e:\n    print(e)\n\n🛑  InvalidAuthTypeError 🛑 - function: get_bootstrap || This API rquires DomoFullAuth at domo-community\n\n\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nres = await get_bootstrap(auth=full_auth, debug_api=False)\nres.response.keys()\n\ndict_keys(['notifierConfig', 'currentUser', 'data'])\n\n\n\n\n\n\nGet Customer\n\nsource\n\nget_bootstrap_customerid\n\n get_bootstrap_customerid (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                           session:httpx.AsyncClient=None,\n                           debug_api:bool=False, return_raw:bool=False,\n                           debug_num_stacks_to_drop=2,\n                           parent_class:str=None)\n\nretrieves the domo_instance customer id\n\nsample implementation of get_customer_id\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nawait get_bootstrap_customerid(auth=full_auth, debug_api=False, return_raw=False)\n\nResponseGetData(status=200, response='mmmm-0012-0200', is_success=True, parent_class=None)\n\n\n\n\n\n\nGet Bootstrap Features\n\nsource\n\nget_bootstrap_features\n\n get_bootstrap_features (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         session:httpx.AsyncClient=None,\n                         debug_api:bool=False, return_raw:bool=False,\n                         debug_num_stacks_to_drop=2, parent_class=None)\n\n\nsample implementation of get_bootstrap_features\n\n# import pandas as pd\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nres = await get_bootstrap_features(auth=full_auth, debug_api=False, return_raw=False)\n\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n\n\n\n\nid\nname\nlabel\ndescription\nenabled\npurchased\ntype\nenvironment\nowner\n\n\n\n\n0\n4\nsearch\n\n\nTrue\nFalse\nSTANDARD\n\n\n\n\n1\n5\nlauncher\n\n\nTrue\nTrue\nPREMIUM\n\n\n\n\n2\n9\nprofile-reminder\n\n\nTrue\nFalse\nSTANDARD\n\n\n\n\n3\n17\nenableSwapDatasource\n\n\nTrue\nFalse\nSTANDARD\n\n\n\n\n4\n19\nup\n\n\nTrue\nTrue\nSTANDARD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet Is_Account_V2\n\nsource\n\nget_bootstrap_features_is_accountsv2_enabled\n\n get_bootstrap_features_is_accountsv2_enabled\n                                               (auth:domolibrary.client.Do\n                                               moAuth.DomoAuth, session:ht\n                                               tpx.AsyncClient=None,\n                                               debug_api:bool=False,\n                                               return_raw:bool=False,\n                                               debug_num_stacks_to_drop=2,\n                                               parent_class=None)\n\n\nsample implementation of get_bootstrap_features_is_accountsv2_enabled\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nawait get_bootstrap_features_is_accountsv2_enabled(\n    auth=full_auth, debug_api=False, return_raw=False\n)\n\nResponseGetData(status=200, response=False, is_success=True, parent_class=None)\n\n\n\n\n\n\nGet Bootstrap Pages\n\nsource\n\nget_bootstrap_pages\n\n get_bootstrap_pages (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      session:httpx.AsyncClient=None,\n                      debug_api:bool=False, return_raw:bool=False,\n                      debug_num_stacks_to_drop=2, parent_class=None)\n\nthis API will return the downstream (children) hierarchy of a page\n\nsample get bootstrap pages\n\n# import pandas as pd\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nres = await get_bootstrap_pages(auth=full_auth, debug_api=False, return_raw=False)\n\npd.DataFrame(res.response)[0:5]\n\n\n\n\n\n\n\n\n\nid\ntitle\nlocked\nsharedView\npageVisible\nvirtualPage\nisValidBadgePage\ncanAddCard\nbibHiddenPage\nhasAccess\nhierarchy\nseparator\ntype\npageLocation\nowner\nowners\nisOwner\nchildCount\nchildren\n\n\n\n\n0\n-100000\nOverview\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nTrue\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n-100003\nFavorites\nFalse\nFalse\nTrue\nTrue\nNaN\nFalse\nFalse\nTrue\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n-100002\nShared\nFalse\nFalse\nTrue\nTrue\nNaN\nFalse\nFalse\nTrue\n0\nTrue\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n30507758\nWelcome\nTrue\nTrue\nTrue\nNaN\nNaN\nTrue\nFalse\nTrue\n0\nNaN\npage\n0.0\n587894148.0\n[{'id': 587894148, 'type': 'USER', 'displayNam...\nTrue\n0.0\nNaN\n\n\n4\n1267639476\nCommunity Solutions\nTrue\nTrue\nTrue\nNaN\nNaN\nTrue\nFalse\nTrue\n0\nNaN\npage\n1.0\n587894148.0\n[{'id': 587894148, 'type': 'USER', 'displayNam...\nFalse\n3.0\n[{'id': '1759878295', 'title': 'Beast Modes', ...",
    "crumbs": [
      "Blog",
      "Routes",
      "Bootstrap Routes"
    ]
  },
  {
    "objectID": "routes/page.html",
    "href": "routes/page.html",
    "title": "Page Routes",
    "section": "",
    "text": "Route Errors\n\nsource\n\nPageRetrieval_byId_Error\n\n PageRetrieval_byId_Error (status, domo_instance, page_id, response,\n                           function_name=None, parent_class=None)\n\nbase exception\n\nsample implementation of PageRetrieval_byId_Error\n\ntry:\n    raise PageRetrieval_byId_Error(\n        status=404,\n        page_id=123,\n        function_name=\"test\",\n        parent_class=\"Foo\",\n        domo_instance=\"test_domo\",\n        response=\"Bad Request\",\n    )\nexcept PageRetrieval_byId_Error as e:\n    print(e)\n\n🛑  PageRetrieval_byId_Error 🛑 - function: Foo.test || status 404 || failed to retrieve page_id: 123 at test_domo\n\n\n\nsource\n\n\n\nget_page_by_id\n\n get_page_by_id (auth:domolibrary.client.DomoAuth.DomoAuth, page_id:str,\n                 debug_api:bool=False, session:httpx.AsyncClient=None,\n                 include_layout:bool=False,\n                 debug_num_stacks_to_drop:int=1, parent_class:str=None)\n\nretrieves a page or throws an error\n\nsample get_page_by_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\n\nres = await get_page_by_id(page_id=page_id, auth=token_auth)\n\nfrom pprint import pprint\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'cards': [{'active': True,\n            'allowTableDrill': True,\n            'badgeUpdated': 1631619716000,\n            'created': 1631619693,\n            'creatorId': 1898323170,\n            'description': '',\n            'id': 2056437956,\n            'locked': False,\n            'metadata': {'SummaryNumberFormat': '{\"type\":\"number\",\"format\":\"#A\"}',\n                         'calendar': 'default',\n                         'chartType': 'badge_vert_multibar',\n                         'chartVersion': '8',\n                         'columnAliases': '{}',\n                         'columnFormats': '{}',\n                         'currentLabel': '',\n                         'currentMethod': 'empty',\n                         'historyId': '2e5a1be4-8d73-4872-9ce1-20151ccd7e31'},\n            'ownerId': 1898323170,\n            'title': 'Trying Card Beast Mode',\n            'type': 'kpi',\n            'urn': '2056437956'},\n           {'active': True,\n            'allowTableDrill': True,\n            'badgeUpdated': 1631619767000,\n            'created': 1631619158,\n            'creatorId': 1898323170,\n            'description': '',\n            'id': 1548948000,\n            'locked': False,\n            'metadata': {'SummaryNumberFormat': '{\"type\":\"number\",\"format\":\"#A\"}',\n                         'calendar': 'default',\n                         'chartType': 'badge_vert_multibar',\n                         'chartVersion': '8',\n                         'columnAliases': '{}',\n                         'columnFormats': '{}',\n                         'currentLabel': '',\n                         'currentMethod': 'empty',\n                         'historyId': '6fa216c4-1465-4242-917c-3ca9e018c8be'},\n            'ownerId': 1898323170,\n            'title': 'View of 75th Percentile Test - Baseball Stats',\n            'type': 'kpi',\n            'urn': '1548948000'}],\n 'collections': [],\n 'id': '1761849366',\n 'isFavorite': False,\n 'locked': False,\n 'page': {'created': 1625863915000,\n          'isOwner': True,\n          'locked': False,\n          'mobileEnabled': True,\n          'owners': [{'displayName': 'Test Group ABC',\n                      'id': 592838897,\n                      'type': 'GROUP'}],\n          'pageId': 1761849366,\n          'pageName': 'delete me',\n          'sharedViewPage': True,\n          'title': 'delete me',\n          'type': 'page',\n          'updated': 1711223531575,\n          'virtualPage': False},\n 'pageAnalyzerSettings': {'interactionFilters': False,\n                          'noAddingNewFilters': False,\n                          'pageId': 1761849366,\n                          'showFilterBar': True,\n                          'showFilterIcons': True,\n                          'showGlobalDateFilters': True,\n                          'showSegments': True},\n 'sizes': [{'id': '2056437956', 'size': ''}, {'id': '1548948000', 'size': ''}],\n 'title': 'delete me',\n 'type': 'page'}\n\n\n\nsource\n\n\n\nget_page_definition\n\n get_page_definition (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      page_id:int, debug_api:bool=False,\n                      session:httpx.AsyncClient=None,\n                      parent_class:str=None,\n                      debug_num_stacks_to_drop:int=1)\n\n\nsample implementation of get_page_definition\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\n\nres = await get_page_definition(page_id=page_id, auth=token_auth)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'id': '1761849366',\n 'page': {'pageId': 1761849366,\n  'owners': [{'id': 592838897,\n    'type': 'GROUP',\n    'displayName': 'Test Group ABC'}],\n  'type': 'page',\n  'title': 'delete me',\n  'pageName': 'delete me',\n  'created': 1625863915000,\n  'updated': 1711216182479,\n  'locked': False,\n  'mobileEnabled': True,\n  'sharedViewPage': True,\n  'virtualPage': False,\n  'isOwner': True},\n 'type': 'page',\n 'title': 'delete me',\n 'sizes': [{'id': '2056437956', 'size': ''}, {'id': '1548948000', 'size': ''}],\n 'cards': [{'metadata': {'chartType': 'badge_vert_multibar',\n    'chartVersion': '8',\n    'currentLabel': '',\n    'currentMethod': 'empty',\n    'historyId': '6fa216c4-1465-4242-917c-3ca9e018c8be',\n    'calendar': 'default',\n    'columnAliases': '{}',\n    'columnFormats': '{}',\n    'SummaryNumberFormat': '{\"type\":\"number\",\"format\":\"#A\"}'},\n   'drillPathURNs': [],\n   'subscriptions': [{'cardId': 1548948000,\n     'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n     'dataSourceName': 'View of 75th Percentile Test - Baseball Stats',\n     'componentName': 'main',\n     'subscription': {'name': 'main',\n      'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n      'columns': [{'column': 'Age Bucket', 'mapping': 'ITEM'},\n       {'column': 'HR', 'aggregation': 'MEDIAN', 'mapping': 'SERIES'},\n       {'formulaId': 'calculation_9cef7193-d160-4ba5-af10-fb5ab7102d0e',\n        'mapping': 'SERIES'}],\n      'filters': [{'column': 'calculation_628752ca-a54d-44c6-a24f-4f4b45c049ff',\n        'values': ['4'],\n        'aggregated': True,\n        'filterType': 'LEGACY',\n        'operand': 'GREAT_THAN_EQUALS_TO',\n        'dataType': 'numeric'}],\n      'orderBy': [],\n      'groupBy': [{'column': 'Age Bucket'},\n       {'column': 'Index of 75th Percentile'}],\n      'fiscal': False,\n      'projection': False,\n      'distinct': False},\n     'displayType': 'dataset-view',\n     'dataType': 'dataset-view',\n     'providerType': 'dataset-view'}],\n   'owners': [{'id': '1898323170',\n     'type': 'USER',\n     'displayName': 'Creed Smith'}],\n   'slicers': [],\n   'dateInfo': {},\n   'datasources': [{'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n     'dataSourceName': 'View of 75th Percentile Test - Baseball Stats',\n     'displayType': 'dataset-view',\n     'dataType': 'dataset-view',\n     'providerType': 'dataset-view',\n     'isSampleData': False,\n     'lastUpdated': 1691604842445,\n     'adc': False,\n     'phase': None,\n     'state': 'IDLE'}],\n   'certification': {'state': 'NOT_CERTIFIED', 'adminCertified': False},\n   'urn': '1548948000',\n   'id': 1548948000,\n   'type': 'kpi',\n   'created': 1631619158,\n   'badgeUpdated': 1631619767000,\n   'creatorId': 1898323170,\n   'ownerId': 1898323170,\n   'description': '',\n   'title': 'View of 75th Percentile Test - Baseball Stats',\n   'active': True,\n   'allowTableDrill': True,\n   'locked': False,\n   'access': True,\n   'isCurrentUserOwner': False},\n  {'metadata': {'chartType': 'badge_vert_multibar',\n    'chartVersion': '8',\n    'currentLabel': '',\n    'currentMethod': 'empty',\n    'historyId': '2e5a1be4-8d73-4872-9ce1-20151ccd7e31',\n    'calendar': 'default',\n    'columnAliases': '{}',\n    'columnFormats': '{}',\n    'SummaryNumberFormat': '{\"type\":\"number\",\"format\":\"#A\"}'},\n   'drillPathURNs': [],\n   'subscriptions': [{'cardId': 2056437956,\n     'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n     'dataSourceName': 'View of 75th Percentile Test - Baseball Stats',\n     'componentName': 'main',\n     'subscription': {'name': 'main',\n      'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n      'columns': [{'column': 'Age Bucket', 'mapping': 'ITEM'},\n       {'column': 'HR', 'aggregation': 'SUM', 'mapping': 'SERIES'},\n       {'formulaId': 'calculation_9adef197-df7f-4c53-a43d-5e4308fc3567',\n        'mapping': 'SERIES'}],\n      'filters': [],\n      'orderBy': [],\n      'groupBy': [{'column': 'Age Bucket'},\n       {'column': 'player_id'},\n       {'column': 'HR'}],\n      'fiscal': False,\n      'projection': False,\n      'distinct': False},\n     'displayType': 'dataset-view',\n     'dataType': 'dataset-view',\n     'providerType': 'dataset-view'}],\n   'owners': [{'id': '1898323170',\n     'type': 'USER',\n     'displayName': 'Creed Smith'}],\n   'slicers': [],\n   'dateInfo': {},\n   'datasources': [{'dataSourceId': '4ef43af5-67e7-4b9e-bd58-c4e592aa289a',\n     'dataSourceName': 'View of 75th Percentile Test - Baseball Stats',\n     'displayType': 'dataset-view',\n     'dataType': 'dataset-view',\n     'providerType': 'dataset-view',\n     'isSampleData': False,\n     'lastUpdated': 1691604842445,\n     'adc': False,\n     'phase': None,\n     'state': 'IDLE'}],\n   'certification': {'state': 'NOT_CERTIFIED', 'adminCertified': False},\n   'urn': '2056437956',\n   'id': 2056437956,\n   'type': 'kpi',\n   'created': 1631619693,\n   'badgeUpdated': 1631619716000,\n   'creatorId': 1898323170,\n   'ownerId': 1898323170,\n   'description': '',\n   'title': 'Trying Card Beast Mode',\n   'active': True,\n   'allowTableDrill': True,\n   'locked': False,\n   'access': True,\n   'isCurrentUserOwner': False}],\n 'collections': [],\n 'locked': False,\n 'pageLayoutV4': {'layoutId': 1668051644,\n  'pageUrn': '1761849366',\n  'printFriendly': True,\n  'enabled': True,\n  'isDynamic': False,\n  'hasPageBreaks': False,\n  'content': [{'id': 56322,\n    'contentKey': 0,\n    'compactInteractionDefault': True,\n    'hideTitle': False,\n    'hideDescription': True,\n    'hideSummary': False,\n    'summaryNumberOnly': False,\n    'hideTimeframe': False,\n    'hideFooter': False,\n    'hideWrench': False,\n    'hideMargins': False,\n    'hasSummary': False,\n    'fitToFrame': False,\n    'hideBorder': False,\n    'acceptFilters': True,\n    'acceptDateFilter': True,\n    'acceptSegments': True,\n    'text': 'How did education impact povert',\n    'type': 'HEADER'},\n   {'id': 56323,\n    'contentKey': 1,\n    'compactInteractionDefault': True,\n    'hideTitle': False,\n    'hideDescription': True,\n    'hideSummary': False,\n    'summaryNumberOnly': False,\n    'hideTimeframe': False,\n    'hideFooter': False,\n    'hideWrench': False,\n    'hideMargins': False,\n    'hasSummary': False,\n    'fitToFrame': False,\n    'hideBorder': False,\n    'acceptFilters': True,\n    'acceptDateFilter': True,\n    'acceptSegments': True,\n    'text': 'Whats the ratio between local versus foreign students',\n    'type': 'HEADER'},\n   {'id': 56324,\n    'contentKey': 2,\n    'compactInteractionDefault': True,\n    'hideTitle': False,\n    'hideDescription': True,\n    'hideSummary': False,\n    'summaryNumberOnly': False,\n    'hideTimeframe': False,\n    'hideFooter': True,\n    'hideWrench': False,\n    'hideMargins': False,\n    'hasSummary': True,\n    'fitToFrame': False,\n    'hideBorder': False,\n    'acceptFilters': True,\n    'acceptDateFilter': True,\n    'acceptSegments': True,\n    'cardId': 2056437956,\n    'cardUrn': '2056437956',\n    'type': 'CARD'},\n   {'id': 56325,\n    'contentKey': 3,\n    'compactInteractionDefault': True,\n    'hideTitle': False,\n    'hideDescription': True,\n    'hideSummary': False,\n    'summaryNumberOnly': False,\n    'hideTimeframe': False,\n    'hideFooter': True,\n    'hideWrench': False,\n    'hideMargins': False,\n    'hasSummary': True,\n    'fitToFrame': False,\n    'hideBorder': False,\n    'acceptFilters': True,\n    'acceptDateFilter': True,\n    'acceptSegments': True,\n    'cardId': 1548948000,\n    'cardUrn': '1548948000',\n    'type': 'CARD'}],\n  'standard': {'aspectRatio': 1.67,\n   'width': 60,\n   'frameMargin': None,\n   'framePadding': None,\n   'type': 'STANDARD',\n   'template': [{'contentKey': 0,\n     'x': 0,\n     'y': 0,\n     'width': 60,\n     'height': 5,\n     'type': 'HEADER',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 1,\n     'x': 0,\n     'y': 5,\n     'width': 60,\n     'height': 5,\n     'type': 'HEADER',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 2,\n     'x': 0,\n     'y': 10,\n     'width': 15,\n     'height': 30,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 3,\n     'x': 15,\n     'y': 10,\n     'width': 15,\n     'height': 30,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 4,\n     'x': 30,\n     'y': 10,\n     'width': 15,\n     'height': 30,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 5,\n     'x': 45,\n     'y': 10,\n     'width': 15,\n     'height': 30,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []}]},\n  'compact': {'aspectRatio': 1.0,\n   'width': 12,\n   'frameMargin': None,\n   'framePadding': None,\n   'type': 'COMPACT',\n   'template': [{'contentKey': 0,\n     'x': 0,\n     'y': 0,\n     'width': 12,\n     'height': 2,\n     'type': 'HEADER',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 1,\n     'x': 0,\n     'y': 2,\n     'width': 12,\n     'height': 2,\n     'type': 'HEADER',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 2,\n     'x': 0,\n     'y': 4,\n     'width': 6,\n     'height': 6,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 3,\n     'x': 6,\n     'y': 4,\n     'width': 6,\n     'height': 6,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 4,\n     'x': 0,\n     'y': 10,\n     'width': 6,\n     'height': 6,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []},\n    {'contentKey': 5,\n     'x': 6,\n     'y': 10,\n     'width': 6,\n     'height': 6,\n     'type': 'CARD',\n     'virtual': False,\n     'virtualAppendix': False,\n     'children': []}]},\n  'background': {'id': 17515,\n   'cropHeight': None,\n   'cropWidth': None,\n   'x': None,\n   'y': None,\n   'dataFileId': None,\n   'imageBrightness': None,\n   'imageHeight': None,\n   'imageWidth': None,\n   'selectedColor': '#FF0000',\n   'textColor': '#4A4A4A',\n   'type': 'COLOR',\n   'darkMode': False,\n   'alpha': 1.0,\n   'src': None},\n  'style': None},\n 'isFavorite': False,\n 'pageAnalyzerSettings': {'pageId': 1761849366,\n  'interactionFilters': False,\n  'noAddingNewFilters': False,\n  'showFilterBar': True,\n  'showGlobalDateFilters': True,\n  'showSegments': True,\n  'showFilterIcons': True}}\n\n\n\nsource\n\n\n\nget_page_access_test\n\n get_page_access_test (auth, page_id, debug_api:bool=False,\n                       session:httpx.AsyncClient=None,\n                       parent_class:str=None,\n                       debug_num_stacks_to_drop:int=1)\n\nretrieves accesslist, which users and groups a page is shared with\n\nsample implementation test_page_access\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\nres = await get_page_access_test(\n    page_id=page_id,\n    auth=token_auth,\n)\n\n# for user in res.response.get('users'):\n#     print({user.get('displayName')})\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'owners': [{'displayName': 'Test Group ABC',\n             'id': 592838897,\n             'type': 'GROUP'}],\n 'pageAccess': True,\n 'pageId': 1761849366,\n 'pageName': 'delete me'}\n\n\n\nsource\n\n\n\nget_page_access_list\n\n get_page_access_list (auth, page_id, is_expand_users:bool=True,\n                       debug_api:bool=False,\n                       session:httpx.AsyncClient=None,\n                       parent_class:str=None,\n                       debug_num_stacks_to_drop:int=1)\n\nretrieves accesslist, which users and groups a page is shared with\n\nsample get_page_accesslist\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = 1761849366\nres = await get_page_access_list(page_id=page_id, auth=token_auth, is_expand_users=True)\n\n\n# for user in res.response.get('users'):\n#     print({user.get('displayName')})\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'explicitSharedUserCount': 1,\n 'groups': [{'active': True,\n             'creatorId': 1893952720,\n             'default': False,\n             'description': 'in use - do not alte',\n             'hidden': False,\n             'id': 592838897,\n             'name': 'Test Group ABC',\n             'type': 'open',\n             'users': [{'accepted': True,\n                        'active': True,\n                        'anonymous': False,\n                        'created': 1588960518,\n                        'department': 'Business Improvement',\n                        'displayName': 'Jae Wilson1',\n                        'emailAddress': 'jae@onyxreporting.com',\n                        'id': 1893952720,\n                        'invitorUserId': 587894148,\n                        'modified': 1711210801112,\n                        'pending': False,\n                        'roleId': 810756122,\n                        'systemUser': False,\n                        'userName': 'jae@onyxreporting.com',\n                        'userType': 'USER'}]},\n            {'active': True,\n             'creatorId': 1893952720,\n             'default': False,\n             'hidden': False,\n             'id': 1307490673,\n             'name': 'Test Group a',\n             'type': 'open',\n             'users': [{'accepted': True,\n                        'active': True,\n                        'alternateEmail': '',\n                        'anonymous': False,\n                        'created': 1588960528,\n                        'department': '',\n                        'deskPhoneNumber': '',\n                        'displayName': 'Grant Smith',\n                        'emailAddress': 'grantsmith@gmail.com',\n                        'employeeLocation': '',\n                        'hireDate': 1618632000000,\n                        'id': 55874022,\n                        'invitorUserId': 587894148,\n                        'location': '',\n                        'modified': 1682563509000,\n                        'pending': False,\n                        'phoneNumber': '0',\n                        'rights': 63,\n                        'role': 'Admin',\n                        'roleId': 1,\n                        'systemUser': False,\n                        'title': '',\n                        'userName': 'grant_smith@sweetwater.com',\n                        'userType': 'USER'}]}],\n 'resource': {'id': '1761849366', 'type': 'page'},\n 'totalUserCount': 3,\n 'users': [{'accepted': True,\n            'active': True,\n            'anonymous': False,\n            'created': 1603811014,\n            'displayName': 'test_participant',\n            'emailAddress': 'test_participant@domo.com',\n            'id': 1906627316,\n            'invitorUserId': 1893952720,\n            'isExplicitShare': True,\n            'modified': 1620421729918,\n            'pending': False,\n            'rights': 1,\n            'role': 'Participant',\n            'roleId': 4,\n            'systemUser': False,\n            'userName': 'test_participant@domo.com',\n            'userType': 'USER'},\n           {'accepted': True,\n            'active': True,\n            'anonymous': False,\n            'created': 1588960518,\n            'department': 'Business Improvement',\n            'displayName': 'Jae Wilson1',\n            'emailAddress': 'jae@onyxreporting.com',\n            'id': 1893952720,\n            'invitorUserId': 587894148,\n            'isExplicitShare': False,\n            'modified': 1711210801112,\n            'pending': False,\n            'roleId': 810756122,\n            'systemUser': False,\n            'userName': 'jae@onyxreporting.com',\n            'userType': 'USER'},\n           {'accepted': True,\n            'active': True,\n            'alternateEmail': '',\n            'anonymous': False,\n            'created': 1588960528,\n            'department': '',\n            'deskPhoneNumber': '',\n            'displayName': 'Grant Smith',\n            'emailAddress': 'grantsmith@gmail.com',\n            'employeeLocation': '',\n            'hireDate': 1618632000000,\n            'id': 55874022,\n            'invitorUserId': 587894148,\n            'isExplicitShare': False,\n            'location': '',\n            'modified': 1682563509000,\n            'pending': False,\n            'phoneNumber': '0',\n            'rights': 63,\n            'role': 'Admin',\n            'roleId': 1,\n            'systemUser': False,\n            'title': '',\n            'userName': 'grant_smith@sweetwater.com',\n            'userType': 'USER'}]}\n\n\n\nsource\n\n\n\nget_pages_adminsummary\n\n get_pages_adminsummary (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         debug_loop:bool=False, debug_api:bool=False,\n                         limit=35, session:httpx.AsyncClient=None)\n\nretrieves all pages in instance user is able to see (but may not have been explicitly shared)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_pages_adminsummary(auth=token_auth, debug_loop=False, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response=[{'pageId': 124947681, 'pageTitle': '1nw', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 655762077, 'ownerName': 'Adam Strizzi', 'owners': [{'id': 655762077, 'type': 'USER', 'displayName': 'Adam Strizzi'}], 'locked': False, 'lastModified': 1699379580376, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1316566624, 'pageTitle': '20210623_TRAINING_DomoStats Activity Log App', 'pageType': 'page', 'subType': None, 'parentPageId': 127044793, 'parentPageTitle': 'JaeW_AtOnyx', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1624448913807, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 377152481, 'pageTitle': '2023 Bowl Games', 'pageType': 'page', 'subType': None, 'parentPageId': 1148061566, 'parentPageTitle': 'NCAA Bowl Games', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1334846498, 'ownerName': 'Jonathan Pilafas', 'owners': [{'id': 1334846498, 'type': 'USER', 'displayName': 'Jonathan Pilafas'}], 'locked': False, 'lastModified': 1704904185814, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1630657884, 'pageTitle': '2023-10-24 Success Strategy - New', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1061133977, 'ownerName': 'John Pasquesi', 'owners': [{'id': 1061133977, 'type': 'USER', 'displayName': 'John Pasquesi'}], 'locked': False, 'lastModified': 1698164253034, 'cardCount': 27, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 384424178, 'pageTitle': '75th Percentile Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1898323170, 'ownerName': 'Creed Smith', 'owners': [{'id': 1898323170, 'type': 'USER', 'displayName': 'Creed Smith'}], 'locked': False, 'lastModified': 1681764847029, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1917664953, 'pageTitle': 'A', 'pageType': 'page', 'subType': None, 'parentPageId': 1603030697, 'parentPageTitle': 'Alpha', 'topPageId': 2054898013, 'topPageTitle': 'DCO | April 2023 Cohort', 'ownerId': 458290686, 'ownerName': 'Rachel Robinson', 'owners': [{'id': 458290686, 'type': 'USER', 'displayName': 'Rachel Robinson'}], 'locked': False, 'lastModified': 1683906406542, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1113451501, 'pageTitle': 'Aditya Jain Dev', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': None, 'ownerName': None, 'owners': [{'id': 1345737456, 'type': 'USER', 'displayName': 'Aditya Jain'}], 'locked': True, 'lastModified': 1683911414604, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 456498696, 'pageTitle': 'ADM DCO June', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1685659441910, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 951490673, 'pageTitle': 'ADM SF Orientation', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1690313377337, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1760351050, 'pageTitle': 'Adoption Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1363798332, 'parentPageTitle': 'Session 3: Success Strategies', 'topPageId': 307648701, 'topPageTitle': 'Domo Customer Orientation  (DCO)', 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1691519515243, 'cardCount': 14, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 907936742, 'pageTitle': 'Adoption Strategy', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705422370033, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1770373204, 'pageTitle': 'AI Example - ChatGPT Text-to-SQL Query Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1698162965934, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1603030697, 'pageTitle': 'Alpha', 'pageType': 'page', 'subType': None, 'parentPageId': 2054898013, 'parentPageTitle': 'DCO | April 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1683519823406, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 29460636, 'pageTitle': 'Alpha', 'pageType': 'page', 'subType': None, 'parentPageId': 456498696, 'parentPageTitle': 'ADM DCO June', 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1686691866675, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 608900314, 'pageTitle': 'Analyzer', 'pageType': 'page', 'subType': None, 'parentPageId': 1267639476, 'parentPageTitle': 'Community Solutions', 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': True, 'lastModified': 1588957016000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 11363432, 'pageTitle': 'Andrew - Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 409176773, 'ownerName': 'Andrew Kimball', 'owners': [{'id': 409176773, 'type': 'USER', 'displayName': 'Andrew Kimball'}], 'locked': False, 'lastModified': 1666207254663, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1558570101, 'pageTitle': 'AnotherLandingPage', 'pageType': 'page', 'subType': None, 'parentPageId': 754581154, 'parentPageTitle': 'DDX Bricks Examples', 'topPageId': None, 'topPageTitle': None, 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1684526275768, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1462969020, 'pageTitle': 'Apps', 'pageType': 'page', 'subType': None, 'parentPageId': 1113451501, 'parentPageTitle': 'Aditya Jain Dev', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345737456, 'ownerName': 'Aditya Jain', 'owners': [{'id': 1345737456, 'type': 'USER', 'displayName': 'Aditya Jain'}], 'locked': True, 'lastModified': 1680615655646, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1099148856, 'pageTitle': 'Apps Overview', 'pageType': 'page', 'subType': None, 'parentPageId': 1113451501, 'parentPageTitle': 'Aditya Jain Dev', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345737456, 'ownerName': 'Aditya Jain', 'owners': [{'id': 1345737456, 'type': 'USER', 'displayName': 'Aditya Jain'}], 'locked': True, 'lastModified': 1680342414664, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 277265358, 'pageTitle': 'Ashleigh Domo Variables Use Case', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': True, 'lastModified': 1683307797385, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 397911082, 'pageTitle': 'Ashleigh Stevenson', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1705591617251, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 652537756, 'pageTitle': 'ATP Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710202341208, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1374472120, 'pageTitle': 'Auto PDP?', 'pageType': 'page', 'subType': None, 'parentPageId': 965980384, 'parentPageTitle': 'Domo Knowledge and Reference Materials', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1594921342405, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1435819614, 'pageTitle': 'AutoML', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1083995483, 'ownerName': 'JP Putegnat', 'owners': [{'id': 1083995483, 'type': 'USER', 'displayName': 'JP Putegnat'}], 'locked': False, 'lastModified': 1619023585541, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1565454523, 'pageTitle': 'AutoML Sales Prediction Example', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 2144185095, 'ownerName': 'Ben Ainscough', 'owners': [{'id': 2144185095, 'type': 'USER', 'displayName': 'Ben Ainscough'}], 'locked': False, 'lastModified': 1618980093993, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1729376524, 'pageTitle': 'B', 'pageType': 'page', 'subType': None, 'parentPageId': 1603030697, 'parentPageTitle': 'Alpha', 'topPageId': 2054898013, 'topPageTitle': 'DCO | April 2023 Cohort', 'ownerId': 458290686, 'ownerName': 'Rachel Robinson', 'owners': [{'id': 458290686, 'type': 'USER', 'displayName': 'Rachel Robinson'}], 'locked': False, 'lastModified': 1683555990147, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 727624603, 'pageTitle': 'Beast Modes', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': None, 'ownerName': None, 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1705145842122, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1759878295, 'pageTitle': 'Beast Modes', 'pageType': 'page', 'subType': None, 'parentPageId': 1267639476, 'parentPageTitle': 'Community Solutions', 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': True, 'lastModified': 1588957012000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1120911383, 'pageTitle': 'Beginner - Domo Newbs For The Win!', 'pageType': 'page', 'subType': None, 'parentPageId': 1013767673, 'parentPageTitle': 'JJ Jarnagin Test OCT2023', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1697397906000, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 9453043, 'pageTitle': 'BEGINNER - Domo NEWBS For The Win!', 'pageType': 'page', 'subType': None, 'parentPageId': 567245841, 'parentPageTitle': 'NPO | NOV 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1701092091939, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 336739142, 'pageTitle': 'Beginner - Domo Newbs For The Win!', 'pageType': 'page', 'subType': None, 'parentPageId': 1094968405, 'parentPageTitle': 'DCO | August 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1691683652032, 'cardCount': 35, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1240435664, 'pageTitle': 'Beta', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': False, 'lastModified': 1588957065000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 604173190, 'pageTitle': 'BMJ of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 388564516, 'ownerName': 'Branden Jenkins', 'owners': [{'id': 388564516, 'type': 'USER', 'displayName': 'Branden Jenkins'}], 'locked': True, 'lastModified': 1710955224433, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1900825060, 'pageTitle': 'Bravo', 'pageType': 'page', 'subType': None, 'parentPageId': 456498696, 'parentPageTitle': 'ADM DCO June', 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1686692150211, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 929819152, 'pageTitle': 'Bravo', 'pageType': 'page', 'subType': None, 'parentPageId': 2054898013, 'parentPageTitle': 'DCO | April 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1682016149070, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 480379356, 'pageTitle': 'BVK Christmas Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': False, 'lastModified': 1698440989344, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2100953679, 'pageTitle': 'Campaigns', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345102715, 'ownerName': 'McWayne Mumford', 'owners': [{'id': 1345102715, 'type': 'USER', 'displayName': 'McWayne Mumford'}], 'locked': True, 'lastModified': 1665084694030, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1040607753, 'pageTitle': 'Campaigns', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345737456, 'ownerName': 'Aditya Jain', 'owners': [{'id': 1345737456, 'type': 'USER', 'displayName': 'Aditya Jain'}], 'locked': False, 'lastModified': 1622138538000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1318208080, 'pageTitle': 'Campaigns', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1703032349983, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1307176287, 'pageTitle': 'Certification tasks', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 844044381, 'ownerName': 'Katerina Rivera', 'owners': [{'id': 844044381, 'type': 'USER', 'displayName': 'Katerina Rivera'}], 'locked': False, 'lastModified': 1702914680005, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1072731102, 'pageTitle': 'Charlie', 'pageType': 'page', 'subType': None, 'parentPageId': 456498696, 'parentPageTitle': 'ADM DCO June', 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1686692605765, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 789319356, 'pageTitle': 'Charlie', 'pageType': 'page', 'subType': None, 'parentPageId': 2054898013, 'parentPageTitle': 'DCO | April 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1681784926319, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 913552080, 'pageTitle': 'ChatGPT Text-to-SQL Query Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 382550235, 'ownerName': 'Sheila Martinez', 'owners': [{'id': 382550235, 'type': 'USER', 'displayName': 'Sheila Martinez'}], 'locked': False, 'lastModified': 1697733609829, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1885821847, 'pageTitle': 'ChatGPT Text-to-SQL Query Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 799381630, 'ownerName': 'Lisa England ', 'owners': [{'id': 799381630, 'type': 'USER', 'displayName': 'Lisa England '}], 'locked': False, 'lastModified': 1697732908628, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 717329130, 'pageTitle': 'CLI', 'pageType': 'page', 'subType': None, 'parentPageId': 531423275, 'parentPageTitle': 'Domo APIs', 'topPageId': 109096720, 'topPageTitle': 'Domo IDEA Exchange', 'ownerId': 1158827447, 'ownerName': 'Ken Boyer', 'owners': [{'id': 1158827447, 'type': 'USER', 'displayName': 'Ken Boyer'}], 'locked': False, 'lastModified': 1619053593323, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1080655546, 'pageTitle': 'Cloud Costs', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1665882838458, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1849484822, 'pageTitle': 'Community Meetup', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1707466008, 'ownerName': 'Zack Cameron', 'owners': [{'id': 1707466008, 'type': 'USER', 'displayName': 'Zack Cameron'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1686237884614, 'cardCount': 13, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 416800494, 'pageTitle': 'Community Questions', 'pageType': 'page', 'subType': None, 'parentPageId': 1777803864, 'parentPageTitle': 'ST_-Superman-_', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1682605688658, 'cardCount': 17, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1267639476, 'pageTitle': 'Community Solutions', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': True, 'lastModified': 1588957006000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 11555470, 'pageTitle': 'Contiguous United States Detail (Alexis)', 'pageType': 'page', 'subType': None, 'parentPageId': 790951325, 'parentPageTitle': 'Coronavirus (COVID-19) Dashboard', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': True, 'lastModified': 1666016346962, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1579536938, 'pageTitle': 'Copy of BMJ of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1927492621, 'ownerName': 'Marcus Jenkins', 'owners': [{'id': 1927492621, 'type': 'USER', 'displayName': 'Marcus Jenkins'}], 'locked': True, 'lastModified': 1710500332541, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 223314004, 'pageTitle': 'Copy of Crypto Use-Case', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 86093101, 'ownerName': 'Michel Wieczorkiewicz', 'owners': [{'id': 86093101, 'type': 'USER', 'displayName': 'Michel Wieczorkiewicz'}], 'locked': False, 'lastModified': 1620630950182, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 155942344, 'pageTitle': 'Copy of Data Stories', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1251168784, 'ownerName': 'Andre Wieczorkiewicz', 'owners': [{'id': 1251168784, 'type': 'USER', 'displayName': 'Andre Wieczorkiewicz'}], 'locked': False, 'lastModified': 1620394094601, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 234313482, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 388564516, 'ownerName': 'Branden Jenkins', 'owners': [{'id': 388564516, 'type': 'USER', 'displayName': 'Branden Jenkins'}], 'locked': True, 'lastModified': 1710442019423, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1993214821, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 694942127, 'ownerName': 'Chris Wright', 'owners': [{'id': 694942127, 'type': 'USER', 'displayName': 'Chris Wright'}], 'locked': False, 'lastModified': 1661356627576, 'cardCount': 28, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 64269100, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 375140316, 'ownerName': 'Gregory Kobylinski', 'owners': [{'id': 375140316, 'type': 'USER', 'displayName': 'Gregory Kobylinski'}], 'locked': True, 'lastModified': 1667225053267, 'cardCount': 40, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 320451178, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 740627276, 'ownerName': 'Emmanuel Gillis-Harry', 'owners': [{'id': 740627276, 'type': 'USER', 'displayName': 'Emmanuel Gillis-Harry'}], 'locked': True, 'lastModified': 1675700602882, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 732923303, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1685998731477, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1691050935, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 416285069, 'ownerName': 'Meghan Rogers', 'owners': [{'id': 416285069, 'type': 'USER', 'displayName': 'Meghan Rogers'}], 'locked': True, 'lastModified': 1681915544722, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1259972092, 'pageTitle': 'Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 504807367, 'ownerName': 'Taylor Green', 'owners': [{'id': 504807367, 'type': 'USER', 'displayName': 'Taylor Green'}], 'locked': True, 'lastModified': 1669684738000, 'cardCount': 31, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 922104061, 'pageTitle': 'Copy of Domo Variables Use Cases (for dissecting)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1366575707, 'ownerName': 'Erik Mason', 'owners': [{'id': 1366575707, 'type': 'USER', 'displayName': 'Erik Mason'}], 'locked': True, 'lastModified': 1676504996729, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 561548862, 'pageTitle': 'Copy of New Feature Releases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1617734489520, 'cardCount': 24, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1245542181, 'pageTitle': 'Copy of Session 1: Journey Overview & Data Visualization', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 719511661, 'ownerName': 'Liam Scobey', 'owners': [{'id': 719511661, 'type': 'USER', 'displayName': 'Liam Scobey'}], 'locked': True, 'lastModified': 1688667237232, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1189996905, 'pageTitle': 'Copy of Wireframe Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 611290261, 'ownerName': 'Luc Leszczynski', 'owners': [{'id': 611290261, 'type': 'USER', 'displayName': 'Luc Leszczynski'}], 'locked': True, 'lastModified': 1699462975417, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 756869253, 'pageTitle': 'Coronavirus (Alexis)', 'pageType': 'page', 'subType': None, 'parentPageId': 790951325, 'parentPageTitle': 'Coronavirus (COVID-19) Dashboard', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': True, 'lastModified': 1617729874182, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 790951325, 'pageTitle': 'Coronavirus (COVID-19) Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': True, 'lastModified': 1594224755000, 'cardCount': 54, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2048834623, 'pageTitle': 'Course Builder Training Tracking Demo', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1710200397424, 'cardCount': 13, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 443317966, 'pageTitle': 'Course work', 'pageType': 'page', 'subType': None, 'parentPageId': 1613954604, 'parentPageTitle': '_-ST Superman-_', 'topPageId': 1008358638, 'topPageTitle': 'Major Domo Certification 2.0', 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1676659312745, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1533239291, 'pageTitle': 'Crypto Use-Case', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1619169620000, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1941721383, 'pageTitle': 'CSV List Filter DDX', 'pageType': 'page', 'subType': None, 'parentPageId': 98412364, 'parentPageTitle': 'GrantSmith', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1667223964172, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1959898097, 'pageTitle': 'Curated and Interactive Dashboards (1/19/2023)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 307632801, 'ownerName': 'Dan Brinton', 'owners': [{'id': 307632801, 'type': 'USER', 'displayName': 'Dan Brinton'}, {'id': 1746885226, 'type': 'USER', 'displayName': 'Jacob Folsom'}, {'id': 1630318017, 'type': 'USER', 'displayName': 'Dan Brinton 2'}], 'locked': True, 'lastModified': 1674085942250, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 989969396, 'pageTitle': 'Custom Apps', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1095515127, 'ownerName': 'Andrew Chaffin', 'owners': [{'id': 1095515127, 'type': 'USER', 'displayName': 'Andrew Chaffin'}], 'locked': False, 'lastModified': 1619188653306, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 125461895, 'pageTitle': 'Custom Date Dimensions with Offset', 'pageType': 'page', 'subType': None, 'parentPageId': 138471350, 'parentPageTitle': 'Virtual User Group', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1640703121844, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 980318001, 'pageTitle': 'Customers - All', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1699569893124, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1781737040, 'pageTitle': 'Customers - Single', 'pageType': 'page', 'subType': None, 'parentPageId': 980318001, 'parentPageTitle': 'Customers - All', 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1699570163158, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 951949615, 'pageTitle': 'Data', 'pageType': 'page', 'subType': None, 'parentPageId': 1267639476, 'parentPageTitle': 'Community Solutions', 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': True, 'lastModified': 1693796633930, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1556238527, 'pageTitle': 'Data Input', 'pageType': 'page', 'subType': None, 'parentPageId': 434475642, 'parentPageTitle': 'Success Strategy', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1675111635000, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1221354538, 'pageTitle': 'Data Input', 'pageType': 'page', 'subType': None, 'parentPageId': 1415343138, 'parentPageTitle': 'Success Strategy - New', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1685635460000, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 90757496, 'pageTitle': 'Data Profiling', 'pageType': 'page', 'subType': None, 'parentPageId': 400620119, 'parentPageTitle': 'Data Science Workshop', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1504505648, 'ownerName': 'Ken Lorenz', 'owners': [{'id': 1504505648, 'type': 'USER', 'displayName': 'Ken Lorenz'}], 'locked': False, 'lastModified': 1618511769278, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 400620119, 'pageTitle': 'Data Science Workshop', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1504505648, 'ownerName': 'Ken Lorenz', 'owners': [{'id': 1504505648, 'type': 'USER', 'displayName': 'Ken Lorenz'}], 'locked': False, 'lastModified': 1624033630884, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 52816148, 'pageTitle': 'Data Stories', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 351874351, 'ownerName': 'Marc-Anton Clavel', 'owners': [{'id': 351874351, 'type': 'USER', 'displayName': 'Marc-Anton Clavel'}], 'locked': False, 'lastModified': 1619016577126, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 322344489, 'pageTitle': 'Data Validation Using Alerts', 'pageType': 'page', 'subType': None, 'parentPageId': 138471350, 'parentPageTitle': 'Virtual User Group', 'topPageId': None, 'topPageTitle': None, 'ownerId': 307632801, 'ownerName': 'Dan Brinton', 'owners': [{'id': 307632801, 'type': 'USER', 'displayName': 'Dan Brinton'}], 'locked': False, 'lastModified': 1656004417753, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1559830188, 'pageTitle': 'Datacrew Meetups', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': None, 'ownerName': None, 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1666732807373, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1289295627, 'pageTitle': 'Dataset Schemas', 'pageType': 'page', 'subType': None, 'parentPageId': 790951325, 'parentPageTitle': 'Coronavirus (COVID-19) Dashboard', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1594307751392, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 56052906, 'pageTitle': 'DCO Sample Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1707466008, 'ownerName': 'Zack Cameron', 'owners': [{'id': 1707466008, 'type': 'USER', 'displayName': 'Zack Cameron'}], 'locked': False, 'lastModified': 1704317085649, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 470069339, 'pageTitle': 'DCO Visualization Dashboard_YL', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 2076863414, 'ownerName': 'Yongmei Lu', 'owners': [{'id': 2076863414, 'type': 'USER', 'displayName': 'Yongmei Lu'}], 'locked': False, 'lastModified': 1682015773394, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2054898013, 'pageTitle': 'DCO | April 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': True, 'lastModified': 1682025670384, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1094968405, 'pageTitle': 'DCO | August 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': True, 'lastModified': 1691693892833, 'cardCount': 9, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2077317919, 'pageTitle': 'DCO | June 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': True, 'lastModified': 1687978272106, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 511294352, 'pageTitle': 'DCO | May 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': True, 'lastModified': 1685039290066, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1137333366, 'pageTitle': 'DDX Breakout', 'pageType': 'page', 'subType': None, 'parentPageId': 1910242641, 'parentPageTitle': 'Games!', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693539377329, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1614788699, 'pageTitle': 'DDX Bricks', 'pageType': 'page', 'subType': None, 'parentPageId': 1559830188, 'parentPageTitle': 'Datacrew Meetups', 'topPageId': None, 'topPageTitle': None, 'ownerId': None, 'ownerName': None, 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1692302840201, 'cardCount': 22, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 754581154, 'pageTitle': 'DDX Bricks Examples', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1688881682295, 'cardCount': 21, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 424397556, 'pageTitle': 'DDX Graph with ThreeJS', 'pageType': 'page', 'subType': None, 'parentPageId': 595708801, 'parentPageTitle': 'Oleksii_DDX', 'topPageId': None, 'topPageTitle': None, 'ownerId': 612085674, 'ownerName': 'Oleksii Zakrevskyi', 'owners': [{'id': 612085674, 'type': 'USER', 'displayName': 'Oleksii Zakrevskyi'}], 'locked': False, 'lastModified': 1685017570990, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1288794381, 'pageTitle': 'DDX Rock Paper Scissors', 'pageType': 'page', 'subType': None, 'parentPageId': 1910242641, 'parentPageTitle': 'Games!', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693588205359, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2092110664, 'pageTitle': 'DDX Sample', 'pageType': 'page', 'subType': None, 'parentPageId': 595708801, 'parentPageTitle': 'Oleksii_DDX', 'topPageId': None, 'topPageTitle': None, 'ownerId': 612085674, 'ownerName': 'Oleksii Zakrevskyi', 'owners': [{'id': 612085674, 'type': 'USER', 'displayName': 'Oleksii Zakrevskyi'}], 'locked': False, 'lastModified': 1685018601241, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 129870190, 'pageTitle': 'DDX Snake', 'pageType': 'page', 'subType': None, 'parentPageId': 1910242641, 'parentPageTitle': 'Games!', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693588671284, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1640058209, 'pageTitle': 'DDX Solitaire', 'pageType': 'page', 'subType': None, 'parentPageId': 1910242641, 'parentPageTitle': 'Games!', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1705145860274, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1960747528, 'pageTitle': 'DDX User Management', 'pageType': 'page', 'subType': None, 'parentPageId': 595708801, 'parentPageTitle': 'Oleksii_DDX', 'topPageId': None, 'topPageTitle': None, 'ownerId': 612085674, 'ownerName': 'Oleksii Zakrevskyi', 'owners': [{'id': 612085674, 'type': 'USER', 'displayName': 'Oleksii Zakrevskyi'}], 'locked': False, 'lastModified': 1687186845497, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1878883028, 'pageTitle': 'DDX What If', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1652985473990, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1761849366, 'pageTitle': 'delete me', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': None, 'ownerName': None, 'owners': [{'id': 592838897, 'type': 'GROUP', 'displayName': 'Test Group ABC'}], 'locked': False, 'lastModified': 1711216182479, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 423813863, 'pageTitle': 'delete_prod me', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1631900717954, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 545237196, 'pageTitle': 'Demo Apps', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 826020125, 'ownerName': 'Ritwik', 'owners': [{'id': 826020125, 'type': 'USER', 'displayName': 'Ritwik'}], 'locked': False, 'lastModified': 1619168876088, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 408645730, 'pageTitle': 'Demo for Sales Forecasting', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1879536064, 'ownerName': 'Muhammad Anzer', 'owners': [{'id': 1879536064, 'type': 'USER', 'displayName': 'Muhammad Anzer'}], 'locked': False, 'lastModified': 1682717945521, 'cardCount': 9, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1311643948, 'pageTitle': 'Demo: Discounting Deep-dive', 'pageType': 'page', 'subType': None, 'parentPageId': 1959898097, 'parentPageTitle': 'Curated and Interactive Dashboards (1/19/2023)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 307632801, 'ownerName': 'Dan Brinton', 'owners': [{'id': 307632801, 'type': 'USER', 'displayName': 'Dan Brinton'}, {'id': 1746885226, 'type': 'USER', 'displayName': 'Jacob Folsom'}, {'id': 1630318017, 'type': 'USER', 'displayName': 'Dan Brinton 2'}], 'locked': False, 'lastModified': 1674259256608, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 562101158, 'pageTitle': 'Demo: Sales - RVPs', 'pageType': 'page', 'subType': None, 'parentPageId': 1959898097, 'parentPageTitle': 'Curated and Interactive Dashboards (1/19/2023)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 307632801, 'ownerName': 'Dan Brinton', 'owners': [{'id': 307632801, 'type': 'USER', 'displayName': 'Dan Brinton'}, {'id': 1746885226, 'type': 'USER', 'displayName': 'Jacob Folsom'}, {'id': 1630318017, 'type': 'USER', 'displayName': 'Dan Brinton 2'}], 'locked': True, 'lastModified': 1674076673226, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1239400587, 'pageTitle': 'DEV', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1631900247000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1973375319, 'pageTitle': 'Developer Portal', 'pageType': 'page', 'subType': None, 'parentPageId': 531423275, 'parentPageTitle': 'Domo APIs', 'topPageId': 109096720, 'topPageTitle': 'Domo IDEA Exchange', 'ownerId': 1158827447, 'ownerName': 'Ken Boyer', 'owners': [{'id': 1158827447, 'type': 'USER', 'displayName': 'Ken Boyer'}], 'locked': False, 'lastModified': 1709752729300, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1733264666, 'pageTitle': 'Discovery Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 795553497, 'ownerName': 'Miles Herleikson', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 795553497, 'type': 'USER', 'displayName': 'Miles Herleikson'}], 'locked': False, 'lastModified': 1705422314296, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 388026306, 'pageTitle': 'Documentation App', 'pageType': 'page', 'subType': None, 'parentPageId': 127044793, 'parentPageTitle': 'JaeW_AtOnyx', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1670002207302, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 531423275, 'pageTitle': 'Domo APIs', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1158827447, 'ownerName': 'Ken Boyer', 'owners': [{'id': 1158827447, 'type': 'USER', 'displayName': 'Ken Boyer'}], 'locked': False, 'lastModified': 1619013932765, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 307648701, 'pageTitle': 'Domo Customer Orientation  (DCO)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1692301464837, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 750336919, 'pageTitle': 'Domo Everywhere Example', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': True, 'lastModified': 1699569286450, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 109096720, 'pageTitle': 'Domo IDEA Exchange', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': True, 'lastModified': 1619171270943, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 965980384, 'pageTitle': 'Domo Knowledge and Reference Materials', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1593700715000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 384855757, 'pageTitle': 'Domo Messaging', 'pageType': 'page', 'subType': None, 'parentPageId': 138471350, 'parentPageTitle': 'Virtual User Group', 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': True, 'lastModified': 1667271277540, 'cardCount': 13, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 991825150, 'pageTitle': 'Domo MetaData', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1590171306448, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2084257841, 'pageTitle': 'Domo NEWBS For The Win!', 'pageType': 'page', 'subType': None, 'parentPageId': 1454308902, 'parentPageTitle': 'NPO | OCT 2023 Cohort', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 25, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1273130854, 'pageTitle': 'Domo Professional Practice Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 540788968, 'ownerName': 'Chelsi Chavez', 'owners': [{'id': 540788968, 'type': 'USER', 'displayName': 'Chelsi Chavez'}], 'locked': True, 'lastModified': 1695038490341, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1413145317, 'pageTitle': 'Domo Publish', 'pageType': 'page', 'subType': None, 'parentPageId': 1144548940, 'parentPageTitle': 'New Feature Releases', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1617803946191, 'cardCount': 14, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1566221928, 'pageTitle': 'Domo Specs and Standards', 'pageType': 'page', 'subType': None, 'parentPageId': 965980384, 'parentPageTitle': 'Domo Knowledge and Reference Materials', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1593700756998, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1880852133, 'pageTitle': 'Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 316139172, 'ownerName': 'Matt Tannyhill', 'owners': [{'id': 749054906, 'type': 'USER', 'displayName': 'Dan Hendriksen'}, {'id': 694942127, 'type': 'USER', 'displayName': 'Chris Wright'}, {'id': 1430590895, 'type': 'USER', 'displayName': 'David.Wills'}, {'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}, {'id': 1548628586, 'type': 'USER', 'displayName': 'Mike Zollinger'}], 'locked': True, 'lastModified': 1700259475966, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1832255158, 'pageTitle': 'Domo Variables Use Cases (Test)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 316139172, 'ownerName': 'Matt Tannyhill', 'owners': [{'id': 694942127, 'type': 'USER', 'displayName': 'Chris Wright'}, {'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}], 'locked': False, 'lastModified': 1661360275815, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1207402538, 'pageTitle': 'Domo Variables Use Cases PTM', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 392468792, 'ownerName': 'Paul Mccusker', 'owners': [{'id': 392468792, 'type': 'USER', 'displayName': 'Paul Mccusker'}], 'locked': True, 'lastModified': 1690211422705, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2139737411, 'pageTitle': 'Domopalooza 2022', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1641615913141, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 172863054, 'pageTitle': 'DomoStats - Activity Log', 'pageType': 'page', 'subType': None, 'parentPageId': 6633771, 'parentPageTitle': 'MetaData', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1611686887000, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1845973736, 'pageTitle': 'DomoStats Activity Log', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': False, 'lastModified': 1616606524622, 'cardCount': 31, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 827904085, 'pageTitle': 'DomoStats Activity Log App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1420612807, 'ownerName': 'Antoinette Aburime', 'owners': [{'id': 1420612807, 'type': 'USER', 'displayName': 'Antoinette Aburime'}], 'locked': False, 'lastModified': 1695587631000, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2055582735, 'pageTitle': 'DomoStats Activity Log App // DO NOT ALTER', 'pageType': 'page', 'subType': None, 'parentPageId': 127044793, 'parentPageTitle': 'JaeW_AtOnyx', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': True, 'lastModified': 1624432138000, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 702528579, 'pageTitle': 'DomoStats DataSets and DataFlows App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 13409734, 'ownerName': 'William Weylman', 'owners': [{'id': 13409734, 'type': 'USER', 'displayName': 'William Weylman'}], 'locked': False, 'lastModified': 1701213086686, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1587278892, 'pageTitle': 'DomoStats DataSets and DataFlows App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1458455288, 'pageTitle': 'DomoStats DataSets and DataFlows App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 208038823, 'ownerName': 'Jade Lee', 'owners': [{'id': 208038823, 'type': 'USER', 'displayName': 'Jade Lee'}], 'locked': False, 'lastModified': 1684427615477, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 655922858, 'pageTitle': 'DomoStats DataSets and DataFlows App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1444085156, 'ownerName': 'Chance Ewell', 'owners': [{'id': 1444085156, 'type': 'USER', 'displayName': 'Chance Ewell'}], 'locked': False, 'lastModified': 1684427632879, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1130567858, 'pageTitle': 'DomoStats People App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1690991516173, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2025469348, 'pageTitle': 'DomoStats People App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1420612807, 'ownerName': 'Antoinette Aburime', 'owners': [{'id': 1420612807, 'type': 'USER', 'displayName': 'Antoinette Aburime'}], 'locked': False, 'lastModified': 1695701025251, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 254001113, 'pageTitle': 'DomoStats People App // DO NOT ALTER', 'pageType': 'page', 'subType': None, 'parentPageId': 127044793, 'parentPageTitle': 'JaeW_AtOnyx', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': True, 'lastModified': 1624448795000, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1548753115, 'pageTitle': 'Dummyville', 'pageType': 'page', 'subType': None, 'parentPageId': 212476235, 'parentPageTitle': 'Martin Bomar Sandbox', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1227422648, 'ownerName': 'Martin Bolaños', 'owners': [{'id': 1227422648, 'type': 'USER', 'displayName': 'Martin Bolaños'}], 'locked': True, 'lastModified': 1671694944812, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 737881334, 'pageTitle': 'Dynamic Governance: Example Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 178731478, 'ownerName': 'Carlos Kemeny', 'owners': [{'id': 178731478, 'type': 'USER', 'displayName': 'Carlos Kemeny'}], 'locked': False, 'lastModified': 1644385151408, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1630662371, 'pageTitle': \"Elliott's Fantastic Sales Dashboard\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1710790815911, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1077211922, 'pageTitle': 'EMPTY - DELETE', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1684555951854, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 544279411, 'pageTitle': 'EMPTY - DELETE', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1684555989298, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 635561711, 'pageTitle': 'EMPTY - DELETE', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1683755400423, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 465954796, 'pageTitle': 'Estimate Price Change', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345737456, 'ownerName': 'Aditya Jain', 'owners': [{'id': 1345737456, 'type': 'USER', 'displayName': 'Aditya Jain'}], 'locked': True, 'lastModified': 1650133077110, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 547915291, 'pageTitle': 'ETL Design', 'pageType': 'page', 'subType': None, 'parentPageId': 14286455, 'parentPageTitle': 'Videos', 'topPageId': 2025153595, 'topPageTitle': 'Grant Smith', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693786599454, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1450021064, 'pageTitle': 'Example Sales', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1710808295401, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 206692396, 'pageTitle': 'Excel', 'pageType': 'page', 'subType': None, 'parentPageId': 212476235, 'parentPageTitle': 'Martin Bomar Sandbox', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1227422648, 'ownerName': 'Martin Bolaños', 'owners': [{'id': 1227422648, 'type': 'USER', 'displayName': 'Martin Bolaños'}], 'locked': True, 'lastModified': 1619029604000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 807886101, 'pageTitle': 'Facebook Ads  Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1167474966, 'pageTitle': 'Fenix.AI Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710134047625, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1514321393, 'pageTitle': 'Fight Club', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 824918681, 'ownerName': 'Tylor Walton', 'owners': [{'id': 824918681, 'type': 'USER', 'displayName': 'Tylor Walton'}], 'locked': False, 'lastModified': 1688069642931, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 829936442, 'pageTitle': 'Filter Tree App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1095515127, 'ownerName': 'Andrew Chaffin', 'owners': [{'id': 1095515127, 'type': 'USER', 'displayName': 'Andrew Chaffin'}], 'locked': False, 'lastModified': 1619623639000, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 677090835, 'pageTitle': 'Filter Views Testing', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 826020125, 'ownerName': 'Ritwik', 'owners': [{'id': 826020125, 'type': 'USER', 'displayName': 'Ritwik'}], 'locked': False, 'lastModified': 1626717119853, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1386300631, 'pageTitle': 'Forecasting / Inline Editor App', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1619168256142, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1510840810, 'pageTitle': 'Form Builder', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}], 'locked': False, 'lastModified': 1617985074000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 645171337, 'pageTitle': 'Form Builder', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 826020125, 'ownerName': 'Ritwik', 'owners': [{'id': 826020125, 'type': 'USER', 'displayName': 'Ritwik'}], 'locked': True, 'lastModified': 1617954391244, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1067418640, 'pageTitle': 'Form Builder', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345102715, 'ownerName': 'McWayne Mumford', 'owners': [{'id': 1345102715, 'type': 'USER', 'displayName': 'McWayne Mumford'}], 'locked': True, 'lastModified': 1665084692716, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1166746846, 'pageTitle': 'FORM BUILDER - DELETE', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1683811492000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1130472, 'pageTitle': 'Fun Sample Cards', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1605645475000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 323350229, 'pageTitle': 'Fun Sample Datasets', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1589995322332, 'cardCount': 24, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1891382078, 'pageTitle': 'Fun Stuff', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1605290314000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1156772239, 'pageTitle': 'GA3 to GA4 Transition', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1693845365419, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1910242641, 'pageTitle': 'Games!', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693537184362, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1175021108, 'pageTitle': 'Google Analytics Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 231887518, 'pageTitle': 'Google Analytics Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710113027000, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1643806320, 'pageTitle': 'Google Drive Iframe App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1673655392000, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2025153595, 'pageTitle': 'Grant Smith', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1695211197416, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 98412364, 'pageTitle': 'GrantSmith', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693786510795, 'cardCount': 23, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 899492706, 'pageTitle': 'Heat maps', 'pageType': 'page', 'subType': None, 'parentPageId': 1714911359, 'parentPageTitle': 'Interesting ways to use...', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1622208575247, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 96678585, 'pageTitle': 'Hidden Gem Cards', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1710455975578, 'cardCount': 23, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1018018941, 'pageTitle': 'How Should we manage this monster?', 'pageType': 'page', 'subType': None, 'parentPageId': 1845973736, 'parentPageTitle': 'DomoStats Activity Log', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1588961260691, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 678273064, 'pageTitle': 'HTML Links Dropdown Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1504906779, 'ownerName': 'Carla Valerio', 'owners': [{'id': 1504906779, 'type': 'USER', 'displayName': 'Carla Valerio'}], 'locked': False, 'lastModified': 1688655227852, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1628098182, 'pageTitle': 'HTML Links Dropdown Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1708371440224, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1904890087, 'pageTitle': 'HTML Table Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710133282959, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 974536237, 'pageTitle': 'HV - Major DOMO - Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 453523183, 'ownerName': 'Hemangi Vibhute', 'owners': [{'id': 453523183, 'type': 'USER', 'displayName': 'Hemangi Vibhute'}], 'locked': False, 'lastModified': 1698829526447, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 153363555, 'pageTitle': 'Ideas Conference - Beast Modes', 'pageType': 'page', 'subType': None, 'parentPageId': 98412364, 'parentPageTitle': 'GrantSmith', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1705145842122, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1853369371, 'pageTitle': 'inflation-Inline category', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 152768850, 'ownerName': 'Heath Pulham', 'owners': [{'id': 152768850, 'type': 'USER', 'displayName': 'Heath Pulham'}, {'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}], 'locked': False, 'lastModified': 1700519733335, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 524319280, 'pageTitle': 'Inline Editing', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345102715, 'ownerName': 'McWayne Mumford', 'owners': [{'id': 1345102715, 'type': 'USER', 'displayName': 'McWayne Mumford'}], 'locked': True, 'lastModified': 1665084690066, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1873244253, 'pageTitle': 'Inline Editing', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1620718582000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 258777923, 'pageTitle': 'Instance Governance Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 38, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1213767347, 'pageTitle': 'Instance Maintenance', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1704838149083, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 332686339, 'pageTitle': 'Instance Objects', 'pageType': 'page', 'subType': None, 'parentPageId': 991825150, 'parentPageTitle': 'Domo MetaData', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1606145965096, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1007334884, 'pageTitle': 'Interactive Mapbox Markers Brick', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1683324830973, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1714911359, 'pageTitle': 'Interesting ways to use...', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1604681231000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 670333230, 'pageTitle': 'INTERMEDIATE - Domo Hackers United!', 'pageType': 'page', 'subType': None, 'parentPageId': 1454308902, 'parentPageTitle': 'NPO | OCT 2023 Cohort', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1083820495, 'pageTitle': 'INTERMEDIATE - Domo Hackers United!', 'pageType': 'page', 'subType': None, 'parentPageId': 567245841, 'parentPageTitle': 'NPO | NOV 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1700576662135, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1747582918, 'pageTitle': 'Intermediate - Domo Hackers United!', 'pageType': 'page', 'subType': None, 'parentPageId': 1013767673, 'parentPageTitle': 'JJ Jarnagin Test OCT2023', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1697398038000, 'cardCount': 35, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2026330820, 'pageTitle': 'Intermediate 1 - Add More Reps', 'pageType': 'page', 'subType': None, 'parentPageId': 1094968405, 'parentPageTitle': 'DCO | August 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1691679154011, 'cardCount': 30, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 799238740, 'pageTitle': 'Intermediate 2 - Put Next Store', 'pageType': 'page', 'subType': None, 'parentPageId': 1094968405, 'parentPageTitle': 'DCO | August 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1691514713018, 'cardCount': 29, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1531542243, 'pageTitle': 'J.', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 824918681, 'ownerName': 'Tylor Walton', 'owners': [{'id': 824918681, 'type': 'USER', 'displayName': 'Tylor Walton'}], 'locked': False, 'lastModified': 1704300989424, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 950564020, 'pageTitle': \"Jack's Practice Dash\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 308013573, 'ownerName': 'Jack Crandall', 'owners': [{'id': 308013573, 'type': 'USER', 'displayName': 'Jack Crandall'}], 'locked': False, 'lastModified': 1687896558327, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 127044793, 'pageTitle': 'JaeW_AtOnyx', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1646418322716, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2134836074, 'pageTitle': 'Jason A - Copy of Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1684866413925, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1674806177, 'pageTitle': \"Jason's Jean Co.\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1680123749518, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 293045580, 'pageTitle': 'JasonAltenburg Weather Dashboard v1', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1684556067236, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 182576862, 'pageTitle': 'JasonAltenburg Weather Dashboard v2', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1684622846174, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1179140543, 'pageTitle': 'JasonAltenburg Weather Dashboard v3', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1684977402788, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1723270506, 'pageTitle': \"Jay A's Sandbox\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1665546024121, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1013767673, 'pageTitle': 'JJ Jarnagin Test OCT2023', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1698335995304, 'cardCount': 34, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 845126519, 'pageTitle': 'JJ Test: Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 170736805, 'ownerName': 'josh lee', 'owners': [{'id': 170736805, 'type': 'USER', 'displayName': 'josh lee'}], 'locked': True, 'lastModified': 1690569994557, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 668128106, 'pageTitle': \"Justin's Test Page\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1141078945, 'ownerName': 'Justin Pumford', 'owners': [{'id': 1141078945, 'type': 'USER', 'displayName': 'Justin Pumford'}], 'locked': False, 'lastModified': 1618369160000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1808726303, 'pageTitle': 'kn', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 421800440, 'ownerName': 'Kaylee Nallan', 'owners': [{'id': 421800440, 'type': 'USER', 'displayName': 'Kaylee Nallan'}], 'locked': False, 'lastModified': 1708351594296, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 860747614, 'pageTitle': 'KRT Testing', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 844044381, 'ownerName': 'Katerina Rivera', 'owners': [{'id': 844044381, 'type': 'USER', 'displayName': 'Katerina Rivera'}], 'locked': False, 'lastModified': 1702912644603, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 468292545, 'pageTitle': 'Labor Statistics  Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': False, 'lastModified': 1664926915000, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 752122753, 'pageTitle': 'LandingPage', 'pageType': 'page', 'subType': None, 'parentPageId': 754581154, 'parentPageTitle': 'DDX Bricks Examples', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1684451878429, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 522373865, 'pageTitle': 'Learn Domo', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1589107842636, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 682992709, 'pageTitle': 'LLM Testing', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1728973208, 'ownerName': 'Peter Shull', 'owners': [{'id': 1728973208, 'type': 'USER', 'displayName': 'Peter Shull'}], 'locked': False, 'lastModified': 1709835985226, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1488967104, 'pageTitle': 'Magic ETL ERROR', 'pageType': 'page', 'subType': None, 'parentPageId': 14286455, 'parentPageTitle': 'Videos', 'topPageId': 2025153595, 'topPageTitle': 'Grant Smith', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1695183198206, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1383443237, 'pageTitle': 'Magic ETL Tiles', 'pageType': 'page', 'subType': None, 'parentPageId': 965980384, 'parentPageTitle': 'Domo Knowledge and Reference Materials', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1593700929085, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1008358638, 'pageTitle': 'Major Domo Certification 2.0', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1623944867000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2147023786, 'pageTitle': 'Mapbox Markers Map', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 699075231, 'ownerName': 'Mark Snodgrass', 'owners': [{'id': 699075231, 'type': 'USER', 'displayName': 'Mark Snodgrass'}], 'locked': False, 'lastModified': 1683337016264, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 930807944, 'pageTitle': 'March Madness Data Analysis by Jonathan Pilafas', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1334846498, 'ownerName': 'Jonathan Pilafas', 'owners': [{'id': 1334846498, 'type': 'USER', 'displayName': 'Jonathan Pilafas'}], 'locked': False, 'lastModified': 1710862196266, 'cardCount': 49, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1642445256, 'pageTitle': 'Marketing Calendar Demo', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 204012057, 'ownerName': 'DuncanDomo', 'owners': [{'id': 204012057, 'type': 'USER', 'displayName': 'DuncanDomo'}], 'locked': True, 'lastModified': 1620398948810, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 212476235, 'pageTitle': 'Martin Bomar Sandbox', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1227422648, 'ownerName': 'Martin Bolaños', 'owners': [{'id': 1227422648, 'type': 'USER', 'displayName': 'Martin Bolaños'}], 'locked': True, 'lastModified': 1671694760111, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 189454818, 'pageTitle': 'MattNewsomCloned', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1229264718, 'ownerName': 'Matthew Newsom', 'owners': [{'id': 1229264718, 'type': 'USER', 'displayName': 'Matthew Newsom'}], 'locked': False, 'lastModified': 1622573513000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1808465079, 'pageTitle': 'MattNewsomTest', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1229264718, 'ownerName': 'Matthew Newsom', 'owners': [{'id': 1229264718, 'type': 'USER', 'displayName': 'Matthew Newsom'}], 'locked': False, 'lastModified': 1621367154554, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1503117524, 'pageTitle': 'Merry Christmas ya filthy animal', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1965815240, 'ownerName': 'Colemen Wilson', 'owners': [{'id': 1965815240, 'type': 'USER', 'displayName': 'Colemen Wilson'}], 'locked': True, 'lastModified': 1704835637665, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 6633771, 'pageTitle': 'MetaData', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1645671419075, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1050465610, 'pageTitle': 'MetaData Table Info and QA', 'pageType': 'page', 'subType': None, 'parentPageId': 991825150, 'parentPageTitle': 'Domo MetaData', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1590171147000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 968642461, 'pageTitle': \"Mike's Domo Variables Use Cases\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1548628586, 'ownerName': 'Mike Zollinger', 'owners': [{'id': 1548628586, 'type': 'USER', 'displayName': 'Mike Zollinger'}], 'locked': True, 'lastModified': 1672773690617, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 919563310, 'pageTitle': 'Monroe Michigan Weather Data', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1698788099729, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1392618870, 'pageTitle': 'Multiple Card Same Filter Diff Values - Invalid', 'pageType': 'page', 'subType': None, 'parentPageId': 98412364, 'parentPageTitle': 'GrantSmith', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1656588826298, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 603775261, 'pageTitle': 'NC test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1769260964, 'ownerName': 'Nick Celis', 'owners': [{'id': 1769260964, 'type': 'USER', 'displayName': 'Nick Celis'}], 'locked': False, 'lastModified': 1702402522535, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1148061566, 'pageTitle': 'NCAA Bowl Games', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1334846498, 'ownerName': 'Jonathan Pilafas', 'owners': [{'id': 1334846498, 'type': 'USER', 'displayName': 'Jonathan Pilafas'}], 'locked': False, 'lastModified': 1706209226611, 'cardCount': 29, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1144548940, 'pageTitle': 'New Feature Releases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1617803940484, 'cardCount': 28, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 510963237, 'pageTitle': 'New Power User Orientation (NPO)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1701092171475, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1078734558, 'pageTitle': 'NPO - IPG | OCT 2023', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}, {'id': 795553497, 'type': 'USER', 'displayName': 'Miles Herleikson'}], 'locked': True, 'lastModified': 1697469883548, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 401427654, 'pageTitle': 'NPO - UCG | NOV 2023', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}, {'id': 1180517272, 'type': 'USER', 'displayName': 'Paige Farmer'}], 'locked': False, 'lastModified': 1700082333292, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 909347565, 'pageTitle': 'NPO Wireframe Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1887815107, 'parentPageTitle': 'Session 1: Journey Overview & Data Visualization', 'topPageId': 307648701, 'topPageTitle': 'Domo Customer Orientation  (DCO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}], 'locked': False, 'lastModified': 1705422842613, 'cardCount': 14, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 567245841, 'pageTitle': 'NPO | NOV 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1700161595642, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1454308902, 'pageTitle': 'NPO | OCT 2023 Cohort', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705422727000, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1374726359, 'pageTitle': 'NPO | Session Content 2023', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1705425646480, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 595708801, 'pageTitle': 'Oleksii_DDX', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 612085674, 'ownerName': 'Oleksii Zakrevskyi', 'owners': [{'id': 612085674, 'type': 'USER', 'displayName': 'Oleksii Zakrevskyi'}], 'locked': False, 'lastModified': 1685016264619, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 812089917, 'pageTitle': 'Orientation App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1675113975691, 'cardCount': 9, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 429731019, 'pageTitle': 'Overview Dashboard (EXAMPLE)', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1675212632943, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1420852234, 'pageTitle': 'OWID', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1752469262, 'ownerName': 'Jesus Gonzalez', 'owners': [{'id': 1752469262, 'type': 'USER', 'displayName': 'Jesus Gonzalez'}], 'locked': False, 'lastModified': 1701808234498, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 447616430, 'pageTitle': 'Pacing Graph', 'pageType': 'page', 'subType': None, 'parentPageId': 14286455, 'parentPageTitle': 'Videos', 'topPageId': 2025153595, 'topPageTitle': 'Grant Smith', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1696805342128, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 345655662, 'pageTitle': 'Period over Period Analysis', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 316139172, 'ownerName': 'Matt Tannyhill', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}], 'locked': False, 'lastModified': 1667249058765, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1441021503, 'pageTitle': 'Project NBA | Swish Central', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 29257675, 'ownerName': 'Shivam Desai', 'owners': [{'id': 29257675, 'type': 'USER', 'displayName': 'Shivam Desai'}], 'locked': False, 'lastModified': 1707777892019, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2019305877, 'pageTitle': 'Projection Graph', 'pageType': 'page', 'subType': None, 'parentPageId': 14286455, 'parentPageTitle': 'Videos', 'topPageId': 2025153595, 'topPageTitle': 'Grant Smith', 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1696805317232, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 377658733, 'pageTitle': 'PUG Meetings', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1595438295363, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2079289001, 'pageTitle': 'QC and Dev', 'pageType': 'page', 'subType': None, 'parentPageId': 790951325, 'parentPageTitle': 'Coronavirus (COVID-19) Dashboard', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1594654292779, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 790096479, 'pageTitle': 'QuickBooks On-Premise Insights Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 25, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1985531500, 'pageTitle': 'QuickBooks Online Reports QuickStart', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 19, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1588874667, 'pageTitle': 'QuickStarts', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868129000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1124898205, 'pageTitle': 'Quotes', 'pageType': 'page', 'subType': None, 'parentPageId': 1891382078, 'parentPageTitle': 'Fun Stuff', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1623956017727, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 634091529, 'pageTitle': 'Random Choice', 'pageType': 'page', 'subType': None, 'parentPageId': 2025153595, 'parentPageTitle': 'Grant Smith', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1695223122558, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1614526342, 'pageTitle': 'Resource Sandbox', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1678815657811, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 926623780, 'pageTitle': 'Retail Sales Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1420612807, 'ownerName': 'Antoinette Aburime', 'owners': [{'id': 1420612807, 'type': 'USER', 'displayName': 'Antoinette Aburime'}], 'locked': False, 'lastModified': 1694389409405, 'cardCount': 8, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1090403220, 'pageTitle': 'RMG Test vizual', 'pageType': 'page', 'subType': None, 'parentPageId': 2037415261, 'parentPageTitle': 'Session 2: Data Transformation', 'topPageId': 307648701, 'topPageTitle': 'Domo Customer Orientation  (DCO)', 'ownerId': 1028430812, 'ownerName': 'Robert Gonsalves', 'owners': [{'id': 1028430812, 'type': 'USER', 'displayName': 'Robert Gonsalves'}], 'locked': False, 'lastModified': 1681413624557, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 878288271, 'pageTitle': 'Salesforce Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710123268000, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1665787542, 'pageTitle': 'Sample Sales Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 148885605, 'ownerName': 'Jeff Hart', 'owners': [{'id': 148885605, 'type': 'USER', 'displayName': 'Jeff Hart'}], 'locked': False, 'lastModified': 1693228932988, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1788063875, 'pageTitle': 'scott', 'pageType': 'page', 'subType': None, 'parentPageId': 336739142, 'parentPageTitle': 'Beginner - Domo Newbs For The Win!', 'topPageId': 1094968405, 'topPageTitle': 'DCO | August 2023 Cohort', 'ownerId': 1844820961, 'ownerName': 'Scott Soderstrom', 'owners': [{'id': 1844820961, 'type': 'USER', 'displayName': 'Scott Soderstrom'}], 'locked': False, 'lastModified': 1691348593324, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1055094721, 'pageTitle': \"Scott's CRM APP\", 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 819498402, 'ownerName': 'Scott Hillman', 'owners': [{'id': 819498402, 'type': 'USER', 'displayName': 'Scott Hillman'}], 'locked': False, 'lastModified': 1666201742925, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 977080186, 'pageTitle': 'Scott: Domo Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1627644702, 'ownerName': 'Scott Sheffield', 'owners': [{'id': 1627644702, 'type': 'USER', 'displayName': 'Scott Sheffield'}], 'locked': True, 'lastModified': 1670280140617, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1222214176, 'pageTitle': 'SDKs', 'pageType': 'page', 'subType': None, 'parentPageId': 531423275, 'parentPageTitle': 'Domo APIs', 'topPageId': 109096720, 'topPageTitle': 'Domo IDEA Exchange', 'ownerId': 1158827447, 'ownerName': 'Ken Boyer', 'owners': [{'id': 1158827447, 'type': 'USER', 'displayName': 'Ken Boyer'}], 'locked': False, 'lastModified': 1619018517409, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 773431367, 'pageTitle': 'Segments', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1746885226, 'ownerName': 'Jacob Folsom', 'owners': [{'id': 1746885226, 'type': 'USER', 'displayName': 'Jacob Folsom'}], 'locked': False, 'lastModified': 1673631035745, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1086411646, 'pageTitle': 'Sensei Retreat', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1662126217876, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1549349274, 'pageTitle': 'Session 1: Intro, Data Vizualization, Wireframe', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705424783721, 'cardCount': 13, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1887815107, 'pageTitle': 'Session 1: Journey Overview & Data Visualization', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1694033283280, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2037415261, 'pageTitle': 'Session 2: Data Transformation', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1692735219687, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 237406695, 'pageTitle': 'Session 2: Data Transformation', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705422370033, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1363798332, 'pageTitle': 'Session 3: Success Strategies', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1693516605448, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1800739432, 'pageTitle': 'Session 3: Success Strategies', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705531745572, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 869977478, 'pageTitle': 'Session 4: Projects, Domo Community/Education', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705422370033, 'cardCount': 9, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 519776547, 'pageTitle': 'Session 4: Review and Additional Topics', 'pageType': 'page', 'subType': None, 'parentPageId': 307648701, 'parentPageTitle': 'Domo Customer Orientation  (DCO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1691676030127, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1833013876, 'pageTitle': 'Shopify  Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 374351178, 'pageTitle': 'Snotel Data', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 152768850, 'ownerName': 'Heath Pulham', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}, {'id': 152768850, 'type': 'USER', 'displayName': 'Heath Pulham'}], 'locked': False, 'lastModified': 1700519649156, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1156223033, 'pageTitle': 'Snotel Data Page2', 'pageType': 'page', 'subType': None, 'parentPageId': 374351178, 'parentPageTitle': 'Snotel Data', 'topPageId': None, 'topPageTitle': None, 'ownerId': 152768850, 'ownerName': 'Heath Pulham', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}, {'id': 152768850, 'type': 'USER', 'displayName': 'Heath Pulham'}], 'locked': False, 'lastModified': 1700519649156, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1266966722, 'pageTitle': 'Snotel Draft', 'pageType': 'page', 'subType': None, 'parentPageId': 374351178, 'parentPageTitle': 'Snotel Data', 'topPageId': None, 'topPageTitle': None, 'ownerId': 152768850, 'ownerName': 'Heath Pulham', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}, {'id': 152768850, 'type': 'USER', 'displayName': 'Heath Pulham'}], 'locked': False, 'lastModified': 1700519649156, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 253329941, 'pageTitle': 'Snotel-Sandbox/monitoring', 'pageType': 'page', 'subType': None, 'parentPageId': 374351178, 'parentPageTitle': 'Snotel Data', 'topPageId': None, 'topPageTitle': None, 'ownerId': 152768850, 'ownerName': 'Heath Pulham', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}, {'id': 152768850, 'type': 'USER', 'displayName': 'Heath Pulham'}], 'locked': False, 'lastModified': 1700519649156, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 746348664, 'pageTitle': 'Snowflake Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1675197672436, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 30660498, 'pageTitle': 'Stock Ticker Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 795553497, 'ownerName': 'Miles Herleikson', 'owners': [{'id': 795553497, 'type': 'USER', 'displayName': 'Miles Herleikson'}], 'locked': False, 'lastModified': 1697725939575, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1777803864, 'pageTitle': 'ST_-Superman-_', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1686930230205, 'cardCount': 39, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 434475642, 'pageTitle': 'Success Strategy', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1675111637261, 'cardCount': 18, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1415343138, 'pageTitle': 'Success Strategy - New', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1698145636083, 'cardCount': 27, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 300905330, 'pageTitle': 'SugarCRM QuickStart', 'pageType': 'page', 'subType': None, 'parentPageId': 1588874667, 'parentPageTitle': 'QuickStarts', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1620868282000, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1494415973, 'pageTitle': 'Team 1', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1685031752983, 'cardCount': 41, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 11871210, 'pageTitle': 'Team 2', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1685030743258, 'cardCount': 23, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 933112254, 'pageTitle': 'Team 3', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1685029984879, 'cardCount': 36, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1522631363, 'pageTitle': 'Team 4', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1684434617869, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 516013560, 'pageTitle': 'team 5', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1683220430046, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 837158926, 'pageTitle': 'Team 5', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1684963777858, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 238733615, 'pageTitle': 'Team 6 (CY)', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1432566836, 'ownerName': 'Claire Yang', 'owners': [{'id': 1432566836, 'type': 'USER', 'displayName': 'Claire Yang'}], 'locked': False, 'lastModified': 1685603098523, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 9931957, 'pageTitle': 'Team Alpha - Advanced', 'pageType': 'page', 'subType': None, 'parentPageId': 2077317919, 'parentPageTitle': 'DCO | June 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1698331279568, 'cardCount': 56, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 804545937, 'pageTitle': 'Team Bravo - Intermediate', 'pageType': 'page', 'subType': None, 'parentPageId': 2077317919, 'parentPageTitle': 'DCO | June 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1687960667000, 'cardCount': 24, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 65746507, 'pageTitle': 'Team Charlie - Beginner', 'pageType': 'page', 'subType': None, 'parentPageId': 2077317919, 'parentPageTitle': 'DCO | June 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1687968900085, 'cardCount': 17, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 699546659, 'pageTitle': 'Team DashBoard', 'pageType': 'page', 'subType': None, 'parentPageId': 1078734558, 'parentPageTitle': 'NPO - IPG | OCT 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 958797472, 'ownerName': 'Cameron Brader', 'owners': [{'id': 958797472, 'type': 'USER', 'displayName': 'Cameron Brader'}], 'locked': False, 'lastModified': 1697623780885, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2032778184, 'pageTitle': 'Teams by Region', 'pageType': 'page', 'subType': None, 'parentPageId': 1083820495, 'parentPageTitle': 'INTERMEDIATE - Domo Hackers United!', 'topPageId': 567245841, 'topPageTitle': 'NPO | NOV 2023 Cohort', 'ownerId': 1800882529, 'ownerName': 'Kethra Keeling', 'owners': [{'id': 1800882529, 'type': 'USER', 'displayName': 'Kethra Keeling'}], 'locked': False, 'lastModified': 1699553157679, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 654717844, 'pageTitle': 'TED Talks', 'pageType': 'page', 'subType': None, 'parentPageId': 1891382078, 'parentPageTitle': 'Fun Stuff', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1605290351000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1094761327, 'pageTitle': 'Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 694942127, 'ownerName': 'Chris Wright', 'owners': [{'id': 694942127, 'type': 'USER', 'displayName': 'Chris Wright'}], 'locked': False, 'lastModified': 1661208515941, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 134967361, 'pageTitle': 'Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1420612807, 'ownerName': 'Antoinette Aburime', 'owners': [{'id': 1420612807, 'type': 'USER', 'displayName': 'Antoinette Aburime'}], 'locked': False, 'lastModified': 1694226684610, 'cardCount': 3, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 743219696, 'pageTitle': 'test', 'pageType': 'page', 'subType': None, 'parentPageId': 397911082, 'parentPageTitle': 'Ashleigh Stevenson', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1768567034, 'ownerName': 'Ashleigh Stevenson', 'owners': [{'id': 1768567034, 'type': 'USER', 'displayName': 'Ashleigh Stevenson'}], 'locked': False, 'lastModified': 1706019120622, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1643821490, 'pageTitle': 'Test', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1788357829, 'ownerName': 'Amanda Rose', 'owners': [{'id': 1788357829, 'type': 'USER', 'displayName': 'Amanda Rose'}], 'locked': False, 'lastModified': 1690908757713, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 337016953, 'pageTitle': 'Test Dashboard -HV', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 453523183, 'ownerName': 'Hemangi Vibhute', 'owners': [{'id': 453523183, 'type': 'USER', 'displayName': 'Hemangi Vibhute'}], 'locked': False, 'lastModified': 1699271792816, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 5831754, 'pageTitle': 'Test Page', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1605645664303, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1482719903, 'pageTitle': 'Test Variables', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 68216396, 'ownerName': 'Elliott Leonard', 'owners': [{'id': 68216396, 'type': 'USER', 'displayName': 'Elliott Leonard'}], 'locked': False, 'lastModified': 1657253695668, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1755881138, 'pageTitle': 'TestPage', 'pageType': 'page', 'subType': None, 'parentPageId': 595708801, 'parentPageTitle': 'Oleksii_DDX', 'topPageId': None, 'topPageTitle': None, 'ownerId': 612085674, 'ownerName': 'Oleksii Zakrevskyi', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}, {'id': 612085674, 'type': 'USER', 'displayName': 'Oleksii Zakrevskyi'}], 'locked': False, 'lastModified': 1711216186898, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1149651520, 'pageTitle': 'Test_betas', 'pageType': 'page', 'subType': None, 'parentPageId': 522373865, 'parentPageTitle': 'Learn Domo', 'topPageId': None, 'topPageTitle': None, 'ownerId': 74259340, 'ownerName': 'Miguel Vian', 'owners': [{'id': 74259340, 'type': 'USER', 'displayName': 'Miguel Vian'}], 'locked': False, 'lastModified': 1619102325157, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 225044251, 'pageTitle': 'Text Analytics', 'pageType': 'page', 'subType': None, 'parentPageId': 109096720, 'parentPageTitle': 'Domo IDEA Exchange', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1619168621534, 'cardCount': 13, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1896940310, 'pageTitle': 'Ticket Data', 'pageType': 'page', 'subType': None, 'parentPageId': 212476235, 'parentPageTitle': 'Martin Bomar Sandbox', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1227422648, 'ownerName': 'Martin Bolaños', 'owners': [{'id': 1227422648, 'type': 'USER', 'displayName': 'Martin Bolaños'}], 'locked': False, 'lastModified': 1688657761857, 'cardCount': 4, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 950006533, 'pageTitle': 'Time Zone Handling', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1671216864230, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1109905686, 'pageTitle': 'Top 5', 'pageType': 'page', 'subType': None, 'parentPageId': 127044793, 'parentPageTitle': 'JaeW_AtOnyx', 'topPageId': 522373865, 'topPageTitle': 'Learn Domo', 'ownerId': 1893952720, 'ownerName': 'Jae Wilson1', 'owners': [{'id': 1893952720, 'type': 'USER', 'displayName': 'Jae Wilson1'}], 'locked': False, 'lastModified': 1705145842122, 'cardCount': 35, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 589218925, 'pageTitle': 'Training and Resource Sites', 'pageType': 'page', 'subType': None, 'parentPageId': 1891382078, 'parentPageTitle': 'Fun Stuff', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1605290376000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1627914317, 'pageTitle': 'UCG Team Dashboard', 'pageType': 'page', 'subType': None, 'parentPageId': 401427654, 'parentPageTitle': 'NPO - UCG | NOV 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1699550562250, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1097775916, 'pageTitle': 'Ugly Dashboard Contest', 'pageType': 'page', 'subType': None, 'parentPageId': 2025153595, 'parentPageTitle': 'Grant Smith', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1700187556599, 'cardCount': 39, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 685692907, 'pageTitle': 'Use Case Explorer', 'pageType': 'page', 'subType': None, 'parentPageId': 1415343138, 'parentPageTitle': 'Success Strategy - New', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 56701816, 'pageTitle': 'Use Case Explorer', 'pageType': 'page', 'subType': None, 'parentPageId': 434475642, 'parentPageTitle': 'Success Strategy', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1675118980790, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 522553646, 'pageTitle': 'User Activity', 'pageType': 'page', 'subType': None, 'parentPageId': 6633771, 'parentPageTitle': 'MetaData', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1702063813943, 'cardCount': 6, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 130239524, 'pageTitle': 'User Activity - Community Instance', 'pageType': 'page', 'subType': None, 'parentPageId': 6633771, 'parentPageTitle': 'MetaData', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1702673706727, 'cardCount': 10, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 971060206, 'pageTitle': 'Using Domo Stories', 'pageType': 'page', 'subType': None, 'parentPageId': 1613954604, 'parentPageTitle': '_-ST Superman-_', 'topPageId': 1008358638, 'topPageTitle': 'Major Domo Certification 2.0', 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1624034357000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 575105882, 'pageTitle': 'Variable List Selector Problem Demo', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 918118628, 'ownerName': 'Jason Altenburg', 'owners': [{'id': 918118628, 'type': 'USER', 'displayName': 'Jason Altenburg'}], 'locked': True, 'lastModified': 1687821480844, 'cardCount': 15, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1302569833, 'pageTitle': 'Variables & Tables', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 826020125, 'ownerName': 'Ritwik', 'owners': [{'id': 826020125, 'type': 'USER', 'displayName': 'Ritwik'}], 'locked': False, 'lastModified': 1660161617627, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 684711905, 'pageTitle': 'Variables Use Cases', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1661273859000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 487228324, 'pageTitle': 'Variables: KPI Exploration', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 316139172, 'ownerName': 'Matt Tannyhill', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}], 'locked': True, 'lastModified': 1676663544921, 'cardCount': 9, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 989379127, 'pageTitle': 'Variables: What-if Analysis', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 316139172, 'ownerName': 'Matt Tannyhill', 'owners': [{'id': 316139172, 'type': 'USER', 'displayName': 'Matt Tannyhill'}], 'locked': True, 'lastModified': 1676663705671, 'cardCount': 5, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 14286455, 'pageTitle': 'Videos', 'pageType': 'page', 'subType': None, 'parentPageId': 2025153595, 'parentPageTitle': 'Grant Smith', 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1693786560410, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 138471350, 'pageTitle': 'Virtual User Group', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 55874022, 'ownerName': 'Grant Smith', 'owners': [{'id': 55874022, 'type': 'USER', 'displayName': 'Grant Smith'}], 'locked': False, 'lastModified': 1640664693000, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1617840483, 'pageTitle': 'Visual Vocabulary', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144670646, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1996568735, 'pageTitle': 'Visual Vocabulary: Change over Time', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144833122, 'cardCount': 32, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1368378301, 'pageTitle': 'Visual Vocabulary: Correlation', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144828623, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1215538672, 'pageTitle': 'Visual Vocabulary: Deviation', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144814322, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 2003640986, 'pageTitle': 'Visual Vocabulary: Distribution', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144827196, 'cardCount': 14, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1456165816, 'pageTitle': 'Visual Vocabulary: Flow', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144811366, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 408860150, 'pageTitle': 'Visual Vocabulary: Magnitude', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144829293, 'cardCount': 26, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1945719748, 'pageTitle': 'Visual Vocabulary: Part to whole', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144815703, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1204783652, 'pageTitle': 'Visual Vocabulary: Ranking', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666144761721, 'cardCount': 20, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 320788731, 'pageTitle': 'Visual Vocabulary: Spatial', 'pageType': 'page', 'subType': None, 'parentPageId': 1617840483, 'parentPageTitle': 'Visual Vocabulary', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1454491099, 'ownerName': 'Pris Lam', 'owners': [{'id': 1454491099, 'type': 'USER', 'displayName': 'Pris Lam'}], 'locked': True, 'lastModified': 1666218461141, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1498639130, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 401427654, 'parentPageTitle': 'NPO - UCG | NOV 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1699550562250, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 258723114, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 1454308902, 'parentPageTitle': 'NPO | OCT 2023 Cohort', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1705422727000, 'cardCount': 31, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1747303132, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 1094968405, 'parentPageTitle': 'DCO | August 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1695135657403, 'cardCount': 44, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1952347378, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 511294352, 'parentPageTitle': 'DCO | May 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1685602159000, 'cardCount': 24, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1220517618, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 2077317919, 'parentPageTitle': 'DCO | June 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1687367452569, 'cardCount': 43, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 246997142, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 456498696, 'parentPageTitle': 'ADM DCO June', 'topPageId': None, 'topPageTitle': None, 'ownerId': 824918681, 'ownerName': 'Tylor Walton', 'owners': [{'id': 824918681, 'type': 'USER', 'displayName': 'Tylor Walton'}], 'locked': False, 'lastModified': 1686260967344, 'cardCount': 12, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 509457554, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 567245841, 'parentPageTitle': 'NPO | NOV 2023 Cohort', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}], 'locked': False, 'lastModified': 1705422842613, 'cardCount': 33, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 828273481, 'pageTitle': 'Visualization Exercise', 'pageType': 'page', 'subType': None, 'parentPageId': 510963237, 'parentPageTitle': 'New Power User Orientation (NPO)', 'topPageId': None, 'topPageTitle': None, 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}], 'locked': False, 'lastModified': 1705422314296, 'cardCount': 7, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 30507758, 'pageTitle': 'Welcome', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 587894148, 'ownerName': 'Bryan Van Kampen', 'owners': [{'id': 587894148, 'type': 'USER', 'displayName': 'Bryan Van Kampen'}, {'id': 1814479647, 'type': 'GROUP', 'displayName': 'Admin Test'}], 'locked': True, 'lastModified': 1698424571595, 'cardCount': 11, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1076718674, 'pageTitle': 'Wireframe Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1374726359, 'parentPageTitle': 'NPO | Session Content 2023', 'topPageId': 510963237, 'topPageTitle': 'New Power User Orientation (NPO)', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}, {'id': 1599436385, 'type': 'USER', 'displayName': 'Ed Pettersson'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': True, 'lastModified': 1705422370033, 'cardCount': 16, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1911086244, 'pageTitle': 'Wireframe Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1887815107, 'parentPageTitle': 'Session 1: Journey Overview & Data Visualization', 'topPageId': 307648701, 'topPageTitle': 'Domo Customer Orientation  (DCO)', 'ownerId': 617808774, 'ownerName': 'Richard Carey', 'owners': [{'id': 892007656, 'type': 'GROUP', 'displayName': 'DCO Team Guides'}, {'id': 617808774, 'type': 'USER', 'displayName': 'Richard Carey'}], 'locked': False, 'lastModified': 1691580329200, 'cardCount': 14, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 317604589, 'pageTitle': 'Wireframe Example', 'pageType': 'page', 'subType': None, 'parentPageId': 1747303132, 'parentPageTitle': 'Visualization Exercise', 'topPageId': 1094968405, 'topPageTitle': 'DCO | August 2023 Cohort', 'ownerId': 583215149, 'ownerName': 'John Jarnagin', 'owners': [{'id': 583215149, 'type': 'USER', 'displayName': 'John Jarnagin'}], 'locked': False, 'lastModified': 1690918837444, 'cardCount': None, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1416746303, 'pageTitle': 'Workbench Monitoring', 'pageType': 'page', 'subType': None, 'parentPageId': 965980384, 'parentPageTitle': 'Domo Knowledge and Reference Materials', 'topPageId': None, 'topPageTitle': None, 'ownerId': 1345408759, 'ownerName': 'Alexis Lorenz (DataMaven)', 'owners': [{'id': 1345408759, 'type': 'USER', 'displayName': 'Alexis Lorenz (DataMaven)'}], 'locked': False, 'lastModified': 1596482762747, 'cardCount': 2, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 234329609, 'pageTitle': 'YouTube Viewer Demographic App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 453523183, 'ownerName': 'Hemangi Vibhute', 'owners': [{'id': 453523183, 'type': 'USER', 'displayName': 'Hemangi Vibhute'}], 'locked': False, 'lastModified': 1698825150000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 154006713, 'pageTitle': 'YouTube Viewer Demographic App', 'pageType': 'page', 'subType': None, 'parentPageId': None, 'parentPageTitle': None, 'topPageId': None, 'topPageTitle': None, 'ownerId': 263469872, 'ownerName': 'Daniel Ha', 'owners': [{'id': 263469872, 'type': 'USER', 'displayName': 'Daniel Ha'}], 'locked': False, 'lastModified': 1710133852000, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}, {'pageId': 1613954604, 'pageTitle': '_-ST Superman-_', 'pageType': 'page', 'subType': None, 'parentPageId': 1008358638, 'parentPageTitle': 'Major Domo Certification 2.0', 'topPageId': None, 'topPageTitle': None, 'ownerId': 966365811, 'ownerName': 'Scott Thompson', 'owners': [{'id': 966365811, 'type': 'USER', 'displayName': 'Scott Thompson'}], 'locked': False, 'lastModified': 1648738140896, 'cardCount': 1, 'dataAppId': None, 'dataAppTitle': None}], is_success=True, parent_class=None)\n\n\n\nsource\n\n\ndelete_writelock\n\n delete_writelock (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   layout_id:str, debug_api:bool=False)\n\n\nsource\n\n\nput_writelock\n\n put_writelock (auth:domolibrary.client.DomoAuth.DomoAuth, layout_id:str,\n                user_id:str, epoch_time:int, debug_api:bool=False)\n\n\nsource\n\n\nupdate_page_layout\n\n update_page_layout (auth:domolibrary.client.DomoAuth.DomoAuth,\n                     layout_id:str, body:dict, debug_api:bool=False)\n\n\nsource\n\n\nadd_page_owner\n\n add_page_owner (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 page_id_ls:List[int], group_id_ls:List[int],\n                 user_id_ls:List[int], note:str='', send_email:bool=False,\n                 session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\n\n\nSample Add page owner\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\npage_id = \"1755881138\"\nuser_id = \"1893952720\"\nres = await add_page_owner(\n    page_id_ls=[page_id], auth=token_auth, group_id_ls=[], user_id_ls=[user_id]\n)\n\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 16, 'module_index': 12, 'num_stacks_to_drop_passed': 3}\n''",
    "crumbs": [
      "Blog",
      "Routes",
      "Page Routes"
    ]
  },
  {
    "objectID": "routes/grant.html",
    "href": "routes/grant.html",
    "title": "Grant Routes",
    "section": "",
    "text": "source\n\nGetGrants_Error\n\n GetGrants_Error (status, message, domo_instance, function_name)\n\nbase exception\n\nsource\n\n\nget_grants\n\n get_grants (auth:domolibrary.client.DomoAuth.DomoAuth,\n             debug_api:bool=False, session:httpx.AsyncClient=None)\n\n\nsample implementation of get_grants\n\nimport os\nimport pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    domo_instance=\"domo-community\",\n)\n\nres = await get_grants(auth=token_auth)\n\npd.DataFrame(res.response[0:5])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 32, 'module_index': 28, 'num_stacks_to_drop_passed': 3}\n\n\n\n\n\n\n\n\n\n\nauthority\ntitle\ndescription\nauthorityUIGroup\nuserCount\nroleIds\ndependsOnAuthorities\nsystemGroup\n\n\n\n\n0\nauthorization.roles\nManage all roles\nCreate, edit and delete custom roles. Assign a...\nCOMPANY\n27\n[1, 275763436, 810756122]\n[ui.admin]\nTrue\n\n\n1\nauthorization.roles.assign\nAssign users to a role\nAssign users to a role in the allowlist.\nCOMPANY\n27\n[1, 810756122]\n[ui.admin]\nTrue\n\n\n2\nentity.attribute.admin\nManage Certified Attributes\nCreate, edit and delete certified attributes\nCOMPANY\n27\n[1, 810756122]\n[ui.admin]\nTrue\n\n\n3\naudit\nView activity logs\nView and export audit logs.\nCOMPANY\n266\n[1, 275763436, 810756122, 1563101750, 2097317660]\n[ui.admin]\nTrue\n\n\n4\ncustomer.edit\nManage all company settings\nManage company metadata, authentication rules,...\nCOMPANY\n27\n[1, 275763436, 810756122]\n[ui.admin]\nTrue",
    "crumbs": [
      "Blog",
      "Routes",
      "Grant Routes"
    ]
  },
  {
    "objectID": "routes/auth_accesstoken.html",
    "href": "routes/auth_accesstoken.html",
    "title": "Access Token Auth Routes",
    "section": "",
    "text": "User Access Tokens\n\nsource\n\nget_access_tokens\n\n get_access_tokens (auth:domolibrary.client.DomoAuth.DomoAuth,\n                    debug_api:bool=False, debug_num_stacks_to_drop=1,\n                    parent_class=None, session:httpx.AsyncClient=None,\n                    return_raw:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_access_tokens(debug_api=False, auth=token_auth)\n\npd.DataFrame([r for r in res.response if r[\"ownerId\"] == 1216550715])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\nname\nownerId\nownerName\nownerEmail\nexpires\n\n\n\n\n0\n186852\nDL test 2024-03-20\n1216550715\nNone\nNone\n2024-06-18 19:04:57\n\n\n1\n186918\nDL_test\n1216550715\nNone\nNone\n2024-06-21 16:46:38\n\n\n2\n186935\nDL test 2024-03-23\n1216550715\nNone\nNone\n2024-06-21 17:35:40\n\n\n3\n186943\nDL test 2024-03-23\n1216550715\nNone\nNone\n2024-06-21 17:48:21\n\n\n4\n186945\nDL test 2024-03-23\n1216550715\nNone\nNone\n2024-06-21 17:48:29\n\n\n\n\n\n\n\n\n\ngenerate_expiration_unixtimestamp(1, debug_prn=True)\n\nexpiration_date is 1 from today 2024-03-24 12:19:59.835208\n\n\n1711304399000\n\n\n\nsource\n\n\ngenerate_access_token\n\n generate_access_token (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        token_name:str, user_id, duration_in_days:90,\n                        debug_api:bool=False, debug_num_stacks_to_drop=1,\n                        parent_class=None, session:httpx.AsyncClient=None)\n\n\nsource\n\n\nAccessToken_GenerationError\n\n AccessToken_GenerationError (user_id, domo_instance, parent_class,\n                              function_name, message=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres_generate_token = await generate_access_token(\n    user_id=1216550715, duration_in_days=90, token_name=\"DL_test\", auth=token_auth\n)\n\nres_generate_token\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': 186953, 'name': 'DL_test', 'ownerId': 1216550715, 'ownerName': '8:26 - go to sleep', 'ownerEmail': 'test4@domo.com', 'expires': 1718993999000, 'token': 'c44d85c0415c6fdcc22c62c55829b9c68313604f31e6d704'}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\nrevoke_access_token\n\n revoke_access_token (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      access_token_id:int, debug_api:bool=False,\n                      debug_num_stacks_to_drop=1, parent_class=None,\n                      session:httpx.AsyncClient=None)\n\n\nsource\n\n\nAccessToken_RevokeError\n\n AccessToken_RevokeError (access_token_id, domo_instance, parent_class,\n                          function_name)\n\nbase exception\n\naccess_token_id = res_generate_token.response[\"id\"]\n\nawait revoke_access_token(\n    auth=token_auth, access_token_id=access_token_id, debug_api=False\n)\n\nResponseGetData(status=200, response='', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Access Token Auth Routes"
    ]
  },
  {
    "objectID": "routes/jupyter.html",
    "href": "routes/jupyter.html",
    "title": "Jupyter Routes",
    "section": "",
    "text": "![Tutorial Video pt 2 of 4]",
    "crumbs": [
      "Blog",
      "Routes",
      "Jupyter Routes"
    ]
  },
  {
    "objectID": "routes/jupyter.html#crud-routes",
    "href": "routes/jupyter.html#crud-routes",
    "title": "Jupyter Routes",
    "section": "CRUD Routes",
    "text": "CRUD Routes\n\nsource\n\nupdate_jupyter_file\n\n update_jupyter_file (auth:domolibrary.client.DomoAuth.DomoJupyterAuth,\n                      new_content, content_path:str='',\n                      debug_api:bool=False, parent_class:str=None,\n                      debug_num_stacks_to_drop=1,\n                      session:httpx.AsyncClient=None)\n\n\nsample implementation of update_content\n\njupyter_token = \"9meJVc62g4nVWvlD9qdJFgmO3Oxm0r\"\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    workspace_params = await get_workspace_auth_token_params(\n        workspace_id=workspace_id, auth=token_auth\n    )\n    \n    dj_auth = dmda.DomoJupyterTokenAuth.convert_auth(\n        auth=token_auth, jupyter_token=jupyter_token, **workspace_params\n    )\n\n    res = await update_jupyter_file(\n        auth=dj_auth,\n        content_path=\"new_folder\",\n        new_content=None,\n        debug_api=False,\n    )\n\n    res.response\n\n    res = await update_jupyter_file(\n        auth=dj_auth,\n        content_path=f\"new_folder/updated_{dt.date.today()}.txt\",\n        new_content=\"jae is excellent at demoes\",\n        debug_api=False,\n    )\n\n    print(res.response)\n\nexcept (JupyterAPI_Error, JupyterAPI_WorkspaceStarted) as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  JupyterAPI_WorkspaceStarted 🛑 - function: get_jupyter_workspace_by_id || status 200 || There are no open instances. Do you need to start the workspace? at domo-community\n\n\n\n\n\nrecursive get_content\n![Tutorial Video pt 3 of 4]\n\nsource\n\n\nget_content\n\n get_content (auth:domolibrary.client.DomoAuth.DomoJupyterAuth,\n              content_path='', is_recursive:bool=True,\n              is_skip_recent_executions:bool=True,\n              is_skip_default_files:bool=True, return_raw:bool=False,\n              debug_api:bool=False, debug_num_stacks_to_drop=2,\n              parent_class:str=None, session:httpx.AsyncClient=None)\n\n\nsample implementation of get_content_recursive\n\njupyter_token = \"9meJVc62g4nVWvlD9qdJFgmO3Oxm0r\"\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    workspace_params = await get_workspace_auth_token_params(\n        workspace_id=workspace_id, auth=token_auth\n    )\n    \n    dj_auth = dmda.DomoJupyterTokenAuth.convert_auth(\n        auth=token_auth, jupyter_token=jupyter_token, **workspace_params\n    )\n    res = await get_content(\n        auth=dj_auth,\n        debug_api=False,\n        return_raw=True,\n        is_recursive=False,\n        content_path=\"new_folder\",\n    )\n\n    # print(\n    #     \"num_files\",\n    #     len([content for content in res.response if content[\"type\"] != \"directory\"]),\n    # )\n    # pd.DataFrame(res.logs).fillna(0)\n    pd.DataFrame(res.response)\n\nexcept (JupyterAPI_Error, JupyterAPI_WorkspaceStarted ) as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  JupyterAPI_WorkspaceStarted 🛑 - function: get_jupyter_workspace_by_id || status 200 || There are no open instances. Do you need to start the workspace? at domo-community",
    "crumbs": [
      "Blog",
      "Routes",
      "Jupyter Routes"
    ]
  },
  {
    "objectID": "routes/card.html",
    "href": "routes/card.html",
    "title": "Card Routes",
    "section": "",
    "text": "source\n\nCardSearch_NotFoundError\n\n CardSearch_NotFoundError (card_id, domo_instance, function_name, status,\n                           parent_class:str=None, message=None)\n\nbase exception\n\nsource\n\n\nget_kpi_definition\n\n get_kpi_definition (auth:domolibrary.client.DomoAuth.DomoAuth,\n                     card_id:str, debug_api:bool=False,\n                     session:httpx.AsyncClient=None,\n                     parent_class:str=None, debug_num_stacks_to_drop=1)\n\n\nsample implementation of get_card_kpi\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ncard_id = 1766265020\nawait get_kpi_definition(card_id=card_id, auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': 1766265020, 'urn': '1766265020', 'definition': {'subscriptions': {'big_number': {'name': 'big_number', 'columns': [{'column': 'Amount', 'aggregation': 'SUM', 'alias': 'Sum of Amount', 'format': {'type': 'abbreviated', 'format': '#'}}], 'filters': [], 'orderBy': [], 'groupBy': [], 'fiscal': False, 'projection': False, 'distinct': False, 'limit': 1}, 'main': {'name': 'main', 'columns': [{'column': 'Date', 'calendar': True, 'mapping': 'ITEM'}, {'column': 'Amount', 'aggregation': 'SUM', 'mapping': 'VALUE'}, {'column': 'Vendor', 'mapping': 'SERIES'}], 'filters': [], 'dateGrain': {'column': 'Date', 'dateTimeElement': 'DAY'}, 'orderBy': [], 'groupBy': [{'column': 'Vendor'}, {'column': 'Date', 'calendar': True}], 'fiscal': False, 'projection': False, 'distinct': False}}, 'formulas': [], 'conditionalFormats': [], 'annotations': [], 'slicers': [], 'title': 'Vendor Amounts Dates', 'description': '', 'chartVersion': '11', 'charts': {'main': {'component': 'main', 'chartType': 'badge_vert_stackedbar', 'overrides': {}, 'goal': None}}, 'allowTableDrill': True, 'segments': {'active': [], 'definitions': []}, 'modified': 1603811241000}, 'columns': [{'id': 'Date', 'name': 'Date', 'type': 'date', 'isCalculation': False, 'isAggregatable': True, 'isEncrypted': False, 'hidden': False, 'order': 0, 'sourceId': 'fd70d83b-38dc-40a2-9349-357ec4321d3e'}, {'id': 'Vendor', 'name': 'Vendor', 'type': 'string', 'isCalculation': False, 'isAggregatable': True, 'isEncrypted': False, 'hidden': False, 'order': 0, 'sourceId': 'fd70d83b-38dc-40a2-9349-357ec4321d3e'}, {'id': 'Amount', 'name': 'Amount', 'type': 'numeric', 'isCalculation': False, 'isAggregatable': True, 'isEncrypted': False, 'hidden': False, 'order': 0, 'sourceId': 'fd70d83b-38dc-40a2-9349-357ec4321d3e'}], 'drillpath': [], 'embedded': False, 'dataSourceWrite': True}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nget_card_metadata\n\n get_card_metadata (auth:domolibrary.client.DomoAuth.DomoAuth,\n                    card_id:str, debug_api:bool=False,\n                    session:httpx.AsyncClient=None, parent_class:str=None,\n                    debug_num_stacks_to_drop=1)\n\n\nsample implementation of get_card_metadata\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ncard_id = 1766265020\nres = await get_card_metadata(card_id=card_id, auth=token_auth)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'metadata': {'chartType': 'badge_vert_stackedbar',\n  'chartVersion': '7',\n  'currentLabel': 'Sum of Amount',\n  'historyId': 'b9e50cd4-19c8-44f2-a44c-6c72bd432125',\n  'allTime': '{\"groupName\":\"Other\",\"name\":\"DEFAULT\",\"type\":\"Other\",\"selected\":true,\"estimatedSeconds\":-1,\"dateLabel\":\"\",\"column\":\"Date\"}',\n  'calendar': 'default',\n  'columnAliases': '{}',\n  'columnFormats': '{}',\n  'defaultDateGrain': 'Day',\n  'SummaryNumberFormat': '{\"type\":\"number\",\"format\":\"#A\"}'},\n 'owners': [{'id': '1893952720',\n   'type': 'USER',\n   'displayName': 'Jae Wilson1'}],\n 'datasources': [{'dataSourceId': 'fd70d83b-38dc-40a2-9349-357ec4321d3e',\n   'dataSourceName': 'Vendor Amounts Dates',\n   'displayType': 'webform',\n   'dataType': 'webform',\n   'providerType': 'webform',\n   'isSampleData': False,\n   'lastUpdated': 1603767029732,\n   'adc': False,\n   'phase': None,\n   'state': 'SUCCESS'}],\n 'certification': {'state': 'NOT_CERTIFIED', 'adminCertified': False},\n 'urn': '1766265020',\n 'id': 1766265020,\n 'type': 'kpi',\n 'created': 1603811235,\n 'badgeUpdated': 1603811241000,\n 'creatorId': 1893952720,\n 'ownerId': 1893952720,\n 'description': '',\n 'title': 'Vendor Amounts Dates',\n 'active': True,\n 'allowTableDrill': True,\n 'locked': False,\n 'isCurrentUserOwner': True}\n\n\n\nsource\n\n\n\ngenerate_body_search_cards_admin_summary\n\n generate_body_search_cards_admin_summary (page_ids:List[str]=None,\n                                           card_search_text:str=None,\n                                           page_search_text:str=None)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npage_ids\ntyping.List[str]\nNone\n\n\n\ncard_search_text\nstr\nNone\nsearchPages: bool = True,\n\n\npage_search_text\nstr\nNone\n\n\n\nReturns\ndict\n\n\n\n\n\n\nsource\n\n\nsearch_cards_admin_summary\n\n search_cards_admin_summary (auth:domolibrary.client.DomoAuth.DomoAuth,\n                             body:dict, maximum:int=None,\n                             debug_api:bool=False, debug_loop:bool=False,\n                             session:httpx.AsyncClient=None,\n                             wait_sleep:int=3, parent_class:str=None,\n                             debug_num_stacks_to_drop:int=1)\n\n\nsample implementation of search_cards_admin_summary\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nbody = generate_body_search_cards_admin_summary()\n\nprint(body)\n\ncard_id = 1766265020\nres = await search_cards_admin_summary(\n    body=body,\n    maximum=5,\n    auth=token_auth,\n    debug_api=False,\n    debug_loop=False,\n    wait_sleep=5,\n)\n\nres.response[0:5]\n\n{'ascending': True, 'orderBy': 'cardTitle'}\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[{'owners': [{'id': '722128535',\n    'type': 'USER',\n    'displayName': 'Miguel Guedes'}],\n  'id': 332819959,\n  'type': 'kpi',\n  'badgeUpdated': 1632747565000,\n  'title': ' Forecast-Sales_MG',\n  'locked': False,\n  'pageHierarchy': [{'pageId': -100000, 'title': 'Overview'}]},\n {'owners': [{'id': '583215149',\n    'type': 'USER',\n    'displayName': 'John Jarnagin'}],\n  'id': 1582016299,\n  'type': 'document',\n  'badgeUpdated': 1693333789000,\n  'title': \" Incorrect Append - Forecast Column Header Names Don't Match\",\n  'locked': False,\n  'pageHierarchy': [{'pageId': 237406695,\n    'title': 'Session 2: Data Transformation',\n    'parentPageId': 1374726359,\n    'parentPageTitle': 'NPO | Session Content 2023'},\n   {'pageId': 2037415261,\n    'title': 'Session 2: Data Transformation',\n    'parentPageId': 307648701,\n    'parentPageTitle': 'Domo Customer Orientation  (DCO)'}]},\n {'owners': [{'id': '1251168784',\n    'type': 'USER',\n    'displayName': 'Andre Wieczorkiewicz'}],\n  'id': 231472916,\n  'type': 'kpi',\n  'badgeUpdated': 1620397890000,\n  'title': '# Active Users',\n  'locked': False,\n  'pageHierarchy': [{'pageId': 155942344, 'title': 'Copy of Data Stories'}]},\n {'owners': [{'id': '1251168784',\n    'type': 'USER',\n    'displayName': 'Andre Wieczorkiewicz'}],\n  'id': 1025952623,\n  'type': 'kpi',\n  'badgeUpdated': 1620630492000,\n  'title': '# Active Users',\n  'locked': False,\n  'pageHierarchy': [{'pageId': 155942344, 'title': 'Copy of Data Stories'}]},\n {'owners': [{'id': '1251168784',\n    'type': 'USER',\n    'displayName': 'Andre Wieczorkiewicz'}],\n  'id': 391084879,\n  'type': 'kpi',\n  'badgeUpdated': 1620397851000,\n  'title': '# Active Users Today',\n  'locked': False,\n  'pageHierarchy': [{'pageId': 155942344, 'title': 'Copy of Data Stories'}]}]",
    "crumbs": [
      "Blog",
      "Routes",
      "Card Routes"
    ]
  },
  {
    "objectID": "blog/posts/2023-04-14_BackupCards/index.html",
    "href": "blog/posts/2023-04-14_BackupCards/index.html",
    "title": "Automated Card Backup",
    "section": "",
    "text": "a short post on using DomoLibrary to automate dataset tagging\n\nProject Configuration\n\nimport domolibrary.client.DomoAuth as dmda\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait token_auth.get_auth_token()\n\nassert isinstance(token_auth.token, str)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\nGet Cards\n\nimport domolibrary.classes.DomoDatacenter as ddc\nimport pandas as pd\nimport domolibrary.routes.datacenter as datacenter_routes\n\ndomo_datasets = await ddc.DomoDatacenter.search_datasets(\n    auth=token_auth, \n)\n\ndomo_datasets[0:5]\n\n[DomoDataset(id='da552832-c04d-46ac-936a-f982d9d3f2e6', display_type='api', data_provider_type=None, name='SalesProject01_hello world_INT *', description=None, row_count=0, column_count=0, stream_id=None, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['provider_type : api *', 'proj_phase : 01 *', 'proj_name : SalesProject *', 'ds_type : INT *']), certification=DomoCertification(certification_state='certified', last_updated=datetime.datetime(2023, 4, 4, 8, 8, 51, 402000), certification_type='DEPARTMENT', certification_name='Jae Test Certification'), PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7fb348803f70&gt;),\n DomoDataset(id='c3cc5a31-acc5-4999-b76e-2f7580901d2c', display_type='DataFlow', data_provider_type=None, name='DEV | March Madness', description=None, row_count=362, column_count=151, stream_id=None, owner={'id': '1334846498', 'name': 'Jonathan Pilafas', 'type': 'USER', 'group': False}, formula={'calculation_8312f239-7550-43e8-97da-37efdc398e80': {'templateId': 3976, 'id': 'calculation_8312f239-7550-43e8-97da-37efdc398e80', 'name': 'Vulnerable Top 2 Seed?', 'formula': \"CASE \\n\\tWHEN `Team Name` IN ('Iowa State') THEN 'Vulnerable'\\n    ELSE 'Not Vulnerable'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Team Name`', 'columnPosition': 12}], 'variable': False}, 'calculation_f6a237b7-aca5-4123-9680-2719bc646f8c': {'templateId': 3834, 'id': 'calculation_f6a237b7-aca5-4123-9680-2719bc646f8c', 'name': 'Worst Offensive Efficiency', 'formula': 'MIN(`Adjusted Offensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Offensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_162b1390-1fa0-4851-a291-42d665683630': {'templateId': 3920, 'id': 'calculation_162b1390-1fa0-4851-a291-42d665683630', 'name': '3PA + 3P%', 'formula': \"CASE \\n\\tWHEN `FG3Rate` &gt;= 30.0 AND `FG3Rate` &lt;= 50.0 AND `FG3Pct` &gt;= 35.0 THEN 'Best'\\n    ELSE 'Not The Best'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`FG3Rate`', 'columnPosition': 12}, {'columnName': '`FG3Rate`', 'columnPosition': 34}, {'columnName': '`FG3Pct`', 'columnPosition': 56}], 'variable': False}, 'calculation_a16a31be-17d3-480b-9eaa-26d0edec7849': {'templateId': 3865, 'id': 'calculation_a16a31be-17d3-480b-9eaa-26d0edec7849', 'name': 'Power 6 Conference Flag', 'formula': \"CASE \\n\\tWHEN `Conference` IN ('Atlantic Coast Conference (ACC)','Southeastern Conference (SEC)','Big Ten Conference (Big 10)','Pac-12 Conference','Big East Conference','Big 12 Conference') THEN 'Yes'\\n    ELSE 'No'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Conference`', 'columnPosition': 12}], 'variable': False}, 'calculation_63979064-caf3-4273-998f-9fe18d47cc3c': {'templateId': 3974, 'id': 'calculation_63979064-caf3-4273-998f-9fe18d47cc3c', 'name': 'Seed Index', 'formula': \"CASE \\n\\tWHEN `Seed` = '1' THEN 1\\n    WHEN `Seed` = '2' THEN 2\\n    WHEN `Seed` = '3' THEN 3\\n    WHEN `Seed` = '4' THEN 4\\n    WHEN `Seed` = '5' THEN 5\\n    WHEN `Seed` = '6' THEN 6\\n    WHEN `Seed` = '7' THEN 7\\n    WHEN `Seed` = '8' THEN 8\\n    WHEN `Seed` = '9' THEN 9\\n    WHEN `Seed` = '10' THEN 10\\n    WHEN `Seed` = '11' THEN 11\\n    WHEN `Seed` = '12' THEN 12\\n    WHEN `Seed` = '13' THEN 13\\n    WHEN `Seed` = '14' THEN 14\\n    WHEN `Seed` = '15' THEN 15\\n    WHEN `Seed` = '16' THEN 16\\n    ELSE 17\\nEND\", 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Seed`', 'columnPosition': 12}, {'columnName': '`Seed`', 'columnPosition': 41}, {'columnName': '`Seed`', 'columnPosition': 70}, {'columnName': '`Seed`', 'columnPosition': 99}, {'columnName': '`Seed`', 'columnPosition': 128}, {'columnName': '`Seed`', 'columnPosition': 157}, {'columnName': '`Seed`', 'columnPosition': 186}, {'columnName': '`Seed`', 'columnPosition': 215}, {'columnName': '`Seed`', 'columnPosition': 244}, {'columnName': '`Seed`', 'columnPosition': 273}, {'columnName': '`Seed`', 'columnPosition': 304}, {'columnName': '`Seed`', 'columnPosition': 335}, {'columnName': '`Seed`', 'columnPosition': 366}, {'columnName': '`Seed`', 'columnPosition': 397}, {'columnName': '`Seed`', 'columnPosition': 428}, {'columnName': '`Seed`', 'columnPosition': 459}], 'variable': False}, 'calculation_613ad5a3-ef3e-43c0-a37d-135ab8996ce9': {'templateId': 3869, 'id': 'calculation_613ad5a3-ef3e-43c0-a37d-135ab8996ce9', 'name': 'Top Efficiencies Index', 'formula': \"CASE \\n\\tWHEN DOMO_BEAST_MODE(3868) = 'Optimal Efficiency - Tier 1' THEN 1\\n    WHEN DOMO_BEAST_MODE(3868) = 'Optimal Efficiency - Tier 2' THEN 2\\n    WHEN DOMO_BEAST_MODE(3868) = 'Optimal Efficiency' THEN 3\\n    WHEN DOMO_BEAST_MODE(3868) = 'Not Optimal Efficiency' THEN 4\\nEND\", 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'variable': False}, 'calculation_1b6d4d47-9333-42da-aaf5-424525af4c38': {'templateId': 3919, 'id': 'calculation_1b6d4d47-9333-42da-aaf5-424525af4c38', 'name': 'Net Efficiency', 'formula': '`Adjusted Offensive Efficiency` - `Adjusted Defensive Efficiency`', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Offensive Efficiency`', 'columnPosition': 0}, {'columnName': '`Adjusted Defensive Efficiency`', 'columnPosition': 34}], 'variable': False}, 'calculation_158bc983-f396-4e4d-8732-edc22b6d99bf': {'templateId': 3835, 'id': 'calculation_158bc983-f396-4e4d-8732-edc22b6d99bf', 'name': 'Worst Defensive Efficiency', 'formula': 'MAX(`Adjusted Defensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Defensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_38c9ef4c-95d8-4968-980f-2eea8bcb938c': {'templateId': 3867, 'id': 'calculation_38c9ef4c-95d8-4968-980f-2eea8bcb938c', 'name': 'Efficient Offense + Efficient Defense', 'formula': \"CASE \\n\\tWHEN `Adjusted Offensive Efficiency Rank` &lt;= 181 AND `Adjusted Defensive Efficiency Rank` &lt;= 181 THEN 'Good Offense + Good Defense'\\n\\tWHEN `Adjusted Offensive Efficiency Rank` &lt;= 181 AND `Adjusted Defensive Efficiency Rank` &gt;= 181 THEN 'Good Offense + Bad Defense'\\n\\tWHEN `Adjusted Offensive Efficiency Rank` &gt;= 181 AND `Adjusted Defensive Efficiency Rank` &lt;= 181 THEN 'Bad Offense + Good Defense'\\n\\tWHEN `Adjusted Offensive Efficiency Rank` &gt;= 181 AND `Adjusted Defensive Efficiency Rank` &gt;= 181 THEN 'Bad Offense + Bad Defense'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Offensive Efficiency Rank`', 'columnPosition': 12}, {'columnName': '`Adjusted Defensive Efficiency Rank`', 'columnPosition': 60}, {'columnName': '`Adjusted Offensive Efficiency Rank`', 'columnPosition': 145}, {'columnName': '`Adjusted Defensive Efficiency Rank`', 'columnPosition': 193}, {'columnName': '`Adjusted Offensive Efficiency Rank`', 'columnPosition': 277}, {'columnName': '`Adjusted Defensive Efficiency Rank`', 'columnPosition': 325}, {'columnName': '`Adjusted Offensive Efficiency Rank`', 'columnPosition': 409}, {'columnName': '`Adjusted Defensive Efficiency Rank`', 'columnPosition': 457}], 'variable': False}, 'calculation_6bad87e3-709a-4530-ae32-1c6a44b94834': {'templateId': 3832, 'id': 'calculation_6bad87e3-709a-4530-ae32-1c6a44b94834', 'name': 'Best Offensive Efficiency', 'formula': 'MAX(`Adjusted Offensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Offensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_c90301ea-1d93-48df-9ed5-371424ca22cf': {'templateId': 3908, 'id': 'calculation_c90301ea-1d93-48df-9ed5-371424ca22cf', 'name': '5 Year Coaching Threshold', 'formula': \"CASE \\n\\tWHEN `Active Coaching Length` IN ('0 years','1 years','2 years','3 years','4 years') THEN '0-5 Years Experience'\\n    ELSE '5+ Years Experience'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Active Coaching Length`', 'columnPosition': 12}], 'variable': False}, 'calculation_31a8e769-5307-425b-a3d2-db02823eba65': {'templateId': 3830, 'id': 'calculation_31a8e769-5307-425b-a3d2-db02823eba65', 'name': 'Avg Offensive Efficiency', 'formula': 'AVG(`Adjusted Offensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Offensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_c91796c3-a6bb-4f3f-b1c2-733c8bb5e1b9': {'templateId': 3831, 'id': 'calculation_c91796c3-a6bb-4f3f-b1c2-733c8bb5e1b9', 'name': 'Avg Defensive Efficiency', 'formula': 'AVG(`Adjusted Defensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Defensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_6450cddc-85ba-4099-94cc-4beaecd026fb': {'templateId': 3870, 'id': 'calculation_6450cddc-85ba-4099-94cc-4beaecd026fb', 'name': 'Top 12 in AP Top 25 during Week 6', 'formula': \"CASE \\n\\tWHEN `Season` = 2024 AND `Team Name` IN ('Arizona','Kansas','Purdue','Houston','UConn','Baylor','Marquette','Creighton','North Carolina','Gonzaga','Oklahoma','Tennessee') THEN 'Top 12 in Week 6'\\n    ELSE 'Not Top 12 in Week 6'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Season`', 'columnPosition': 12}, {'columnName': '`Team Name`', 'columnPosition': 32}], 'variable': False}, 'calculation_cd3a022a-4e9e-41dc-a996-a3d41a0a59d2': {'templateId': 3868, 'id': 'calculation_cd3a022a-4e9e-41dc-a996-a3d41a0a59d2', 'name': 'Top Efficiencies', 'formula': \"CASE \\n\\tWHEN `RankOE` &lt;= 19 AND `RankDE` &lt;= 22 THEN 'Optimal Efficiency - Tier 1'\\n\\tWHEN `RankOE` &lt;= 39 AND `RankDE` &lt;= 22 THEN 'Optimal Efficiency - Tier 2'\\n\\t-- WHEN `Adjusted Offensive Efficiency Rank` &lt;= 39 AND `Adjusted Defensive Efficiency Rank` &lt;= 22 THEN 'Optimal Efficiency'\\n    ELSE 'Not Optimal Efficiency'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`RankOE`', 'columnPosition': 12}, {'columnName': '`RankDE`', 'columnPosition': 31}, {'columnName': '`RankOE`', 'columnPosition': 87}, {'columnName': '`RankDE`', 'columnPosition': 106}], 'variable': False}, 'calculation_f6ee3337-5c9a-40c5-9695-17f9ae922d49': {'templateId': 3833, 'id': 'calculation_f6ee3337-5c9a-40c5-9695-17f9ae922d49', 'name': 'Best Defensive Efficiency', 'formula': 'MIN(`Adjusted Defensive Efficiency`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Defensive Efficiency`', 'columnPosition': 4}], 'variable': False}, 'calculation_f7b72e6a-3535-422f-9428-f1ad3a5e8436': {'templateId': 3975, 'id': 'calculation_f7b72e6a-3535-422f-9428-f1ad3a5e8436', 'name': 'Made Conference Semifinals?', 'formula': \"CASE \\n\\tWHEN `Season` = 2024 AND `Team Name` IN ('TCU','Kansas','South Carolina','Creighton','Texas','Virginia','Tennessee','Michigan State','Alabama','Clemson','Dayton','Nevada','Northwestern','BYU','Duke','Kentucky','Boise State') THEN 'No'\\n    ELSE 'Yes'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Season`', 'columnPosition': 12}, {'columnName': '`Team Name`', 'columnPosition': 32}], 'variable': False}, 'calculation_d4d2f814-a702-4de0-9c5b-6edf84e8707f': {'templateId': 3922, 'id': 'calculation_d4d2f814-a702-4de0-9c5b-6edf84e8707f', 'name': 'Opp3PA + Opp3P%', 'formula': \"CASE \\n\\tWHEN `RankFG3Rate` &lt;= 181 AND `RankOppFG3Pct` &lt;= 181 THEN 'Best'\\n    ELSE 'Not The Best'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`RankFG3Rate`', 'columnPosition': 12}, {'columnName': '`RankOppFG3Pct`', 'columnPosition': 37}], 'variable': False}, 'calculation_fa3ad795-3a03-4dd9-9baa-e7b7d2aad1e6': {'templateId': 3866, 'id': 'calculation_fa3ad795-3a03-4dd9-9baa-e7b7d2aad1e6', 'name': 'Pace + Net Rating', 'formula': \"CASE \\n\\tWHEN `Adjusted Temo` &gt;= 62.0 AND `Adjusted Temo` &lt;= 72.0 AND `Net Rating` &gt;= 20.0 THEN 'Best'\\n    ELSE 'Not The Best'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Adjusted Temo`', 'columnPosition': 12}, {'columnName': '`Adjusted Temo`', 'columnPosition': 40}, {'columnName': '`Net Rating`', 'columnPosition': 68}], 'variable': False}, 'calculation_ebc45801-0350-4b77-87b9-c2de3e3de175': {'templateId': 3921, 'id': 'calculation_ebc45801-0350-4b77-87b9-c2de3e3de175', 'name': 'AST% + TOV%', 'formula': \"CASE \\n\\tWHEN `RankARate` &lt;= 181 AND `Off.TO % Rank` &lt;= 181 THEN 'Best'\\n    ELSE 'Not The Best'\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`RankARate`', 'columnPosition': 12}, {'columnName': '`Off.TO % Rank`', 'columnPosition': 35}], 'variable': False}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7fb344635a50&gt;),\n DomoDataset(id='fff33fa8-bc96-4754-92ad-5a2f8789717f', display_type='salesforce', data_provider_type='salesforce', name='Salesforce | Accounts | TEST', description='', row_count=24, column_count=87, stream_id=1071, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7fb348803fd0&gt;),\n DomoDataset(id='d8e97c12-630b-41d4-a470-400f4f0fe0a9', display_type='large-file-upload', data_provider_type='large-file-upload', name='RAW | KenPom | Summary', description='', row_count=362, column_count=16, stream_id=1449, owner={'id': '1334846498', 'name': 'Jonathan Pilafas', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7fb34452cfa0&gt;),\n DomoDataset(id='353751aa-b96e-457f-9d06-f037b278cde0', display_type='webform', data_provider_type='webform', name='Store Example Data', description=None, row_count=19378, column_count=5, stream_id=1448, owner={'id': '68216396', 'name': 'Elliott Leonard', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7fb34452dd50&gt;)]\n\n\n\nimport domolibrary.classes.DomoDataset as dmd\n\n\ndef process_ds(\n    domo_dataset: dmd.DomoDataset,\n) -&gt; dict:  # dictionary where each attribute except _id and _ds_name becomes a tag\n    \"\"\"\n    receives DomoDataset object, and then generates an object with attributes that will become tags.\n    every organization will have different naming conventions and therefore must generate different rules for how tags can be exctracted from the Domo Dataset object.\n    \"\"\"\n\n    proj_str = domo_dataset.name.split(\"_\", 1)[0]\n    proj_name = proj_str[:-2]\n    proj_phase = proj_str[-2:]\n\n    _ = domo_dataset.name.split(\"_\", 1)[1]\n\n    ds_type = _.split(\"_\")[-1].replace(\" *\", \"\")\n\n    return {\n        \"_id\": domo_dataset.id,\n        \"_ds_name\": domo_dataset.name,\n        \"provider_type\": domo_dataset.display_type or domo_dataset.data_provider_type,\n        \"proj_name\": proj_name,\n        \"proj_phase\": proj_phase,\n        \"ds_type\": ds_type,\n    }\n\n\nimport pandas as pd\n\n# for this project we assume any dataset that ends with * has been validated as adhering to the naming convention format.\ndataset_tags_to_update = [\n    process_ds(domo_dataset)\n    for domo_dataset in domo_datasets\n    if domo_dataset.name.endswith(\"*\")\n]\n\npd.DataFrame(dataset_tags_to_update)\n\n\n\n\n\n\n\n\n\n_id\n_ds_name\nprovider_type\nproj_name\nproj_phase\nds_type\n\n\n\n\n0\nda552832-c04d-46ac-936a-f982d9d3f2e6\nSalesProject01_hello world_INT *\napi\nSalesProject\n01\nINT\n\n\n1\n063dd227-2a2d-4563-a372-6d08c950e86d\nSalesProject02_summary_by_month_DASH *\napi\nSalesProject\n02\nDASH\n\n\n2\n6114155e-e6a5-4c9c-bec0-5f0b8e807579\nSalesProject01_hello world3_INT *\napi\nSalesProject\n01\nINT\n\n\n3\ne5f44d26-4028-4282-88a9-239a0f909373\nSalesProject02_summary_by_day_DASH *\napi\nSalesProject\n02\nDASH\n\n\n\n\n\n\n\n\n\ndef generate_tags(tag_dict):\n    \"\"\"\n    simple utility function to collapse key/value pairs into a string\n    tags generated by this process will be suffixed with an *\n    \"\"\"\n\n    tag_ls = [\n        f\"{key} : {tag_dict[key]} *\"\n        for key in tag_dict.keys()\n        if not key.startswith(\"_\")\n    ]\n\n    info = {\n        key.replace(\"_\", \"\"): tag_dict[key]\n        for key in tag_dict.keys()\n        if key.startswith(\"_\")\n    }\n\n    return {\"tag_ls\": tag_ls, **info}\n\n\nfrom pprint import pprint\n\n# for each dataset to update, tag_ls contains the list of tags that will be added.\ndataset_tags_for_api = [generate_tags(tag_dict) for tag_dict in dataset_tags_to_update]\n\npprint(dataset_tags_for_api)\n\n[{'dsname': 'SalesProject01_hello world_INT *',\n  'id': 'da552832-c04d-46ac-936a-f982d9d3f2e6',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 01 *',\n             'ds_type : INT *']},\n {'dsname': 'SalesProject02_summary_by_month_DASH *',\n  'id': '063dd227-2a2d-4563-a372-6d08c950e86d',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 02 *',\n             'ds_type : DASH *']},\n {'dsname': 'SalesProject01_hello world3_INT *',\n  'id': '6114155e-e6a5-4c9c-bec0-5f0b8e807579',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 01 *',\n             'ds_type : INT *']},\n {'dsname': 'SalesProject02_summary_by_day_DASH *',\n  'id': 'e5f44d26-4028-4282-88a9-239a0f909373',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 02 *',\n             'ds_type : DASH *']}]\n\n\n\nimport asyncio\nfrom typing import List\n\nimport domolibrary.classes.DomoDataset as dmd\n\nasync def process_dataset_tags(dataset_id, tag_ls: List[str], auth: dmda.DomoAuth):\n    \"\"\"\n    function to actually update domo dataset entities.\n    tags previously added by this process (denoted with the * suffix) will be removed\n    \"\"\"\n\n    domo_dataset = await dmd.DomoDataset.get_from_id(dataset_id=dataset_id, auth=auth)\n\n    # remove old tags\n    remove_tag_ls = [tag for tag in domo_dataset.tags.tag_ls if tag.endswith(\" *\")]\n\n    if len(remove_tag_ls) &gt; 0:\n        await domo_dataset.tags.remove(remove_tag_ls=remove_tag_ls)\n\n    # add new tags\n    await domo_dataset.tags.add(add_tag_ls=tag_ls)\n\n    return {\n        \"id\": domo_dataset.id,\n        \"name\": domo_dataset.name,\n        \"tags\": domo_dataset.tags.tag_ls,\n    }\n\n\nimport pandas as pd\n\nres = await asyncio.gather(\n    *[\n        process_dataset_tags(\n            dataset_id=row.get(\"id\"), tag_ls=row.get(\"tag_ls\"), auth=token_auth\n        )\n        for row in dataset_tags_for_api\n    ]\n)\n\npd.DataFrame(res)\n\n\n\n\n\n\n\n\n\nid\nname\ntags\n\n\n\n\n0\nda552832-c04d-46ac-936a-f982d9d3f2e6\nSalesProject01_hello world_INT *\n[provider_type : api *, proj_phase : 01 *, pro...\n\n\n1\n063dd227-2a2d-4563-a372-6d08c950e86d\nSalesProject02_summary_by_month_DASH *\n[provider_type : api *, proj_phase : 02 *, pro...\n\n\n2\n6114155e-e6a5-4c9c-bec0-5f0b8e807579\nSalesProject01_hello world3_INT *\n[provider_type : api *, proj_phase : 01 *, pro...\n\n\n3\ne5f44d26-4028-4282-88a9-239a0f909373\nSalesProject02_summary_by_day_DASH *\n[provider_type : api *, proj_phase : 02 *, pro..."
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html",
    "title": "Query Domo Jupyter with Python",
    "section": "",
    "text": "![Tutorial Video pt 1 of 4]\n\nimport os\nimport json\n\nfrom urllib.parse import urlparse\nimport datetime as dt\nfrom dateutil.parser import parse\n\nfrom dataclasses import dataclass, field\n\nfrom pprint import pprint\n\nimport domolibrary.client.DomoAuth as dmda\nimport domolibrary.client.get_data as gd\nimport domolibrary.utils.DictDot as util_dd\n\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=\"jae@onyxreporting.com\",\n)\n\nawait full_auth.print_is_token()\n\n# full_auth.generate_auth_header(token = full_auth.token)\n\n🎉 token retrieved from domo-community ⚙️\n\n\nTrue\n\n\n\n\n\nUSER_TOKEN = \"XQq01p8JGm7GLvN8c5BaZw4hPnYbpf\"  # pull from network traffic\nSERVICE_LOCATION = (\n    \"jupyter-prod1.domodatascience.com\"\n    or urlparse(os.environ[\"JUPYTERHUB_SERVICES_URL\"]).netloc\n)  # pull from domo\nSERVICE_PREFIX = (\n    \"/user/domo-community-1893952720/19fb3535/\"\n    or os.environ[\"JUPYTERHUB_SERVICE_PREFIX\"]\n)\n\nuser_token = USER_TOKEN\n# input(\"user token:\")\n# retrieve this by monitoring domo jupyter network traffic.  it is the token header\n\nservice_location = SERVICE_LOCATION\n# input(\"service_location\")\n# retrieve from domo jupyter env\n\nservice_prefix = SERVICE_PREFIX\n# input(\"service prefix\") or\n# retrieve from domo jupyter env\n\nprint(user_token, service_location, service_prefix)\n\nXQq01p8JGm7GLvN8c5BaZw4hPnYbpf jupyter-prod1.domodatascience.com /user/domo-community-1893952720/19fb3535/"
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html#adding-jupyter-auth-creds",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html#adding-jupyter-auth-creds",
    "title": "Query Domo Jupyter with Python",
    "section": "",
    "text": "USER_TOKEN = \"XQq01p8JGm7GLvN8c5BaZw4hPnYbpf\"  # pull from network traffic\nSERVICE_LOCATION = (\n    \"jupyter-prod1.domodatascience.com\"\n    or urlparse(os.environ[\"JUPYTERHUB_SERVICES_URL\"]).netloc\n)  # pull from domo\nSERVICE_PREFIX = (\n    \"/user/domo-community-1893952720/19fb3535/\"\n    or os.environ[\"JUPYTERHUB_SERVICE_PREFIX\"]\n)\n\nuser_token = USER_TOKEN\n# input(\"user token:\")\n# retrieve this by monitoring domo jupyter network traffic.  it is the token header\n\nservice_location = SERVICE_LOCATION\n# input(\"service_location\")\n# retrieve from domo jupyter env\n\nservice_prefix = SERVICE_PREFIX\n# input(\"service prefix\") or\n# retrieve from domo jupyter env\n\nprint(user_token, service_location, service_prefix)\n\nXQq01p8JGm7GLvN8c5BaZw4hPnYbpf jupyter-prod1.domodatascience.com /user/domo-community-1893952720/19fb3535/"
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html#client",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html#client",
    "title": "Query Domo Jupyter with Python",
    "section": "CLIENT",
    "text": "CLIENT\n\ndefine DomoJupyterAuth class\nextend DomoFullAuth with new properties and replace an existing method\n\n@dataclass\nclass _DomoJupyter_Optional:\n    def __post_init__(self):\n\n        self.user_token = self.user_token or input(\n            \"user token: # retrieve this by monitoring domo jupyter network traffic.  it is the token header\"\n        )\n        self.service_location = self.service_location or input(\n            \"service_location:  # retrieve from domo jupyter env\"\n        )\n        self.service_prefix = self.service_prefix or input(\n            \"service prefix: # retrieve from domo jupyter env\"\n        )\n\n        self._test_prereq()\n\n    def generate_auth_header(self, token: str) -&gt; dict:\n        self.auth_header = {\n            \"x-domo-authentication\": token,\n            \"authorization\": f\"Token {self.user_token}\",\n        }\n\n        return self.auth_header\n\n\n@dataclass\nclass _DomoJupyter_Required:\n    user_token: str\n    service_location: str\n    service_prefix: str\n\n    def get_user_token_flow(self):\n        \"\"\"stub\"\"\"\n        print(\"hello world i am a user_token_flow\")\n\n    def _test_prereq(self):\n        if not self.user_token:\n            raise Exception(\"DomoJupyterAuth objects must have a user_token\")\n\n        if not self.service_location:\n            raise Exception(\"DomoJupyterAuth objects must have a service_location\")\n\n        if not self.service_prefix:\n            raise Exception(\"DomoJupyterAuth objects must have a service_prefix\")\n\n        if not self.user_token or not self.service_location or not self.service_prefix:\n            raise Exception(\n                \"DomoJupyterAuth objects must have user_token, service_location and service_prefix\"\n            )\n\n\n@dataclass\nclass DomoJupyterFullAuth(\n    _DomoJupyter_Optional, dmda.DomoFullAuth, _DomoJupyter_Required\n):\n    @classmethod\n    def convert_auth(\n        cls, full_auth: dmda.DomoFullAuth, user_token, service_location, service_prefix\n    ):\n        \"\"\"converts dmda.DomoFullAuth to DomoJupyterFullAuth\n        i.e. adds DomoJupyter specific auth fields\n        eventually can add DomoJupyter specific auth flow for generating auth token\n        \"\"\"\n        return cls(\n            domo_instance=full_auth.domo_instance,\n            domo_username=full_auth.domo_username,\n            domo_password=full_auth.domo_password,\n            user_token=user_token,\n            service_location=service_location,\n            service_prefix=service_prefix,\n        )\n\n\ndj_auth = DomoJupyterFullAuth.convert_auth(\n    full_auth=full_auth,\n    user_token=user_token,\n    service_location=service_location,\n    # service_prefix=None\n    service_prefix=service_prefix,\n)\n\n# token = await dj_auth.get_auth_token()\n# dj_auth.generate_auth_header( token = token)"
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html#routes",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html#routes",
    "title": "Query Domo Jupyter with Python",
    "section": "ROUTES",
    "text": "ROUTES\n![Tutorial Video pt 2 of 4]\n\nGET Routes\n\nasync def _get_jupyter_content(\n    auth: dmda.DomoAuth,\n    content_path: str = \"\",\n    debug_api: bool = False,\n):\n    url = f\"https://{auth.domo_instance}.{auth.service_location}{auth.service_prefix}api/contents/{content_path}\"\n\n    res = await gd.get_data(\n        url=f\"{url}\",\n        method=\"GET\",\n        auth=auth,\n        headers={\"authorization\": f\"Token {auth.user_token}\"},\n        debug_api=debug_api,\n        num_stacks_to_drop=1,\n    )\n    if not res.is_success:\n        raise Exception(\"unable to retrieve content\")\n\n    return res\n\n\nsample implementation of get_jupyter_content\n\nres = await _get_jupyter_content(\n    auth=dj_auth,\n    # content_path = 'my_terrible_demo.txt',\n    # content_path=\"datatypes.ipynb\",\n    debug_api=False,\n)\n\nres.response[\"content\"][0:2]\n\n[{'name': 'my_terrible_demo.txt',\n  'path': 'my_terrible_demo.txt',\n  'last_modified': '2023-09-15T22:20:36.711000Z',\n  'created': '2023-09-15T22:20:36.711000Z',\n  'content': None,\n  'format': None,\n  'mimetype': 'text/plain',\n  'size': 33,\n  'writable': True,\n  'type': 'file'},\n {'name': 'untitled1.txt',\n  'path': 'untitled1.txt',\n  'last_modified': '2023-09-15T22:37:23.077000Z',\n  'created': '2023-09-15T22:37:23.077000Z',\n  'content': None,\n  'format': None,\n  'mimetype': 'text/plain',\n  'size': 33,\n  'writable': True,\n  'type': 'file'}]\n\n\n\n\n\nupdate jupyter content\nimprove code maintenance by implementing a factory design patternx\n\ndef _generate_update_jupyter_text(body):\n    body.update(\n        {\n            \"format\": \"text\",\n            \"type\": \"file\",\n        }\n    )\n    return body\n\n\ndef _generate_update_jupyter_ipynb(body):\n    body.update(\n        {\n            \"format\": None,\n            \"type\": \"notebook\",\n        }\n    )\n    return body\n\n\ndef _generate_update_jupyter_directory(content_path, body):\n\n    if \"/\" in content_path:\n        new_content_path = \"/\".join(content_path.split(\"/\")[:-1])\n    else:\n        new_content_path = \"\"\n\n    body.update(\n        {\n            \"path\": new_content_path,\n            \"format\": None,\n            \"type\": \"directory\",\n        }\n    )\n    return body\n\n\ndef _generate_update_jupyter_body(\n    new_content, content_path: str  # my_folder/datatypes.ipynb\n):\n    \"\"\"factory to construct properly formed body\"\"\"\n\n    content_name = os.path.normpath(content_path).split(os.sep)[-1]\n\n    if \".\" in content_path:\n        content_type = content_path.split(\".\")[-1]\n    else:\n        content_type = \"directory\"\n\n    body = {\n        \"name\": content_name,\n        \"content\": new_content,\n        \"path\": content_path,\n    }\n\n    if content_type == \"ipynb\":\n        return _generate_update_jupyter_ipynb(body)\n\n    if content_type == \"directory\":\n        return _generate_update_jupyter_directory(content_path, body)\n\n    return _generate_update_jupyter_text(body)\n\n\n_generate_update_jupyter_body(\"hello world\", \"hi.md\")\n\n{'name': 'hi.md',\n 'content': 'hello world',\n 'path': 'hi.md',\n 'format': 'text',\n 'type': 'file'}\n\n\n\nasync def _update_jupyter_file(\n    auth: DomoJupyterFullAuth,\n    new_content,\n    content_path: str = \"\",  # file name and location in jupyter\n    debug_api: bool = False,\n    num_stacks_to_drop=1,\n):\n    if not isinstance(auth, DomoJupyterFullAuth):\n        raise Exception(\n            f\"invalid auth type {auth.__class__.__name__} must pass DomoJupyter auth type\"\n        )\n\n    body = _generate_update_jupyter_body(new_content, content_path)\n\n    content_path_split = os.path.normpath(content_path).split(os.sep)\n\n    url = f\"https://{auth.domo_instance}.{auth.service_location}{auth.service_prefix}api/contents/{'/'.join(content_path_split)}\"\n\n    res = await gd.get_data(\n        url=f\"{url}\",\n        method=\"PUT\",\n        auth=auth,\n        body=body,\n        debug_api=debug_api,\n        num_stacks_to_drop=num_stacks_to_drop,\n    )\n\n    if not res.is_success:\n        raise Exception(\"unable to update content.  validate your user token\")\n\n    return res\n\n\nsample implementation of update_content\n\nres = await _update_jupyter_file(\n    auth=dj_auth,\n    content_path=\"new_folder/my_great_demo.txt\",\n    new_content=\"jae is excellent at demoes\",\n    debug_api=False,\n)\n\nres.response\n\n{'name': 'my_great_demo.txt',\n 'path': 'new_folder/my_great_demo.txt',\n 'last_modified': '2023-09-18T20:48:47.644000Z',\n 'created': '2023-09-18T20:48:47.644000Z',\n 'content': None,\n 'format': None,\n 'mimetype': 'text/plain',\n 'size': 26,\n 'writable': True,\n 'type': 'file'}\n\n\n\n\n\nrecursive get_content\n![Tutorial Video pt 3 of 4]\n\nasync def get_content_recursive(\n    auth: DomoJupyterFullAuth,\n    content_path=\"\",\n    all_rows=None,\n    debug_api: bool = False,\n    return_raw: bool = False,\n):\n    all_rows = all_rows or []\n\n    res = await _get_jupyter_content(\n        auth=auth,\n        content_path=content_path,\n        debug_api=debug_api,\n    )\n\n    content_ls = res.response[\"content\"]\n\n    for obj in content_ls:\n        content_path = obj[\"path\"]\n\n        if obj[\"type\"] != \"directory\":\n            res = await _get_jupyter_content(\n                auth=auth,\n                content_path=content_path,\n                debug_api=debug_api,\n            )\n\n            all_rows.append(res.response)\n\n        elif obj[\"type\"] == \"directory\":\n            await get_content_recursive(\n                auth=auth,\n                content_path=content_path,\n                all_rows=all_rows,\n                debug_api=debug_api,\n            )\n\n    if return_raw:\n        return res\n\n    res.response = all_rows\n\n    return res\n\n\nx = [\"this will work\"]  # a1\n\n\ndef my_fake_recursion(x=None):\n    x = x or []  # a1\n    x.append(\"new_record\")  # a1\n\n    print(\"i am in a function i have been passed by reference\", x)\n\n\nmy_fake_recursion(x=x)\n\nx  # a1\n\ni am in a function i have been passed by reference ['this will work', 'new_record']\n\n\n['this will work', 'new_record']\n\n\n\nsample implementation of get_content_recursive\n\nres = await _get_jupyter_content(auth=dj_auth, content_path=\"\")\n[content[\"name\"] for content in res.response[\"content\"]]\n\n['my_terrible_demo.txt',\n 'untitled1.txt',\n 'tutorial',\n 'tutorial_env.ipynb',\n 'UpdateDatasets.ipynb',\n 'export',\n 'MakeDomoFaster.ipynb',\n 'get_content.ipynb',\n 'DataflowExecution.ipynb',\n 'Untitled.ipynb',\n 'instance_pdp_access.ipynb',\n 'Untitled Folder',\n 'new_folder',\n 'README.md',\n 'recent_executions',\n 'untitled.txt',\n 'env.txt',\n 'datatypes.ipynb']\n\n\n\nres = await get_content_recursive(\n    auth=dj_auth,\n    debug_api=False,\n    return_raw=False,\n)\ncontent_ls = res.response\n\n[content[\"name\"] for content in content_ls]\n\n['my_terrible_demo.txt',\n 'untitled1.txt',\n 'copy_me.ipynb',\n 'AS_rbd.ipynb',\n 'env.txt',\n 'JW_session5_prep.ipynb',\n 'tutorial_env.ipynb',\n 'UpdateDatasets.ipynb',\n 'untitled1.txt',\n 'MakeDomoFaster.ipynb',\n 'get_content.ipynb',\n 'DataflowExecution.ipynb',\n 'Untitled.ipynb',\n 'instance_pdp_access.ipynb',\n 'my_great_demo.txt',\n 'README.md',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.html',\n 'output.ipynb',\n 'output.pdf',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'stderr',\n 'output.ipynb',\n 'stdout',\n 'untitled.txt',\n 'env.txt',\n 'datatypes.ipynb']"
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html#class",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html#class",
    "title": "Query Domo Jupyter with Python",
    "section": "CLASS",
    "text": "CLASS\n![Tutorial Video pt 4 of 4]"
  },
  {
    "objectID": "blog/posts/2023-09-13_Domo_Jupyter/index.html#domojupyter-content-and-class",
    "href": "blog/posts/2023-09-13_Domo_Jupyter/index.html#domojupyter-content-and-class",
    "title": "Query Domo Jupyter with Python",
    "section": "DomoJupyter Content and Class",
    "text": "DomoJupyter Content and Class\n\n@dataclass\nclass DomoJupyter_Content:\n    name: str\n    folder: str\n    last_modified: dt.datetime\n    file_type: str\n    content: str\n\n    auth: DomoJupyterFullAuth = field(repr=False)\n\n    default_export_folder: str = \"export\"\n\n    def __post_init__(self):\n        if self.folder.endswith(self.name):\n            self.folder = self.folder.replace(self.name, \"\")\n\n    @classmethod\n    def _from_json(cls, obj: dict, auth: DomoJupyterFullAuth):\n        dd = util_dd.DictDot(obj) if not isinstance(obj, util_dd.DictDot) else obj\n\n        dc = cls(\n            name=dd.name,\n            folder=dd.path,\n            last_modified=parse(dd.last_modified),\n            file_type=dd.type,\n            auth=auth,\n            content=obj.get(\"content\"),\n        )\n\n        return dc\n\n    def export_content(\n        self,\n        output_folder: str = None,\n        file_name: str = None,\n    ):\n        output_folder = output_folder or os.path.join(\n            self.default_export_folder, self.folder\n        )\n\n        file_name = file_name or self.name\n\n        if not os.path.exists(output_folder):\n            print(output_folder)\n            os.makedirs(output_folder)\n\n        content_str = self.content\n        if isinstance(self.content, dict):\n            content_str = json.dumps(self.content)\n\n        output_path = os.path.join(output_folder, file_name)\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(content_str)\n            f.close()\n\n        return output_path\n\n    async def update(\n        self,\n        jupyter_folder: str = None,\n        jupyter_file_name: str = None,\n        debug_api: bool = False,\n    ):\n\n        if jupyter_folder and jupyter_file_name:\n            content_patuh = f\"{jupyter_folder}/{jupyter_file_name}\"\n\n        if len(self.folder) &gt; 0:\n            content_path = f\"{self.folder}/{self.name}\"\n\n        else:\n            content_path = self.name\n\n            if content_path.lower().startswith(self.default_export_folder.lower()):\n                content_path = content_path.replace(self.default_export_folder, \"\")\n\n        content_path = \"/\".join(os.path.normpath(content_path).split(os.sep))\n\n        return await _update_jupyter_file(\n            auth=self.auth,\n            content_path=content_path,\n            new_content=self.content,\n            debug_api=debug_api,\n        )\n\n\n@dataclass\nclass DomoJupyter:\n    auth: DomoJupyterFullAuth = field(repr=False)\n    content: [DomoJupyter_Content] = field(default=None)\n\n    user_token = None\n    service_location = None\n    service_prefix = None\n\n    def __post_init__(self):\n        if hasattr(self.auth, \"domo_password\") and not isinstance(\n            self.auth, DomoJupyterFullAuth\n        ):\n\n            self.auth = DomoJupyterFullAuth.convert_auth(\n                full_auth=self.auth,\n                user_token=self.user_token,\n                service_location=self.service_location,\n                service_prefix=self.service_prefix,\n            )\n        if hasattr(self.auth, \"developer_token\") and not isinstance(\n            self.auth, DomoJupyterDeveloperToken\n        ):\n            raise Exception(\n                \"this authentitcation conversion method hasn't been implemented yet\"\n            )\n\n            # self.auth = DomoJupyterTokenAuth.convert_auth(\n            #     auth=self.auth,\n            #     user_token=self.user_token,\n            #     service_location=self.service_location,\n            #     service_prefix=self.service_prefix,\n            # )\n\n    async def get_content(\n        self,\n        debug_api: bool = False,\n        return_raw: bool = False,\n        is_recursive: bool = True,\n        content_path: str = \"\",\n    ):\n\n        if is_recursive:\n            res = await get_content_recursive(\n                auth=self.auth, debug_api=False, content_path=content_path\n            )\n            content_ls = res.response\n\n        else:\n            res = await _get_jupyter_content(\n                auth=self.auth, debug_api=False, content_path=content_path\n            )\n\n            content_ls = res.response[\"content\"]\n\n        if return_raw:\n            return res\n\n        return [\n            DomoJupyter_Content._from_json(obj, auth=self.auth) for obj in content_ls\n        ]\n\n\nsample impelemntation of get_contet\n\ndomo_dj = DomoJupyter(auth=dj_auth)\n\ndomo_dj_content = await domo_dj.get_content(\n    debug_api=False, return_raw=False, is_recursive=False\n)\n\n[domo_content.name for domo_content in domo_dj_content]\n\n['my_terrible_demo.txt',\n 'untitled1.txt',\n 'tutorial',\n 'tutorial_env.ipynb',\n 'UpdateDatasets.ipynb',\n 'export',\n 'MakeDomoFaster.ipynb',\n 'get_content.ipynb',\n 'DataflowExecution.ipynb',\n 'Untitled.ipynb',\n 'instance_pdp_access.ipynb',\n 'Untitled Folder',\n 'new_folder',\n 'README.md',\n 'recent_executions',\n 'untitled.txt',\n 'env.txt',\n 'datatypes.ipynb']\n\n\n\n\nsample implementation of updating content with DomoJupyter_Content class\n\ntest_content = domo_dj_content[1]\nprint(test_content.__class__.__name__)\n\ntest_content.content = \"jae rocks at debugging on the fly\"\ntest_content\n\nawait test_content.update(debug_api=False)\n\nDomoJupyter_Content\n\n\nResponseGetData(status=200, response={'name': 'untitled1.txt', 'path': 'untitled1.txt', 'last_modified': '2023-09-18T20:49:10.472000Z', 'created': '2023-09-18T20:49:10.472000Z', 'content': None, 'format': None, 'mimetype': 'text/plain', 'size': 33, 'writable': True, 'type': 'file'}, is_success=True, parent_class=None, traceback_details=TracebackDetails(function_name='_update_jupyter_file', file_name='/tmp/ipykernel_4630/2378948045.py', function_trail='&lt;module&gt; -&gt; update -&gt; _update_jupyter_file', traceback_stack=[&lt;FrameSummary file /tmp/ipykernel_4630/64093016.py, line 9 in &lt;module&gt;&gt;, &lt;FrameSummary file /tmp/ipykernel_4630/3496755649.py, line 83 in update&gt;, &lt;FrameSummary file /tmp/ipykernel_4630/2378948045.py, line 22 in _update_jupyter_file&gt;], parent_class=None))\n\n\n\n# test_content.export_content()"
  },
  {
    "objectID": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html",
    "href": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html",
    "title": "Tutorial Delete Duplicate Groups with Python",
    "section": "",
    "text": "sometimes you have duplicate groups and want to remove all groups that match a regex expression.\n\nget all groups from an instance\nuse list comprehension and the ACCOUNT_MATCH to find groups whose name matches any of the account_match criteria\nwrite a function that receives a parameter is_test : bool = True\n\nif is_test == True return a pd.DataFrame of accounts to be deleted\nif is_test == False delete the groups\n\n\nuse this class https://github.com/jaewilson07/domo_library/blob/main/nbs/classes/50_DomoGroup.ipynb\ntutorial walthrough https://youtu.be/1EQJ1R5fiGQ\n\n# %pip install --upgrade  domolibrary\n\n\nimport domolibrary\n\ndomolibrary.__version__\n\n'0.3.42'"
  },
  {
    "objectID": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html#handle-regex",
    "href": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html#handle-regex",
    "title": "Tutorial Delete Duplicate Groups with Python",
    "section": "handle regex",
    "text": "handle regex\n\nimport os\nimport urllib.parse as urllib_parse\n\n# execution_instance = urllib_parse.urlparse(os.environ.get('DOMO_HOSTNAME')).netloc.replace('.domo.com', '')\n# config_instance = execution_instance\n\nACCOUNT_MATCH = [r\"^sdk_.* \\(.*\"]\n\nTEST_INSTANCE = \"domo-community\"\n\ntest_values = [\n    \"sdk_alphabet (3)\",\n    \"sdk_hello_duplicate (4)\",\n    \"sdk_group_2\",\n    \"sdk_group_1\",\n]\n\n\n# setup test\nimport domolibrary.classes.DomoGroup as dmg\nimport domolibrary.utils.chunk_execution as ce\n\ntry:\n    await ce.gather_with_concurrency(\n        *[\n            dmg.DomoGroup.create_from_name(\n                group_name=value, auth=test_row.instance_auth\n            )\n            for value in test_values\n        ],\n        n=10\n    )\n\nexcept Exception as e:\n    print(e)\n\nname 'test_row' is not defined\n\n\n\n# Check if string matches regex list\n# Using join regex + loop + re.match()\nimport re\nfrom typing import List\n\n\ndef test_regex(text_str: str, regex_ls: List[str]) -&gt; bool:\n    regex = \"(?:% s)\" % \"|\".join(regex_ls)\n\n    return bool(re.match(regex, text_str))\n\n\n[test_regex(test_value, ACCOUNT_MATCH) for test_value in test_values]\n\n[True, True, False, False]"
  },
  {
    "objectID": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html#auth-objects",
    "href": "blog/posts/2023-012-18_DeleteDuplicateAccounts/index.html#auth-objects",
    "title": "Tutorial Delete Duplicate Groups with Python",
    "section": "⚙️ Auth Objects",
    "text": "⚙️ Auth Objects\n\n# !pip install python-dotenv"
  },
  {
    "objectID": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/index.html",
    "href": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/index.html",
    "title": "Tutorial - Generate a DomoStats dataset using DomoLibrary",
    "section": "",
    "text": "# pip install domolibrary\n\n\nimport os\n\ndomo_username = os.environ.get(\"DOMO_USERNAME\")\ndomo_instance = \"domo-community\"\ndomo_password = os.environ.get(\"DOJO_PASSWORD\")\n\n\nimport domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoFullAuth(\n    domo_username=domo_username,\n    domo_password=domo_password,\n    domo_instance=domo_instance,\n)\n\nawait auth.print_is_token()\n\n🎉 full_auth token retrieved from domo-community ⚙️\n\n\nTrue\n\n\n\nimport domolibrary.classes.DomoDatacenter as dmdc\n\ndomo_datacenter = dmdc.DomoDatacenter(auth=auth)\n\ndataflows_ls = await domo_datacenter.search_datacenter(\n    auth=auth,\n    entity_type=\"DATAFLOW\",\n    additional_filters_ls=[\n        {\n            \"filterType\": \"term\",\n            \"field\": \"data_flow_type\",\n            \"value\": \"MAGIC\",\n            \"name\": \"Magic ETL v2\",\n            \"not\": False,\n        }\n    ],\n)\n\ndataflows_ls[0]\n\n{'entityType': 'dataflow',\n 'databaseId': '340',\n 'searchId': {'indexName': None,\n  'databaseId': '340',\n  'customer': 'mmmm-0012-0200',\n  'entityType': 'dataflow'},\n 'createDate': 1699938646000,\n 'lastModified': 1701451542000,\n 'lastIndexed': 1701451545056,\n 'highlightedFields': {},\n 'language': 'English',\n 'requestAccess': False,\n 'score': 56.957905,\n 'name': 'Demo Active Employees',\n 'description': '',\n 'ownedById': '699075231',\n 'ownedByName': 'Mark Snodgrass',\n 'tags': [],\n 'lastRunDate': 1699938659000,\n 'inputDatasets': [{'name': 'DomoStats - People',\n   'id': '241025d7-3cca-4369-b7c0-b3264277c0e1'},\n  {'name': 'Domo Dimensions - Calendar',\n   'id': 'd6b99a99-63c7-46f0-8e54-38045e29e710'}],\n 'outputDatasets': [{'name': 'Demo Active Employees',\n   'id': 'b25b7f48-5257-4e26-bffa-b240b0caefea'}],\n 'runCount': 1,\n 'successRate': 1.0,\n 'dataFlowType': 'MAGIC',\n 'status': 'SUCCESS',\n 'deleted': False,\n 'passwordProtected': False,\n 'abandoned': False,\n 'owners': [{'id': '699075231',\n   'type': 'USER',\n   'displayName': 'Mark Snodgrass'}],\n 'ownersLocalized': {'localizedMessage': 'Mark Snodgrass', 'count': 1},\n 'paused': False,\n 'winnerText': 'Demo Active Employees',\n 'statusOrderPriority': 70,\n 'inputCount': 2,\n 'outputCount': 1,\n 'ownedByType': 'USER',\n 'customer': 'mmmm-0012-0200'}\n\n\n\ndataflow_ids = [dataflow.get(\"databaseId\") for dataflow in dataflows_ls]\ndataflow_ids[0:5]\n\n['340', '131', '227', '37', '185']\n\n\n\nimport domolibrary.classes.DomoDataflow as dmdf\nimport asyncio\n\ndataflow_definition_ls = await asyncio.gather(\n    *[\n        dmdf.DomoDataflow.get_from_id(dataflow_id=dataflow_id, auth=auth)\n        for dataflow_id in dataflow_ids\n    ]\n)\n\ndomo_dataflow = dataflow_definition_ls[0]\ndomo_dataflow\n\nDomoDataflow(id=340, name='Demo Active Employees', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='3ffe103e-4f89-4e55-89db-9a9a77fcbc59', type='Constant', name='Calendar', datasource_id=None, sql=None, depends_on=['3956ad1d-cb9a-4fb0-9bc2-305e2f552932'], parent_actions=[DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='2a191a01-6be7-4646-b9af-ca3fea3a388a', type='Constant', name='Employees', datasource_id=None, sql=None, depends_on=['cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30'], parent_actions=[DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['3ffe103e-4f89-4e55-89db-9a9a77fcbc59', '2a191a01-6be7-4646-b9af-ca3fea3a388a'], parent_actions=[DomoDataflow_Action(id='3ffe103e-4f89-4e55-89db-9a9a77fcbc59', type='Constant', name='Calendar', datasource_id=None, sql=None, depends_on=['3956ad1d-cb9a-4fb0-9bc2-305e2f552932'], parent_actions=[DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='2a191a01-6be7-4646-b9af-ca3fea3a388a', type='Constant', name='Employees', datasource_id=None, sql=None, depends_on=['cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30'], parent_actions=[DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='cfe59cc5-a01f-4910-b6bc-e74d3c8a7170', type='Filter', name='Filter to actives', datasource_id=None, sql=None, depends_on=['6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f'], parent_actions=[DomoDataflow_Action(id='6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['3ffe103e-4f89-4e55-89db-9a9a77fcbc59', '2a191a01-6be7-4646-b9af-ca3fea3a388a'], parent_actions=[DomoDataflow_Action(id='3ffe103e-4f89-4e55-89db-9a9a77fcbc59', type='Constant', name='Calendar', datasource_id=None, sql=None, depends_on=['3956ad1d-cb9a-4fb0-9bc2-305e2f552932'], parent_actions=[DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='2a191a01-6be7-4646-b9af-ca3fea3a388a', type='Constant', name='Employees', datasource_id=None, sql=None, depends_on=['cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30'], parent_actions=[DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='1176585b-85bf-454a-9967-f4a59caf4094', type='SelectValues', name='Select Columns 2', datasource_id=None, sql=None, depends_on=['cfe59cc5-a01f-4910-b6bc-e74d3c8a7170'], parent_actions=[DomoDataflow_Action(id='cfe59cc5-a01f-4910-b6bc-e74d3c8a7170', type='Filter', name='Filter to actives', datasource_id=None, sql=None, depends_on=['6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f'], parent_actions=[DomoDataflow_Action(id='6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['3ffe103e-4f89-4e55-89db-9a9a77fcbc59', '2a191a01-6be7-4646-b9af-ca3fea3a388a'], parent_actions=[DomoDataflow_Action(id='3ffe103e-4f89-4e55-89db-9a9a77fcbc59', type='Constant', name='Calendar', datasource_id=None, sql=None, depends_on=['3956ad1d-cb9a-4fb0-9bc2-305e2f552932'], parent_actions=[DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='2a191a01-6be7-4646-b9af-ca3fea3a388a', type='Constant', name='Employees', datasource_id=None, sql=None, depends_on=['cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30'], parent_actions=[DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='d42dd52a-d884-4bc3-b807-07cf5584e215', type='PublishToVault', name='Demo Active Employees', datasource_id='b25b7f48-5257-4e26-bffa-b240b0caefea', sql=None, depends_on=['1176585b-85bf-454a-9967-f4a59caf4094'], parent_actions=[DomoDataflow_Action(id='1176585b-85bf-454a-9967-f4a59caf4094', type='SelectValues', name='Select Columns 2', datasource_id=None, sql=None, depends_on=['cfe59cc5-a01f-4910-b6bc-e74d3c8a7170'], parent_actions=[DomoDataflow_Action(id='cfe59cc5-a01f-4910-b6bc-e74d3c8a7170', type='Filter', name='Filter to actives', datasource_id=None, sql=None, depends_on=['6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f'], parent_actions=[DomoDataflow_Action(id='6b89d1f5-ea18-480c-b3c5-f0bffde9fe3f', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['3ffe103e-4f89-4e55-89db-9a9a77fcbc59', '2a191a01-6be7-4646-b9af-ca3fea3a388a'], parent_actions=[DomoDataflow_Action(id='3ffe103e-4f89-4e55-89db-9a9a77fcbc59', type='Constant', name='Calendar', datasource_id=None, sql=None, depends_on=['3956ad1d-cb9a-4fb0-9bc2-305e2f552932'], parent_actions=[DomoDataflow_Action(id='3956ad1d-cb9a-4fb0-9bc2-305e2f552932', type='SelectValues', name='Select Columns 1', datasource_id=None, sql=None, depends_on=['db088785-df3f-41c1-885f-5380223137ee'], parent_actions=[DomoDataflow_Action(id='db088785-df3f-41c1-885f-5380223137ee', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['18e365d8-8b24-471b-a1da-694a1936ad5c'], parent_actions=[DomoDataflow_Action(id='18e365d8-8b24-471b-a1da-694a1936ad5c', type='LoadFromVault', name='Domo Dimensions - Calendar', datasource_id='d6b99a99-63c7-46f0-8e54-38045e29e710', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='2a191a01-6be7-4646-b9af-ca3fea3a388a', type='Constant', name='Employees', datasource_id=None, sql=None, depends_on=['cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30'], parent_actions=[DomoDataflow_Action(id='cd3d5f9e-0bfe-40d9-bb95-45faf2d64b30', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['d7b935c6-2184-4079-bc7b-4e50e25d1801'], parent_actions=[DomoDataflow_Action(id='d7b935c6-2184-4079-bc7b-4e50e25d1801', type='LoadFromVault', name='DomoStats - People', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])])])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None))\n\n\n\ndomo_dataflow = await dmdf.DomoDataflow.get_from_id(dataflow_id=9, auth=auth)\ndomo_dataflow\n\nDomoDataflow(id=9, name='DOMO Covid Datasets', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='39a7a4ba-8bc3-4141-ac44-ada9ecee380e', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['3224b938-e977-40ea-bb85-c6784d13fa95'], parent_actions=[DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='a55f2e60-9418-4291-8272-141be6193740', type='PublishToVault', name='DOMO_Covid_Current Snapshot', datasource_id='e0bbe9ec-6ccf-428b-b18b-a2405cedbe4b', sql=None, depends_on=['39a7a4ba-8bc3-4141-ac44-ada9ecee380e'], parent_actions=[DomoDataflow_Action(id='39a7a4ba-8bc3-4141-ac44-ada9ecee380e', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['3224b938-e977-40ea-bb85-c6784d13fa95'], parent_actions=[DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='4f77e294-4673-46b5-8744-8317eeae39a7', type='SelectValues', name='Prep for Pivot', datasource_id=None, sql=None, depends_on=['3224b938-e977-40ea-bb85-c6784d13fa95'], parent_actions=[DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='9e6fef1a-2428-4c70-ab47-9aaf80a035aa', type='NormalizeAll', name='Dynamic Unpivot', datasource_id=None, sql=None, depends_on=['4f77e294-4673-46b5-8744-8317eeae39a7'], parent_actions=[DomoDataflow_Action(id='4f77e294-4673-46b5-8744-8317eeae39a7', type='SelectValues', name='Prep for Pivot', datasource_id=None, sql=None, depends_on=['3224b938-e977-40ea-bb85-c6784d13fa95'], parent_actions=[DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='58109dc0-37e6-4893-9ba0-5ed5b3c1eaa8', type='PublishToVault', name='DOMO_Covid_Current Snapshot_Collapsed', datasource_id='be14b18c-7844-48e4-8acc-0878c3dc96b0', sql=None, depends_on=['9e6fef1a-2428-4c70-ab47-9aaf80a035aa'], parent_actions=[DomoDataflow_Action(id='9e6fef1a-2428-4c70-ab47-9aaf80a035aa', type='NormalizeAll', name='Dynamic Unpivot', datasource_id=None, sql=None, depends_on=['4f77e294-4673-46b5-8744-8317eeae39a7'], parent_actions=[DomoDataflow_Action(id='4f77e294-4673-46b5-8744-8317eeae39a7', type='SelectValues', name='Prep for Pivot', datasource_id=None, sql=None, depends_on=['3224b938-e977-40ea-bb85-c6784d13fa95'], parent_actions=[DomoDataflow_Action(id='3224b938-e977-40ea-bb85-c6784d13fa95', type='NumericCalculator', name='Active Cases', datasource_id=None, sql=None, depends_on=['59e6226d-507f-4cff-86b1-f024499173aa'], parent_actions=[DomoDataflow_Action(id='59e6226d-507f-4cff-86b1-f024499173aa', type='NumericCalculator', name='Resolved Cases', datasource_id=None, sql=None, depends_on=['6e3ec9a4-470b-4fe4-8e8a-bd954b681df4'], parent_actions=[DomoDataflow_Action(id='6e3ec9a4-470b-4fe4-8e8a-bd954b681df4', type='DateCalculator', name='Days Since...', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='0c791afe-0acb-4821-8781-ddd5d51c850a', type='WindowAction', name='Recovered', datasource_id=None, sql=None, depends_on=['2037eb8f-c88c-4d9f-8d14-ae591a27b627'], parent_actions=[DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', type='SelectValues', name='Ranks', datasource_id=None, sql=None, depends_on=['0c791afe-0acb-4821-8781-ddd5d51c850a'], parent_actions=[DomoDataflow_Action(id='0c791afe-0acb-4821-8781-ddd5d51c850a', type='WindowAction', name='Recovered', datasource_id=None, sql=None, depends_on=['2037eb8f-c88c-4d9f-8d14-ae591a27b627'], parent_actions=[DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='eeecc67b-34c4-4929-a4e3-34058aba039a', type='SelectValues', name='Ranks 1', datasource_id=None, sql=None, depends_on=['43029ef0-9519-49c6-80c2-2f885e662221'], parent_actions=[DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f', type='NumericCalculator', name='Active Cases 1', datasource_id=None, sql=None, depends_on=['1d3e790a-dabf-45ba-849e-74996d7a03c9'], parent_actions=[DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='64d116fa-b2fb-40ed-a834-5e98c541eb09', type='MergeJoin', name='State Rank', datasource_id=None, sql=None, depends_on=['eeecc67b-34c4-4929-a4e3-34058aba039a', 'dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f'], parent_actions=[DomoDataflow_Action(id='eeecc67b-34c4-4929-a4e3-34058aba039a', type='SelectValues', name='Ranks 1', datasource_id=None, sql=None, depends_on=['43029ef0-9519-49c6-80c2-2f885e662221'], parent_actions=[DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f', type='NumericCalculator', name='Active Cases 1', datasource_id=None, sql=None, depends_on=['1d3e790a-dabf-45ba-849e-74996d7a03c9'], parent_actions=[DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='a660c21b-b639-4f8d-b0d1-7024fea1056e', type='MergeJoin', name='Country Rank', datasource_id=None, sql=None, depends_on=['95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', '64d116fa-b2fb-40ed-a834-5e98c541eb09'], parent_actions=[DomoDataflow_Action(id='95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', type='SelectValues', name='Ranks', datasource_id=None, sql=None, depends_on=['0c791afe-0acb-4821-8781-ddd5d51c850a'], parent_actions=[DomoDataflow_Action(id='0c791afe-0acb-4821-8781-ddd5d51c850a', type='WindowAction', name='Recovered', datasource_id=None, sql=None, depends_on=['2037eb8f-c88c-4d9f-8d14-ae591a27b627'], parent_actions=[DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='64d116fa-b2fb-40ed-a834-5e98c541eb09', type='MergeJoin', name='State Rank', datasource_id=None, sql=None, depends_on=['eeecc67b-34c4-4929-a4e3-34058aba039a', 'dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f'], parent_actions=[DomoDataflow_Action(id='eeecc67b-34c4-4929-a4e3-34058aba039a', type='SelectValues', name='Ranks 1', datasource_id=None, sql=None, depends_on=['43029ef0-9519-49c6-80c2-2f885e662221'], parent_actions=[DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f', type='NumericCalculator', name='Active Cases 1', datasource_id=None, sql=None, depends_on=['1d3e790a-dabf-45ba-849e-74996d7a03c9'], parent_actions=[DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='5dc2fda6-902b-4c68-ba7d-1216b54fc1f6', type='SelectValues', name='Select Columns 2', datasource_id=None, sql=None, depends_on=['a660c21b-b639-4f8d-b0d1-7024fea1056e'], parent_actions=[DomoDataflow_Action(id='a660c21b-b639-4f8d-b0d1-7024fea1056e', type='MergeJoin', name='Country Rank', datasource_id=None, sql=None, depends_on=['95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', '64d116fa-b2fb-40ed-a834-5e98c541eb09'], parent_actions=[DomoDataflow_Action(id='95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', type='SelectValues', name='Ranks', datasource_id=None, sql=None, depends_on=['0c791afe-0acb-4821-8781-ddd5d51c850a'], parent_actions=[DomoDataflow_Action(id='0c791afe-0acb-4821-8781-ddd5d51c850a', type='WindowAction', name='Recovered', datasource_id=None, sql=None, depends_on=['2037eb8f-c88c-4d9f-8d14-ae591a27b627'], parent_actions=[DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='64d116fa-b2fb-40ed-a834-5e98c541eb09', type='MergeJoin', name='State Rank', datasource_id=None, sql=None, depends_on=['eeecc67b-34c4-4929-a4e3-34058aba039a', 'dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f'], parent_actions=[DomoDataflow_Action(id='eeecc67b-34c4-4929-a4e3-34058aba039a', type='SelectValues', name='Ranks 1', datasource_id=None, sql=None, depends_on=['43029ef0-9519-49c6-80c2-2f885e662221'], parent_actions=[DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f', type='NumericCalculator', name='Active Cases 1', datasource_id=None, sql=None, depends_on=['1d3e790a-dabf-45ba-849e-74996d7a03c9'], parent_actions=[DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])])])])])]), DomoDataflow_Action(id='a3000ccf-ad34-4b11-a25e-2e6acb0e50b5', type='PublishToVault', name='DOMO_Covid_Time Series', datasource_id='bea90814-7772-47ef-b6c9-7e5368d41b06', sql=None, depends_on=['5dc2fda6-902b-4c68-ba7d-1216b54fc1f6'], parent_actions=[DomoDataflow_Action(id='5dc2fda6-902b-4c68-ba7d-1216b54fc1f6', type='SelectValues', name='Select Columns 2', datasource_id=None, sql=None, depends_on=['a660c21b-b639-4f8d-b0d1-7024fea1056e'], parent_actions=[DomoDataflow_Action(id='a660c21b-b639-4f8d-b0d1-7024fea1056e', type='MergeJoin', name='Country Rank', datasource_id=None, sql=None, depends_on=['95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', '64d116fa-b2fb-40ed-a834-5e98c541eb09'], parent_actions=[DomoDataflow_Action(id='95f6b96d-af65-4d3b-8e3a-94ce7f2e4f64', type='SelectValues', name='Ranks', datasource_id=None, sql=None, depends_on=['0c791afe-0acb-4821-8781-ddd5d51c850a'], parent_actions=[DomoDataflow_Action(id='0c791afe-0acb-4821-8781-ddd5d51c850a', type='WindowAction', name='Recovered', datasource_id=None, sql=None, depends_on=['2037eb8f-c88c-4d9f-8d14-ae591a27b627'], parent_actions=[DomoDataflow_Action(id='2037eb8f-c88c-4d9f-8d14-ae591a27b627', type='WindowAction', name='Deaths', datasource_id=None, sql=None, depends_on=['69cecc30-a170-432d-8367-1e3c2d362419'], parent_actions=[DomoDataflow_Action(id='69cecc30-a170-432d-8367-1e3c2d362419', type='WindowAction', name='Confirmed', datasource_id=None, sql=None, depends_on=['d2ef7338-17ee-4f9c-a93b-b268605ea81e'], parent_actions=[DomoDataflow_Action(id='d2ef7338-17ee-4f9c-a93b-b268605ea81e', type='GroupBy', name='Country Summary', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='64d116fa-b2fb-40ed-a834-5e98c541eb09', type='MergeJoin', name='State Rank', datasource_id=None, sql=None, depends_on=['eeecc67b-34c4-4929-a4e3-34058aba039a', 'dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f'], parent_actions=[DomoDataflow_Action(id='eeecc67b-34c4-4929-a4e3-34058aba039a', type='SelectValues', name='Ranks 1', datasource_id=None, sql=None, depends_on=['43029ef0-9519-49c6-80c2-2f885e662221'], parent_actions=[DomoDataflow_Action(id='43029ef0-9519-49c6-80c2-2f885e662221', type='WindowAction', name='Recovered 1', datasource_id=None, sql=None, depends_on=['16bae147-462b-4547-94b2-8075aab0a2fb'], parent_actions=[DomoDataflow_Action(id='16bae147-462b-4547-94b2-8075aab0a2fb', type='WindowAction', name='Deaths 1', datasource_id=None, sql=None, depends_on=['551ebf46-d0ac-4210-83cd-a50049b2b61d'], parent_actions=[DomoDataflow_Action(id='551ebf46-d0ac-4210-83cd-a50049b2b61d', type='WindowAction', name='Confirmed 1', datasource_id=None, sql=None, depends_on=['30d11b8a-eed9-4037-aa2c-03c83c3f66b8'], parent_actions=[DomoDataflow_Action(id='30d11b8a-eed9-4037-aa2c-03c83c3f66b8', type='GroupBy', name='State Summary', datasource_id=None, sql=None, depends_on=['57da148c-17f8-495d-b81d-2db18e1073dc'], parent_actions=[DomoDataflow_Action(id='57da148c-17f8-495d-b81d-2db18e1073dc', type='Filter', name='United States', datasource_id=None, sql=None, depends_on=['0e192d7e-280b-4c4d-bde2-f0f3adb1e213'], parent_actions=[DomoDataflow_Action(id='0e192d7e-280b-4c4d-bde2-f0f3adb1e213', type='LoadFromVault', name='DOMO Covid Current Snapshot Tracker Data', datasource_id='b034f19e-16d5-4cb3-afac-b72c8e6a79fd', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='dc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f', type='NumericCalculator', name='Active Cases 1', datasource_id=None, sql=None, depends_on=['1d3e790a-dabf-45ba-849e-74996d7a03c9'], parent_actions=[DomoDataflow_Action(id='1d3e790a-dabf-45ba-849e-74996d7a03c9', type='NumericCalculator', name='Resolved Cases 1', datasource_id=None, sql=None, depends_on=['660e1e8c-0d62-4e8c-9784-d4555ae46167'], parent_actions=[DomoDataflow_Action(id='660e1e8c-0d62-4e8c-9784-d4555ae46167', type='DateCalculator', name='Days Since... 2', datasource_id=None, sql=None, depends_on=['a1d07083-d1ca-41e9-8be2-f13596df03c3'], parent_actions=[DomoDataflow_Action(id='a1d07083-d1ca-41e9-8be2-f13596df03c3', type='ValueMapper', name='Value Mapper', datasource_id=None, sql=None, depends_on=['96d04e4b-dc72-479c-b84b-ad0b74ada085'], parent_actions=[DomoDataflow_Action(id='96d04e4b-dc72-479c-b84b-ad0b74ada085', type='LoadFromVault', name='DOMO Covid Time Series Tracker Data', datasource_id='dcad2f50-e65e-4259-a9e8-214a3d1e18a7', sql=None, depends_on=None, parent_actions=None)])])])])])])])]), DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])]), DomoDataflow_Action(id='709cc8dc-77b6-46c9-9c23-1e8a7cd44203', type='ValueMapper', name='Value Mapper 1', datasource_id=None, sql=None, depends_on=['02a1f8dd-2b0a-4193-9c54-8d4fc19261cc'], parent_actions=[DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])]), DomoDataflow_Action(id='a72904d6-88d3-4e47-838b-9a0087d9b2be', type='ConcatFields', name='State | County 1', datasource_id=None, sql=None, depends_on=['709cc8dc-77b6-46c9-9c23-1e8a7cd44203'], parent_actions=[DomoDataflow_Action(id='709cc8dc-77b6-46c9-9c23-1e8a7cd44203', type='ValueMapper', name='Value Mapper 1', datasource_id=None, sql=None, depends_on=['02a1f8dd-2b0a-4193-9c54-8d4fc19261cc'], parent_actions=[DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])])]), DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='17e224ee-3f06-4ad1-ad6a-1226af11f5d9', type='WindowAction', name='Recovered 2', datasource_id=None, sql=None, depends_on=['0363ec9b-6a88-4914-baa1-80983f03289c'], parent_actions=[DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='2d699db0-8a70-4671-837e-3b9fd03152c8', type='ConcatFields', name='State | County', datasource_id=None, sql=None, depends_on=['17e224ee-3f06-4ad1-ad6a-1226af11f5d9'], parent_actions=[DomoDataflow_Action(id='17e224ee-3f06-4ad1-ad6a-1226af11f5d9', type='WindowAction', name='Recovered 2', datasource_id=None, sql=None, depends_on=['0363ec9b-6a88-4914-baa1-80983f03289c'], parent_actions=[DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='64244d26-fc99-459b-966a-ceb3f412ed31', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['a72904d6-88d3-4e47-838b-9a0087d9b2be', '2d699db0-8a70-4671-837e-3b9fd03152c8'], parent_actions=[DomoDataflow_Action(id='a72904d6-88d3-4e47-838b-9a0087d9b2be', type='ConcatFields', name='State | County 1', datasource_id=None, sql=None, depends_on=['709cc8dc-77b6-46c9-9c23-1e8a7cd44203'], parent_actions=[DomoDataflow_Action(id='709cc8dc-77b6-46c9-9c23-1e8a7cd44203', type='ValueMapper', name='Value Mapper 1', datasource_id=None, sql=None, depends_on=['02a1f8dd-2b0a-4193-9c54-8d4fc19261cc'], parent_actions=[DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])])]), DomoDataflow_Action(id='2d699db0-8a70-4671-837e-3b9fd03152c8', type='ConcatFields', name='State | County', datasource_id=None, sql=None, depends_on=['17e224ee-3f06-4ad1-ad6a-1226af11f5d9'], parent_actions=[DomoDataflow_Action(id='17e224ee-3f06-4ad1-ad6a-1226af11f5d9', type='WindowAction', name='Recovered 2', datasource_id=None, sql=None, depends_on=['0363ec9b-6a88-4914-baa1-80983f03289c'], parent_actions=[DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='5347a8d3-48de-4799-af32-311ba4936c23', type='SelectValues', name='Select Columns 4', datasource_id=None, sql=None, depends_on=['64244d26-fc99-459b-966a-ceb3f412ed31'], parent_actions=[DomoDataflow_Action(id='64244d26-fc99-459b-966a-ceb3f412ed31', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['a72904d6-88d3-4e47-838b-9a0087d9b2be', '2d699db0-8a70-4671-837e-3b9fd03152c8'], parent_actions=[DomoDataflow_Action(id='a72904d6-88d3-4e47-838b-9a0087d9b2be', type='ConcatFields', name='State | County 1', datasource_id=None, sql=None, depends_on=['709cc8dc-77b6-46c9-9c23-1e8a7cd44203'], parent_actions=[DomoDataflow_Action(id='709cc8dc-77b6-46c9-9c23-1e8a7cd44203', type='ValueMapper', name='Value Mapper 1', datasource_id=None, sql=None, depends_on=['02a1f8dd-2b0a-4193-9c54-8d4fc19261cc'], parent_actions=[DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])])]), DomoDataflow_Action(id='2d699db0-8a70-4671-837e-3b9fd03152c8', type='ConcatFields', name='State | County', datasource_id=None, sql=None, depends_on=['17e224ee-3f06-4ad1-ad6a-1226af11f5d9'], parent_actions=[DomoDataflow_Action(id='17e224ee-3f06-4ad1-ad6a-1226af11f5d9', type='WindowAction', name='Recovered 2', datasource_id=None, sql=None, depends_on=['0363ec9b-6a88-4914-baa1-80983f03289c'], parent_actions=[DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])]), DomoDataflow_Action(id='31d9273c-3bf1-4046-8594-1bec09a0f83f', type='PublishToVault', name='DOMO_Covid_Time Series_County', datasource_id='dde1d15a-04d1-42c7-88bb-10563e42be01', sql=None, depends_on=['5347a8d3-48de-4799-af32-311ba4936c23'], parent_actions=[DomoDataflow_Action(id='5347a8d3-48de-4799-af32-311ba4936c23', type='SelectValues', name='Select Columns 4', datasource_id=None, sql=None, depends_on=['64244d26-fc99-459b-966a-ceb3f412ed31'], parent_actions=[DomoDataflow_Action(id='64244d26-fc99-459b-966a-ceb3f412ed31', type='MergeJoin', name='Join Data', datasource_id=None, sql=None, depends_on=['a72904d6-88d3-4e47-838b-9a0087d9b2be', '2d699db0-8a70-4671-837e-3b9fd03152c8'], parent_actions=[DomoDataflow_Action(id='a72904d6-88d3-4e47-838b-9a0087d9b2be', type='ConcatFields', name='State | County 1', datasource_id=None, sql=None, depends_on=['709cc8dc-77b6-46c9-9c23-1e8a7cd44203'], parent_actions=[DomoDataflow_Action(id='709cc8dc-77b6-46c9-9c23-1e8a7cd44203', type='ValueMapper', name='Value Mapper 1', datasource_id=None, sql=None, depends_on=['02a1f8dd-2b0a-4193-9c54-8d4fc19261cc'], parent_actions=[DomoDataflow_Action(id='02a1f8dd-2b0a-4193-9c54-8d4fc19261cc', type='DateCalculator', name='Snapshot Age 1', datasource_id=None, sql=None, depends_on=['250bf67d-8882-4078-a7d4-aa6dda1a1635'], parent_actions=[DomoDataflow_Action(id='250bf67d-8882-4078-a7d4-aa6dda1a1635', type='NumericCalculator', name='Active Cases 2', datasource_id=None, sql=None, depends_on=['dac9af4e-a203-47f5-9493-ec46d834a51f'], parent_actions=[DomoDataflow_Action(id='dac9af4e-a203-47f5-9493-ec46d834a51f', type='NumericCalculator', name='Resolved Cases 2', datasource_id=None, sql=None, depends_on=['cebf2fb3-75e3-48ee-bfe5-2af9927cb581'], parent_actions=[DomoDataflow_Action(id='cebf2fb3-75e3-48ee-bfe5-2af9927cb581', type='ValueMapper', name='Null or 0 Long', datasource_id=None, sql=None, depends_on=['fe46f53d-d10e-4e1e-b341-4d18f565e83b'], parent_actions=[DomoDataflow_Action(id='fe46f53d-d10e-4e1e-b341-4d18f565e83b', type='ValueMapper', name='Null or 0 Lat', datasource_id=None, sql=None, depends_on=['d652deb2-cd3e-462d-9627-2f72425e05cf'], parent_actions=[DomoDataflow_Action(id='d652deb2-cd3e-462d-9627-2f72425e05cf', type='ValueMapper', name='Null New Recovered', datasource_id=None, sql=None, depends_on=['08327437-2a70-49bb-9676-8e63f540eb84'], parent_actions=[DomoDataflow_Action(id='08327437-2a70-49bb-9676-8e63f540eb84', type='ValueMapper', name='Null Recovered', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])])]), DomoDataflow_Action(id='2d699db0-8a70-4671-837e-3b9fd03152c8', type='ConcatFields', name='State | County', datasource_id=None, sql=None, depends_on=['17e224ee-3f06-4ad1-ad6a-1226af11f5d9'], parent_actions=[DomoDataflow_Action(id='17e224ee-3f06-4ad1-ad6a-1226af11f5d9', type='WindowAction', name='Recovered 2', datasource_id=None, sql=None, depends_on=['0363ec9b-6a88-4914-baa1-80983f03289c'], parent_actions=[DomoDataflow_Action(id='0363ec9b-6a88-4914-baa1-80983f03289c', type='WindowAction', name='Deaths 2', datasource_id=None, sql=None, depends_on=['0d438931-d91a-43ff-8b79-654e6925c4be'], parent_actions=[DomoDataflow_Action(id='0d438931-d91a-43ff-8b79-654e6925c4be', type='WindowAction', name='Confirmed 2', datasource_id=None, sql=None, depends_on=['670ba4cb-9c18-49c2-a372-05d635891bac'], parent_actions=[DomoDataflow_Action(id='670ba4cb-9c18-49c2-a372-05d635891bac', type='GroupBy', name='County Summary', datasource_id=None, sql=None, depends_on=['b5055499-0d69-4273-aedf-c02c0ed96ea7'], parent_actions=[DomoDataflow_Action(id='b5055499-0d69-4273-aedf-c02c0ed96ea7', type='LoadFromVault', name='DOMO US County Covid Time Series Tracker Data', datasource_id='1225e98f-ea61-47e0-bc44-36b38725c280', sql=None, depends_on=None, parent_actions=None)])])])])])])])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None))\n\n\n\nimport pandas as pd\n\n\nasync def generate_version_action_pdf(domo_dataflow):\n    dataflow_versions = await domo_dataflow.get_versions()\n\n    df = pd.DataFrame(\n        [\n            {\n                \"dataflow_id\": dataflow_version.id,\n                \"dataflow_version\": dataflow_version.version_id,\n                **domo_action.__dict__,\n            }\n            for dataflow_version in dataflow_versions\n            for domo_action in dataflow_version.actions\n        ]\n    )\n\n    df.drop(columns=[\"parent_actions\", \"datasource_id\", \"sql\"], inplace=True)\n    df.rename(columns={\"id\": \"tile_id\", \"type\": \"tile_type\"}, inplace=True)\n\n    return df\n\n\naction_df = await generate_version_action_pdf(domo_dataflow)\naction_df[0:5]\n\n\n\n\n\n\n\n\n\ndataflow_id\ndataflow_version\ntile_id\ntile_type\nname\ndepends_on\n\n\n\n\n0\n9\n89\n0e192d7e-280b-4c4d-bde2-f0f3adb1e213\nLoadFromVault\nDOMO Covid Current Snapshot Tracker Data\nNone\n\n\n1\n9\n89\n96d04e4b-dc72-479c-b84b-ad0b74ada085\nLoadFromVault\nDOMO Covid Time Series Tracker Data\nNone\n\n\n2\n9\n89\na1d07083-d1ca-41e9-8be2-f13596df03c3\nValueMapper\nValue Mapper\n[96d04e4b-dc72-479c-b84b-ad0b74ada085]\n\n\n3\n9\n89\n6e3ec9a4-470b-4fe4-8e8a-bd954b681df4\nDateCalculator\nDays Since...\n[0e192d7e-280b-4c4d-bde2-f0f3adb1e213]\n\n\n4\n9\n89\n59e6226d-507f-4cff-86b1-f024499173aa\nNumericCalculator\nResolved Cases\n[6e3ec9a4-470b-4fe4-8e8a-bd954b681df4]\n\n\n\n\n\n\n\n\n\nasync def generate_action_stats_df(domo_dataflow):\n    await domo_dataflow.history.get_execution_history(maximum=10)\n\n    df = pd.DataFrame(\n        [\n            {\n                \"dataflow_version\": domo_history.dataflow_version,\n                \"dataflow_id\": domo_history.dataflow_id,\n                \"dataflow_begin_time\": domo_history.begin_time,\n                **domo_action.__dict__,\n            }\n            for domo_history in domo_dataflow.history.execution_history\n            for domo_action in domo_history.action_results\n        ]\n    )\n\n    df.rename(columns={\"id\": \"tile_id\", \"type\": \"tile_type\"}, inplace=True)\n\n    return df\n\n\nstats_df = await generate_action_stats_df(domo_dataflow)\nstats_df[0:5]\n\n\n\n\n\n\n\n\n\ndataflow_version\ndataflow_id\ndataflow_begin_time\ntile_id\ntile_type\nname\nis_success\nrows_processed\nbegin_time\nend_time\nduration_in_sec\n\n\n\n\n0\n89\n9\n2024-02-15 21:46:47\n0e192d7e-280b-4c4d-bde2-f0f3adb1e213\nDataHubManifestLoaderAction\nNone\nTrue\n315\n2024-02-15 21:46:57.697\n2024-02-15 21:46:58.874\n1.177\n\n\n1\n89\n9\n2024-02-15 21:46:47\n96d04e4b-dc72-479c-b84b-ad0b74ada085\nDataHubManifestLoaderAction\nNone\nTrue\n389137\n2024-02-15 21:46:57.696\n2024-02-15 21:47:06.790\n9.094\n\n\n2\n89\n9\n2024-02-15 21:46:47\na1d07083-d1ca-41e9-8be2-f13596df03c3\nValueMapper\nNone\nTrue\n389137\n2024-02-15 21:46:58.773\n2024-02-15 21:47:06.790\n8.017\n\n\n3\n89\n9\n2024-02-15 21:46:47\n6e3ec9a4-470b-4fe4-8e8a-bd954b681df4\nDateCalculator\nNone\nTrue\n315\n2024-02-15 21:46:58.772\n2024-02-15 21:46:58.873\n0.101\n\n\n4\n89\n9\n2024-02-15 21:46:47\n59e6226d-507f-4cff-86b1-f024499173aa\nNumericCalculator\nNone\nTrue\n315\n2024-02-15 21:46:58.773\n2024-02-15 21:46:58.873\n0.100\n\n\n\n\n\n\n\n\n\ndef combine_execution_plan_with_stats_df(action_df, stats_df):\n    stats_df.drop(columns=[\"tile_type\", \"name\"], inplace=True)\n\n    df = pd.merge(\n        action_df,\n        stats_df,\n        on=[\"dataflow_version\", \"dataflow_id\", \"tile_id\"],\n        how=\"outer\",\n    )\n\n    return df\n\n\ncombine_df = combine_execution_plan_with_stats_df(action_df.copy(), stats_df.copy())\n\nprint(len(combine_df))\ncombine_df[:10]\n\n931\n\n\n\n\n\n\n\n\n\n\ndataflow_id\ndataflow_version\ntile_id\ntile_type\nname\ndepends_on\ndataflow_begin_time\nis_success\nrows_processed\nbegin_time\nend_time\nduration_in_sec\n\n\n\n\n0\n9\n20\n008ac1ce-4143-420f-93a7-9536ea986fc5\nWindowAction\nRank & Window\n[e667577a-8c73-4677-8022-8bf3f3e7a72e]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n1\n9\n20\n02a1f8dd-2b0a-4193-9c54-8d4fc19261cc\nDateCalculator\nSnapshot Age 1\n[250bf67d-8882-4078-a7d4-aa6dda1a1635]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n2\n9\n20\n0362dd20-2039-403d-a249-94e2ce716aed\nConstant\nToday\n[18626a7b-c1a7-4fb4-bcc0-7e50ebd7e763]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n3\n9\n20\n06f8d60b-8b84-474d-91de-abcaefe10abf\nSelectValues\nDIM_Country (Join)\n[0e783798-e39f-49f2-ac42-70cd82ffd611]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n4\n9\n20\n08327437-2a70-49bb-9676-8e63f540eb84\nValueMapper\nNull Recovered 2\n[5da719b4-d4c6-4dfc-a928-38312de82df8]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n5\n9\n20\n0c791afe-0acb-4821-8781-ddd5d51c850a\nWindowAction\nRecovered\n[2037eb8f-c88c-4d9f-8d14-ae591a27b627]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n6\n9\n20\n0e192d7e-280b-4c4d-bde2-f0f3adb1e213\nLoadFromVault\nDOMO Covid Current Snapshot Tracker Data\nNone\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n7\n9\n20\n0e783798-e39f-49f2-ac42-70cd82ffd611\nUnionAll\nAppend New Values\n[3ea82c4a-1da1-4c37-b3e5-ea77a6ba035d, 52b67a4...\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n8\n9\n20\n1689d811-85eb-4e3a-993d-2e59419e2236\nSelectValues\nDIM Table\n[d6423ad7-938f-428e-a773-c8f2f257de07]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n9\n9\n20\n16bae147-462b-4547-94b2-8075aab0a2fb\nWindowAction\nDeaths 1\n[551ebf46-d0ac-4210-83cd-a50049b2b61d]\nNaT\nNaN\nNaN\nNaT\nNaT\nNaN\n\n\n\n\n\n\n\n\n\ndef explode_parents(df):\n    \"\"\"\n    1. generates one row for each parent in \"depends_on\"\n    2. joins parents stats to df\n    3. stores dataflow_begin_time if there is no parent\n    \"\"\"\n\n    df[\"dependencies\"] = df[\"depends_on\"]\n    explode_df = df.explode(\"depends_on\")\n\n    parents_df = df[\n        [\n            \"dataflow_version\",\n            \"dataflow_id\",\n            \"tile_id\",\n            \"tile_type\",\n            \"name\",\n            \"end_time\",\n            \"rows_processed\",\n        ]\n    ].rename(\n        columns={\n            \"tile_id\": \"parent_tile_id\",\n            \"tile_type\": \"parent_tile_type\",\n            \"name\": \"parent_tile_name\",\n            \"end_time\": \"parent_end_time\",\n            \"rows_processed\": \"parent_rows_processed\",\n        }\n    )\n\n    explode_df = pd.merge(\n        explode_df,\n        parents_df,\n        left_on=[\"dataflow_version\", \"dataflow_id\", \"depends_on\"],\n        right_on=[\"dataflow_version\", \"dataflow_id\", \"parent_tile_id\"],\n        how=\"left\",\n    )\n\n    explode_df[\"parent_end_time\"] = explode_df[[\"begin_time\", \"parent_end_time\"]].max(\n        axis=1\n    )\n\n    explode_df[\"actual_duration_in_sec\"] = (\n        explode_df[\"end_time\"] - explode_df[\"parent_end_time\"]\n    ).dt.total_seconds()\n\n    explode_df = explode_df[\n        [\n            \"dataflow_id\",\n            \"dataflow_version\",\n            \"tile_id\",\n            \"tile_type\",\n            \"name\",\n            \"rows_processed\",\n            \"begin_time\",\n            \"end_time\",\n            \"duration_in_sec\",\n            \"parent_end_time\",\n            \"actual_duration_in_sec\",\n            \"dependencies\",\n            \"parent_tile_id\",\n            \"parent_tile_type\",\n            \"parent_tile_name\",\n            \"parent_rows_processed\",\n        ]\n    ]\n\n    explode_df[\"parent_tile_id\"].fillna(\"start\", inplace=True)\n\n    return explode_df\n\n\nexplode_df = explode_parents(combine_df.copy())\nexplode_df[0:10]\n\n/tmp/ipykernel_36055/2268720893.py:68: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  explode_df[\"parent_tile_id\"].fillna(\"start\", inplace=True)\n\n\n\n\n\n\n\n\n\n\ndataflow_id\ndataflow_version\ntile_id\ntile_type\nname\nrows_processed\nbegin_time\nend_time\nduration_in_sec\nparent_end_time\nactual_duration_in_sec\ndependencies\nparent_tile_id\nparent_tile_type\nparent_tile_name\nparent_rows_processed\n\n\n\n\n0\n9\n20\n008ac1ce-4143-420f-93a7-9536ea986fc5\nWindowAction\nRank & Window\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[e667577a-8c73-4677-8022-8bf3f3e7a72e]\ne667577a-8c73-4677-8022-8bf3f3e7a72e\nUnionAll\nAppend Unused DIM Countries\nNaN\n\n\n1\n9\n20\n02a1f8dd-2b0a-4193-9c54-8d4fc19261cc\nDateCalculator\nSnapshot Age 1\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[250bf67d-8882-4078-a7d4-aa6dda1a1635]\n250bf67d-8882-4078-a7d4-aa6dda1a1635\nNumericCalculator\nActive Cases 2\nNaN\n\n\n2\n9\n20\n0362dd20-2039-403d-a249-94e2ce716aed\nConstant\nToday\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[18626a7b-c1a7-4fb4-bcc0-7e50ebd7e763]\n18626a7b-c1a7-4fb4-bcc0-7e50ebd7e763\nFilter\nCountries Still Listed\nNaN\n\n\n3\n9\n20\n06f8d60b-8b84-474d-91de-abcaefe10abf\nSelectValues\nDIM_Country (Join)\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[0e783798-e39f-49f2-ac42-70cd82ffd611]\n0e783798-e39f-49f2-ac42-70cd82ffd611\nUnionAll\nAppend New Values\nNaN\n\n\n4\n9\n20\n08327437-2a70-49bb-9676-8e63f540eb84\nValueMapper\nNull Recovered 2\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[5da719b4-d4c6-4dfc-a928-38312de82df8]\n5da719b4-d4c6-4dfc-a928-38312de82df8\nValueMapper\nNull Deaths 2\nNaN\n\n\n5\n9\n20\n0c791afe-0acb-4821-8781-ddd5d51c850a\nWindowAction\nRecovered\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[2037eb8f-c88c-4d9f-8d14-ae591a27b627]\n2037eb8f-c88c-4d9f-8d14-ae591a27b627\nWindowAction\nDeaths\nNaN\n\n\n6\n9\n20\n0e192d7e-280b-4c4d-bde2-f0f3adb1e213\nLoadFromVault\nDOMO Covid Current Snapshot Tracker Data\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\nNone\nstart\nNaN\nNaN\nNaN\n\n\n7\n9\n20\n0e783798-e39f-49f2-ac42-70cd82ffd611\nUnionAll\nAppend New Values\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[3ea82c4a-1da1-4c37-b3e5-ea77a6ba035d, 52b67a4...\n3ea82c4a-1da1-4c37-b3e5-ea77a6ba035d\nConstant\nFlag New Values\nNaN\n\n\n8\n9\n20\n0e783798-e39f-49f2-ac42-70cd82ffd611\nUnionAll\nAppend New Values\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[3ea82c4a-1da1-4c37-b3e5-ea77a6ba035d, 52b67a4...\n52b67a4e-c879-432d-95f4-ccf64475f1b7\nSelectValues\nUp to Date Covid + Existing Webform Info\nNaN\n\n\n9\n9\n20\n0e783798-e39f-49f2-ac42-70cd82ffd611\nUnionAll\nAppend New Values\nNaN\nNaT\nNaT\nNaN\nNaT\nNaN\n[3ea82c4a-1da1-4c37-b3e5-ea77a6ba035d, 52b67a4...\n97044bf5-caa3-4420-b40f-9002d836d5c5\nSelectValues\nExisting Webform Info - No Longer in Covid\nNaN\n\n\n\n\n\n\n\n\n\ndef calculate_average(df):\n    \"\"\"calculates average execution time for each tile, differentiating by reported duration_in_sec vs actual_duration which assumes an upstream parent\"\"\"\n\n    return df.groupby(\n        [\"dataflow_id\", \"dataflow_version\", \"tile_id\", \"parent_tile_id\"]\n    ).agg(\n        {\n            \"name\": \"first\",\n            \"tile_type\": \"first\",\n            \"parent_tile_name\": \"first\",\n            \"parent_tile_type\": \"first\",\n            \"duration_in_sec\": \"mean\",\n            \"actual_duration_in_sec\": \"mean\",\n            \"rows_processed\": \"mean\",\n            \"parent_rows_processed\": \"mean\",\n        }\n    )\n\n\ncalculate_average(explode_df.copy())\n\n\n\n\n\n\n\n\n\n\n\n\nname\ntile_type\nparent_tile_name\nparent_tile_type\nduration_in_sec\nactual_duration_in_sec\nrows_processed\nparent_rows_processed\n\n\ndataflow_id\ndataflow_version\ntile_id\nparent_tile_id\n\n\n\n\n\n\n\n\n\n\n\n\n9\n20\n008ac1ce-4143-420f-93a7-9536ea986fc5\ne667577a-8c73-4677-8022-8bf3f3e7a72e\nRank & Window\nWindowAction\nAppend Unused DIM Countries\nUnionAll\nNaN\nNaN\nNaN\nNaN\n\n\n02a1f8dd-2b0a-4193-9c54-8d4fc19261cc\n250bf67d-8882-4078-a7d4-aa6dda1a1635\nSnapshot Age 1\nDateCalculator\nActive Cases 2\nNumericCalculator\nNaN\nNaN\nNaN\nNaN\n\n\n0362dd20-2039-403d-a249-94e2ce716aed\n18626a7b-c1a7-4fb4-bcc0-7e50ebd7e763\nToday\nConstant\nCountries Still Listed\nFilter\nNaN\nNaN\nNaN\nNaN\n\n\n06f8d60b-8b84-474d-91de-abcaefe10abf\n0e783798-e39f-49f2-ac42-70cd82ffd611\nDIM_Country (Join)\nSelectValues\nAppend New Values\nUnionAll\nNaN\nNaN\nNaN\nNaN\n\n\n08327437-2a70-49bb-9676-8e63f540eb84\n5da719b4-d4c6-4dfc-a928-38312de82df8\nNull Recovered 2\nValueMapper\nNull Deaths 2\nValueMapper\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n89\nd652deb2-cd3e-462d-9627-2f72425e05cf\n08327437-2a70-49bb-9676-8e63f540eb84\nNull New Recovered\nValueMapper\nNull Recovered\nValueMapper\n25.8714\n-1408.67276\n3424193.0\n3424193.0\n\n\ndac9af4e-a203-47f5-9493-ec46d834a51f\ncebf2fb3-75e3-48ee-bfe5-2af9927cb581\nResolved Cases 2\nNumericCalculator\nNull or 0 Long\nValueMapper\n25.8018\n-1408.70667\n3424193.0\n3424193.0\n\n\ndc5a2d0c-3bdf-4e94-a07a-7ff4709acc1f\n1d3e790a-dabf-45ba-849e-74996d7a03c9\nActive Cases 1\nNumericCalculator\nResolved Cases 1\nNumericCalculator\n7.8660\n-1415.71871\n389137.0\n389137.0\n\n\neeecc67b-34c4-4929-a4e3-34058aba039a\n43029ef0-9519-49c6-80c2-2f885e662221\nRanks 1\nSelectValues\nRecovered 1\nWindowAction\n0.0287\n-1419.28524\n60.0\n60.0\n\n\nfe46f53d-d10e-4e1e-b341-4d18f565e83b\nd652deb2-cd3e-462d-9627-2f72425e05cf\nNull or 0 Lat\nValueMapper\nNull New Recovered\nValueMapper\n25.8713\n-1408.67273\n3424193.0\n3424193.0\n\n\n\n\n551 rows × 8 columns\n\n\n\n\n\ndef get_action_list(domo_dataflow: dmdf.DomoDataflow):\n    return [\n        {\n            \"dataflow_id\": domo_dataflow.id,\n            \"datafow_name\": domo_dataflow.name,\n            \"action_type\": domo_action.type,\n        }\n        for domo_action in domo_dataflow.actions\n    ]\n\n\nget_action_list(domo_dataflow=dataflow_definition_ls[0])\n\n[{'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'SelectValues'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'Filter'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'SelectValues'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'Constant'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'Constant'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'MergeJoin'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'Filter'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'SelectValues'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'PublishToVault'}]\n\n\n\naction_ls = [get_action_list(dd_obj) for dd_obj in dataflow_definition_ls]\n\nflat_action_ls = [action for a_list in action_ls for action in a_list]\nflat_action_ls[0:5]\n\n[{'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'SelectValues'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'Filter'},\n {'dataflow_id': 340,\n  'datafow_name': 'Demo Active Employees',\n  'action_type': 'SelectValues'}]\n\n\n\nimport pandas as pd\n\ndf = pd.DataFrame(flat_action_ls)\ndf[0:5]\n\n\n\n\n\n\n\n\n\ndataflow_id\ndatafow_name\naction_type\n\n\n\n\n0\n340\nDemo Active Employees\nLoadFromVault\n\n\n1\n340\nDemo Active Employees\nSelectValues\n\n\n2\n340\nDemo Active Employees\nLoadFromVault\n\n\n3\n340\nDemo Active Employees\nFilter\n\n\n4\n340\nDemo Active Employees\nSelectValues\n\n\n\n\n\n\n\n\n\ndf.to_csv(\"marks_csv.csv\")"
  },
  {
    "objectID": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/without_domolibrary.html",
    "href": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/without_domolibrary.html",
    "title": "Tutorial - Generate a DomoStats dataset using DomoLibrary",
    "section": "",
    "text": "import os\n\ndomo_username = os.environ.get(\"DOMO_USERNAME\")\ndomo_instance = \"domo-community\"\ndomo_password = os.environ.get(\"DOJO_PASSWORD\")\n\n\nimport requests\n\n\ndef get_full_auth(\n    domo_instance, domo_username, domo_password\n) -&gt; str:  # returns a session token\n    \"\"\"use username and password to generate an access token\"\"\"\n\n    url = f\"https://{domo_instance}.domo.com/api/content/v2/authentication\"\n\n    body = {\n        \"method\": \"password\",\n        \"emailAddress\": domo_username,\n        \"password\": domo_password,\n    }\n\n    res = requests.request(method=\"POST\", url=url, json=body)\n    data = res.json()\n\n    token = data.get(\"sessionToken\")\n    if not token:\n        raise Exception(\"unable to retrieve a session token\")\n\n    return token\n\n\nsession_token = get_full_auth(domo_instance, domo_username, domo_password)\nassert session_token\n\n\ndef generate_query_dataflows_body(count=10, offset=0):\n    return {\n        \"entities\": [\"DATAFLOW\"],\n        \"count\": count,\n        \"offset\": offset,\n        \"combineResults\": False,\n        \"query\": \"*\",\n        \"filters\": [\n            {\n                \"filterType\": \"term\",\n                \"field\": \"data_flow_type\",\n                \"value\": \"MAGIC\",\n                \"name\": \"Magic ETL v2\",\n                \"not\": False,\n            }\n        ],\n    }\n\n\nbody_dataflows = generate_query_dataflows_body(10, 0)\nbody_dataflows\n\n{'entities': ['DATAFLOW'],\n 'count': 10,\n 'offset': 0,\n 'combineResults': False,\n 'query': '*',\n 'filters': [{'filterType': 'term',\n   'field': 'data_flow_type',\n   'value': 'MAGIC',\n   'name': 'Magic ETL v2',\n   'not': False}]}\n\n\n\ndef query_datacenter(\n    domo_instance,\n    session_token,\n    body,\n    return_raw: bool = False,\n    debug_api: bool = False,\n):\n    \"\"\"function that queries the datacenter and for a specific body\"\"\"\n\n    url = f\"https://{domo_instance}.domo.com/api/search/v1/query\"\n\n    if debug_api:\n        print({\"url\": url, \"body\": body})\n\n    headers = {\"x-domo-authentication\": session_token}\n\n    res = requests.request(url=url, method=\"POST\", headers=headers, json=body)\n\n    if return_raw:\n        return res\n\n    data = res.json()\n\n    return data.get(\"searchObjects\")\n\n\ndataflows_ls = query_datacenter(\n    domo_instance=domo_instance,\n    session_token=session_token,\n    body=body_dataflows,\n    debug_api=True,\n    return_raw=False,\n)\n\nprint(len(dataflows_ls))\ndataflows_ls[0]\n\n{'url': 'https://domo-community.domo.com/api/search/v1/query', 'body': {'entities': ['DATAFLOW'], 'count': 10, 'offset': 0, 'combineResults': False, 'query': '*', 'filters': [{'filterType': 'term', 'field': 'data_flow_type', 'value': 'MAGIC', 'name': 'Magic ETL v2', 'not': False}]}}\n10\n\n\n{'entityType': 'dataflow',\n 'databaseId': '131',\n 'searchId': {'indexName': None,\n  'databaseId': '131',\n  'customer': 'mmmm-0012-0200',\n  'entityType': 'dataflow'},\n 'createDate': 1678147044000,\n 'lastModified': 1678147835000,\n 'lastIndexed': 1680574033100,\n 'highlightedFields': {},\n 'language': 'English',\n 'requestAccess': False,\n 'score': 10.000001,\n 'name': 'BeastModesGovernance_01_AccumulateHistory',\n 'description': '',\n 'ownedById': '1893952720',\n 'ownedByName': 'Jae Wilson1',\n 'tags': [],\n 'lastRunDate': 1678147669000,\n 'inputDatasets': [{'name': 'Governance_Beast Modes',\n   'id': 'b7998b45-ccb5-4183-830e-8c2bdd489fd0'}],\n 'outputDatasets': [{'name': 'Governance_BeastMode_historical',\n   'id': 'e6559952-30ce-41a1-b831-f29ebe95d6e5'}],\n 'runCount': 2,\n 'successRate': 1.0,\n 'dataFlowType': 'MAGIC',\n 'status': 'SUCCESS',\n 'deleted': False,\n 'passwordProtected': False,\n 'abandoned': False,\n 'owners': [{'id': '1893952720',\n   'type': 'USER',\n   'displayName': 'Jae Wilson1'}],\n 'ownersLocalized': {'localizedMessage': 'Jae Wilson1', 'count': 1},\n 'paused': False,\n 'winnerText': 'BeastModesGovernance_01_AccumulateHistory',\n 'statusOrderPriority': 70,\n 'inputCount': 1,\n 'outputCount': 1,\n 'ownedByType': 'USER',\n 'customer': 'mmmm-0012-0200'}\n\n\n\ndataflow_ids = [dataflow.get(\"databaseId\") for dataflow in dataflows_ls]\ndataflow_ids\n\n['131', '227', '37', '185', '38', '226', '124', '46', '81', '75']\n\n\n\ndef get_dataflow_definition(dataflow_id, session_token, return_raw: bool = False):\n    url = f\"https://{domo_instance}.domo.com/api/dataprocessing/v1/dataflows/{dataflow_id}\"\n\n    headers = {\"x-domo-authentication\": session_token}\n\n    res = requests.request(method=\"get\", url=url, headers=headers)\n\n    if return_raw:\n        return res\n\n    data = res.json()\n\n    return data\n\n\nget_dataflow_definition(dataflow_ids[0], session_token=session_token)\n\n{'id': 131,\n 'name': 'BeastModesGovernance_01_AccumulateHistory',\n 'dapDataFlowId': '564d37be-bc96-485f-a854-ef3985864551',\n 'responsibleUserId': 1893952720,\n 'runState': 'ENABLED',\n 'onboardFlowVersion': {'id': 520,\n  'timeStamp': 1678147835000,\n  'authorId': 1893952720,\n  'numInputs': 1,\n  'numOutputs': 1,\n  'executionCount': 0,\n  'executionSuccessCount': 0,\n  'versionNumber': 3},\n 'lastExecution': {'id': 272919,\n  'onboardFlowId': 131,\n  'previewRows': 0,\n  'dapDataFlowExecutionId': '4759ab00-3f9d-4d55-9087-32aa38655a51',\n  'beginTime': 1678147659000,\n  'endTime': 1678147669000,\n  'lastUpdated': 1678147669000,\n  'failed': False,\n  'state': 'SUCCESS',\n  'dataFlowVersion': 519},\n 'created': 1678147044000,\n 'modified': 1678147835000,\n 'actions': [{'type': 'LoadFromVault',\n   'id': '40554fc4-428a-4117-8820-b3f4f4927021',\n   'name': 'Governance_Beast Modes',\n   'gui': {'x': 312,\n    'y': 132,\n    'color': 3238043,\n    'colorSource': None,\n    'sampleJson': None},\n   'dataSourceId': 'b7998b45-ccb5-4183-830e-8c2bdd489fd0',\n   'executeFlowWhenUpdated': False,\n   'pseudoDataSource': False,\n   'truncateTextColumns': False,\n   'truncateRows': False,\n   'onlyLoadNewVersions': False},\n  {'type': 'ExpressionEvaluator',\n   'id': '05082103-d42e-49ab-a66e-bd31b4c0e3df',\n   'name': 'Add Formula',\n   'dependsOn': ['40554fc4-428a-4117-8820-b3f4f4927021'],\n   'gui': {'x': 456,\n    'y': 132,\n    'color': None,\n    'colorSource': None,\n    'sampleJson': None},\n   'expressions': [{'expression': \"'2023-03-06'\",\n     'fieldName': 'report_date',\n     'settings': None}]},\n  {'type': 'PublishToVault',\n   'id': 'fe77761b-eb11-4491-b19c-ebb56d009b76',\n   'name': 'Governance_BeastMode_historical',\n   'dependsOn': ['05082103-d42e-49ab-a66e-bd31b4c0e3df'],\n   'gui': {'x': 600,\n    'y': 132,\n    'color': None,\n    'colorSource': None,\n    'sampleJson': None},\n   'dataSource': {'guid': 'e6559952-30ce-41a1-b831-f29ebe95d6e5',\n    'type': 'DataFlow',\n    'name': 'Governance_BeastMode_historical',\n    'cloudId': 'domo'},\n   'versionChainType': 'APPEND',\n   'partitionIdColumns': ['report_date'],\n   'schemaSource': 'DATAFLOW',\n   'partitioned': True}],\n 'engineProperties': {'kettle.mode': 'STRICT'},\n 'inputs': [{'dataSourceId': 'b7998b45-ccb5-4183-830e-8c2bdd489fd0',\n   'executeFlowWhenUpdated': False,\n   'dataSourceName': 'Governance_Beast Modes',\n   'onlyLoadNewVersions': False}],\n 'outputs': [{'onboardFlowId': None,\n   'dataSourceId': 'e6559952-30ce-41a1-b831-f29ebe95d6e5',\n   'dataSourceName': 'Governance_BeastMode_historical',\n   'versionChainType': 'APPEND'}],\n 'executionCount': 2,\n 'executionSuccessCount': 2,\n 'hydrationState': 'DEHYDRATED',\n 'useLegacyTriggerBehavior': False,\n 'passwordProtected': False,\n 'deleted': False,\n 'abandoned': False,\n 'neverAbandon': False,\n 'settings': {},\n 'paused': False,\n 'restricted': False,\n 'enabled': True,\n 'container': False,\n 'databaseType': 'MAGIC',\n 'triggeredByInput': False,\n 'draft': False,\n 'editable': True,\n 'numInputs': 1,\n 'numOutputs': 1,\n 'magic': True,\n 'subsetProcessing': True}\n\n\n\ndataflow_definition_ls = [\n    get_dataflow_definition(dataflow_id, session_token=session_token)\n    for dataflow_id in dataflow_ids\n]\ndataflow_definition_ls[0]\n\n{'id': 131,\n 'name': 'BeastModesGovernance_01_AccumulateHistory',\n 'dapDataFlowId': '564d37be-bc96-485f-a854-ef3985864551',\n 'responsibleUserId': 1893952720,\n 'runState': 'ENABLED',\n 'onboardFlowVersion': {'id': 520,\n  'timeStamp': 1678147835000,\n  'authorId': 1893952720,\n  'numInputs': 1,\n  'numOutputs': 1,\n  'executionCount': 0,\n  'executionSuccessCount': 0,\n  'versionNumber': 3},\n 'lastExecution': {'id': 272919,\n  'onboardFlowId': 131,\n  'previewRows': 0,\n  'dapDataFlowExecutionId': '4759ab00-3f9d-4d55-9087-32aa38655a51',\n  'beginTime': 1678147659000,\n  'endTime': 1678147669000,\n  'lastUpdated': 1678147669000,\n  'failed': False,\n  'state': 'SUCCESS',\n  'dataFlowVersion': 519},\n 'created': 1678147044000,\n 'modified': 1678147835000,\n 'actions': [{'type': 'LoadFromVault',\n   'id': '40554fc4-428a-4117-8820-b3f4f4927021',\n   'name': 'Governance_Beast Modes',\n   'gui': {'x': 312,\n    'y': 132,\n    'color': 3238043,\n    'colorSource': None,\n    'sampleJson': None},\n   'dataSourceId': 'b7998b45-ccb5-4183-830e-8c2bdd489fd0',\n   'executeFlowWhenUpdated': False,\n   'pseudoDataSource': False,\n   'truncateTextColumns': False,\n   'truncateRows': False,\n   'onlyLoadNewVersions': False},\n  {'type': 'ExpressionEvaluator',\n   'id': '05082103-d42e-49ab-a66e-bd31b4c0e3df',\n   'name': 'Add Formula',\n   'dependsOn': ['40554fc4-428a-4117-8820-b3f4f4927021'],\n   'gui': {'x': 456,\n    'y': 132,\n    'color': None,\n    'colorSource': None,\n    'sampleJson': None},\n   'expressions': [{'expression': \"'2023-03-06'\",\n     'fieldName': 'report_date',\n     'settings': None}]},\n  {'type': 'PublishToVault',\n   'id': 'fe77761b-eb11-4491-b19c-ebb56d009b76',\n   'name': 'Governance_BeastMode_historical',\n   'dependsOn': ['05082103-d42e-49ab-a66e-bd31b4c0e3df'],\n   'gui': {'x': 600,\n    'y': 132,\n    'color': None,\n    'colorSource': None,\n    'sampleJson': None},\n   'dataSource': {'guid': 'e6559952-30ce-41a1-b831-f29ebe95d6e5',\n    'type': 'DataFlow',\n    'name': 'Governance_BeastMode_historical',\n    'cloudId': 'domo'},\n   'versionChainType': 'APPEND',\n   'partitionIdColumns': ['report_date'],\n   'schemaSource': 'DATAFLOW',\n   'partitioned': True}],\n 'engineProperties': {'kettle.mode': 'STRICT'},\n 'inputs': [{'dataSourceId': 'b7998b45-ccb5-4183-830e-8c2bdd489fd0',\n   'executeFlowWhenUpdated': False,\n   'dataSourceName': 'Governance_Beast Modes',\n   'onlyLoadNewVersions': False}],\n 'outputs': [{'onboardFlowId': None,\n   'dataSourceId': 'e6559952-30ce-41a1-b831-f29ebe95d6e5',\n   'dataSourceName': 'Governance_BeastMode_historical',\n   'versionChainType': 'APPEND'}],\n 'executionCount': 2,\n 'executionSuccessCount': 2,\n 'hydrationState': 'DEHYDRATED',\n 'useLegacyTriggerBehavior': False,\n 'passwordProtected': False,\n 'deleted': False,\n 'abandoned': False,\n 'neverAbandon': False,\n 'settings': {},\n 'paused': False,\n 'restricted': False,\n 'enabled': True,\n 'container': False,\n 'databaseType': 'MAGIC',\n 'triggeredByInput': False,\n 'draft': False,\n 'editable': True,\n 'numInputs': 1,\n 'numOutputs': 1,\n 'magic': True,\n 'subsetProcessing': True}\n\n\n\ndef get_action_list(dd_obj):\n    return [\n        {\n            \"dataflow_id\": dd_obj.get(\"id\"),\n            \"datafow_name\": dd_obj.get(\"name\"),\n            \"action_type\": action.get(\"type\"),\n        }\n        for action in dd_obj.get(\"actions\")\n    ]\n\n\nget_action_list(dd_obj=dataflow_definition_ls[0])\n\n[{'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'ExpressionEvaluator'},\n {'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'PublishToVault'}]\n\n\n\naction_ls = [get_action_list(dd_obj) for dd_obj in dataflow_definition_ls]\n\nflat_action_ls = [action for a_list in action_ls for action in a_list]\nflat_action_ls[0:5]\n\n[{'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'ExpressionEvaluator'},\n {'dataflow_id': 131,\n  'datafow_name': 'BeastModesGovernance_01_AccumulateHistory',\n  'action_type': 'PublishToVault'},\n {'dataflow_id': 227,\n  'datafow_name': 'DDX_Landing Page_QA',\n  'action_type': 'LoadFromVault'},\n {'dataflow_id': 227,\n  'datafow_name': 'DDX_Landing Page_QA',\n  'action_type': 'WindowAction'}]\n\n\n\nimport pandas as pd\n\ndf = pd.DataFrame(flat_action_ls)\ndf[0:5]\n\n\n\n\n\n\n\n\n\ndataflow_id\ndatafow_name\naction_type\n\n\n\n\n0\n131\nBeastModesGovernance_01_AccumulateHistory\nLoadFromVault\n\n\n1\n131\nBeastModesGovernance_01_AccumulateHistory\nExpressionEvaluator\n\n\n2\n131\nBeastModesGovernance_01_AccumulateHistory\nPublishToVault\n\n\n3\n227\nDDX_Landing Page_QA\nLoadFromVault\n\n\n4\n227\nDDX_Landing Page_QA\nWindowAction\n\n\n\n\n\n\n\n\n\ndf.to_csv(\"marks_csv.csv\")"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "",
    "text": "a short post on using DomoLibrary to create and update custom roles with new grant lists and auto assign users to that role"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html#configure-environment-variables",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html#configure-environment-variables",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "⚙️ configure environment variables",
    "text": "⚙️ configure environment variables\nThis script assumes the use of a dotenv file (in this example sample_config.txt)\n\n# pip install python-dotenv\n\n\nfrom dotenv import dotenv_values\n\nenv = dotenv_values(\"sample_config.txt\")\nenv\n\nOrderedDict([('ROLE_NAME', 'dl_department_admin'),\n             ('ROLE_DESCRIPTION', 'deployed via domo_library script'),\n             ('ROLE_GRANTS',\n              'alert.edit, alert.actions, content.card.embed, content.export, content.variable.edit, audit, datastore.create, dataset.manage, dataset.export, publish.subscribers.manage, user.invite, group.edit, certifiedcontent.admin, certifiedcontent.request'),\n             ('ROLE_EMAILS', 'test1@test.com, test2@test.com'),\n             ('ROLE_NAME2', 'dl_test'),\n             ('ROLE_DESCRIPTION2', 'deployed via domo_library script'),\n             ('ROLE_GRANTS2', 'alert.edit, alert.actions, content.card.embed'),\n             ('ROLE_EMAILS2',\n              'test3@test.com, test3@test.com, test4@test.com')])"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html#creds-config-and-roles-to-create",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html#creds-config-and-roles-to-create",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "⚙️ Creds config and roles to create",
    "text": "⚙️ Creds config and roles to create\nthe domolibrary features a class based and function based approach to interacting with domo entities.\nuse the domolibrary.client.DomoAuth objects to handle api authentication\naccess_tokens can be configured in Domo &gt; Auth &gt; Security &gt; Access Token and have the benefit of not requiring direct signon access in environments that are using SSO\n\n# pip install domolibrary --upgrade\n\n\nimport domolibrary.client.DomoAuth as dmda\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait token_auth.get_auth_token()\n\nassert isinstance(token_auth.token, str)"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html#templatize-user-input-with-classes",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html#templatize-user-input-with-classes",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "Templatize user input with classes",
    "text": "Templatize user input with classes\nThe custom EnvRole class allows users to define configuration in the .env file; however ensures conformity and reduces code redundancy by templatizing the required input.\n\nfrom pprint import pprint\nfrom dataclasses import dataclass\nimport domolibrary.classes.DomoGrant as dmg\n\n\n@dataclass\nclass EnvRole:\n    name: str\n    description: str\n    grant_ls: [\n        dmg.DomoGrant\n    ]  # grants are consistent across domo instances so can be defined on initialization\n    user_ls: [\n        str\n    ]  # each instance would have a diferent user_id associated with each instance so should be handled on a per instance basis (DomoUsers expect a set user id)\n\n    \"\"\"custom class for templatizing roles to create\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        description: str,\n        grants_str: str,  # comma separated string of grant_ids\n        user_str: [str],\n    ):\n        self.name = name\n        self.description = description\n        self.grant_ls = [\n            dmg.DomoGrant(id=grant.strip()) for grant in grants_str.split(\",\")\n        ]\n        self.user_ls = [user.strip() for user in user_str.split(\",\")]\n\n        # List of roles that will be created\n\n\nroles_to_create = [\n    EnvRole(\n        name=env[\"ROLE_NAME\"],\n        description=env[\"ROLE_DESCRIPTION\"],\n        grants_str=env[\"ROLE_GRANTS\"],\n        user_str=env[\"ROLE_EMAILS\"],\n    ),\n    EnvRole(\n        name=env[\"ROLE_NAME2\"],\n        description=env[\"ROLE_DESCRIPTION2\"],\n        grants_str=env[\"ROLE_GRANTS2\"],\n        user_str=env[\"ROLE_EMAILS2\"],\n    ),\n]\n\npprint(roles_to_create)\n\n[EnvRole(name='dl_department_admin',\n         description='deployed via domo_library script',\n         grant_ls=[DomoGrant(id='alert.edit',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='alert.actions',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='content.card.embed',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='content.export',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='content.variable.edit',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='audit',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='datastore.create',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='dataset.manage',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='dataset.export',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='publish.subscribers.manage',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='user.invite',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='group.edit',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='certifiedcontent.admin',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='certifiedcontent.request',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None)],\n         user_ls=['test1@test.com', 'test2@test.com']),\n EnvRole(name='dl_test',\n         description='deployed via domo_library script',\n         grant_ls=[DomoGrant(id='alert.edit',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='alert.actions',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None),\n                   DomoGrant(id='content.card.embed',\n                             display_group=None,\n                             title=None,\n                             depends_on_ls=None,\n                             description=None,\n                             role_membership_ls=None)],\n         user_ls=['test3@test.com', 'test3@test.com', 'test4@test.com'])]"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html#define-functions-that-bridge-the-envrole-with-domolibrary-classes",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html#define-functions-that-bridge-the-envrole-with-domolibrary-classes",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "Define Functions that bridge the EnvRole with domolibrary classes",
    "text": "Define Functions that bridge the EnvRole with domolibrary classes\nIn the examples below, the functions are very simple and just call the API with passthrough parameters; however, more customization could be added for example defining a default role_description if one wasn’t provided.\nNotice how upsert_super_admin doesn’t even accept a list of grants and instead pulls a list of all available grants from that Domo Instance.\nThis might be necessary because Domo by default doesn’t grant all grants to the Admin role.\n\nimport domolibrary.classes.DomoRole as dmr\nimport domolibrary.client.DomoAuth as dmda\n\n\nasync def upsert_role(\n    auth: dmda.DomoAuth,\n    role_name: str,\n    role_description: str,\n    grant_ls: [dmg.DomoGrant],\n    debug_api: bool = False,\n    debug_prn: bool = False,\n):\n\n    return await dmr.DomoRoles.upsert_role(\n        auth=auth, name=role_name, description=role_description, grant_ls=grant_ls\n    )\n\n\nsample implementation of upsert_role\n\nimport datetime as dt\n\nrole = roles_to_create[0]\n\nawait upsert_role(\n    auth=token_auth,\n    role_name=role.name,\n    role_description=f\"{role.description} - updated {dt.date.today()}\",\n    grant_ls=role.grant_ls,\n    debug_prn=True,\n)\n\n[DomoGrant(id='alert.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='alert.actions', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.embed', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.variable.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='audit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datastore.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='publish.subscribers.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='user.invite', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='group.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.request', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)]\n\n\nDomoRole(id=1563101750, name='dl_department_admin', description='deployed via domo_library script - updated 2023-03-23', is_system_role=0, is_default_role=False, grant_ls=[DomoGrant(id='alert.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.embed', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datastore.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='group.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='publish.subscribers.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.request', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='alert.actions', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='audit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='user.invite', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.variable.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)], membership_ls=[])\n\n\n\nimport datetime as dt\nimport domolibrary.classes.DomoInstanceConfig as dmic\n\n\n# grants for super admin role are getting directly from instance using get_all_instance_grants\nasync def upsert_super_admin(\n    auth: dmda.DomoAuth,\n    role_name: str,\n    role_description=f\"all grants - updated on {dt.date.today()}\",\n    debug_api: bool = False,\n    debug_prn: bool = False,\n):\n\n    domo_instance = dmic.DomoInstanceConfig(auth=auth)\n    all_grants = await domo_instance.get_grants()\n\n    sa_role = await dmr.DomoRoles.upsert_role(\n        name=role_name,\n        description=role_description,\n        auth=auth,\n        debug_api=debug_api,\n        grant_ls=all_grants,\n    )\n\n    return sa_role\n\n\n\nsample implementation of creating a super_admin role\n\nawait upsert_super_admin(auth=token_auth, role_name=\"super_admin\")\n\n[DomoGrant(id='authorization.roles', display_group='COMPANY', title='Manage all roles', depends_on_ls=['ui.admin'], description='Create, edit and delete custom roles. Assign anyone to any role in this instance.', role_membership_ls=['1', '275763436', '810756122']), DomoGrant(id='audit', display_group='COMPANY', title='View activity logs', depends_on_ls=['ui.admin'], description='View and export audit logs.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='customer.edit', display_group='COMPANY', title='Manage all company settings', depends_on_ls=['ui.admin'], description='Manage company metadata, authentication rules, authorized domain rules, export security, mobile home screen layouts, publishing, SSO Configuration, whitelist rules, report scheduler and licenses.', role_membership_ls=['1', '275763436', '810756122']), DomoGrant(id='developer.token.manage', display_group='COMPANY', title='Manage all access tokens and API clients', depends_on_ls=['ui.admin'], description='Create and delete any access tokens and API clients.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='domo.system.messages', display_group='COMPANY', title='Receive Domo System Messages', depends_on_ls=['ui.admin'], description='Receive Domo system messages about maintenance and feature updates. Ensure at least one Admin receives these messages.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='usage.reports.view', display_group='COMPANY', title='View usage metrics', depends_on_ls=[], description='View and export usage metrics.', role_membership_ls=['1', '810756122']), DomoGrant(id='user.edit', display_group='USERS_GROUPS', title='Manage all users', depends_on_ls=['ui.admin'], description='Create, edit and delete any user and reset their password.', role_membership_ls=['1', '275763436', '810756122']), DomoGrant(id='user.invite', display_group='USERS_GROUPS', title='Add new people', depends_on_ls=['ui.admin'], description='Add new people.', role_membership_ls=['1', '2', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='user.session.edit', display_group='USERS_GROUPS', title='Edit user Sessions', depends_on_ls=['ui.admin'], description='Immediately log any user out of Domo', role_membership_ls=['1', '810756122']), DomoGrant(id='group.edit', display_group='USERS_GROUPS', title='Edit groups', depends_on_ls=['ui.admin'], description='Create, edit and delete groups the person has been granted access to. Add and remove people from groups the person with the grant has access to.', role_membership_ls=['1', '2', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='group.admin', display_group='USERS_GROUPS', title='Manage all groups', depends_on_ls=['ui.admin'], description='Create, edit and delete any groups. Add and remove people from any group.', role_membership_ls=['1', '275763436', '810756122']), DomoGrant(id='profile.achieve.assign', display_group='USERS_GROUPS', title='Assign achievements', depends_on_ls=['ui.admin'], description='Create, edit, delete and assign achievements.', role_membership_ls=['1', '2', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='buzz.admin', display_group='SOCIAL', title='Edit conversations and messages', depends_on_ls=[], description=\"Edit and delete conversations in Buzz to which you have access. Delete other people's comments in conversations to which you have access. View and edit social user settings.\", role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='tasks.admin', display_group='WORKFLOWS', title='Manage all public Projects and Tasks', depends_on_ls=[], description='View, edit, or archive any public Project in this instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='tasks.private.admin', display_group='WORKFLOWS', title='Manage all private Projects and Tasks', depends_on_ls=[], description='View, edit, or archive any private Project in this instance.', role_membership_ls=['810756122']), DomoGrant(id='certifiedcontent.admin', display_group='WORKFLOWS', title='Manage Certified Content', depends_on_ls=['ui.admin'], description='Create, edit and delete certification processes. View, edit and remove the certification of any certified entity. Cancel any requested or pending certification request. Certify any entity with one step certification.', role_membership_ls=['1', '104295428', '275763436', '810756122', '1927158482', '1563101750']), DomoGrant(id='certifiedcontent.request', display_group='WORKFLOWS', title='Request certification', depends_on_ls=[], description='Submit a certification request for content you have access to.', role_membership_ls=['1', '2', '3', '275763436', '4', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='approvalcenter.admin', display_group='WORKFLOWS', title='Manage all approvals', depends_on_ls=['ui.admin'], description='View, edit, cancel, or share any request submitted through Approval Center.', role_membership_ls=['1', '810756122']), DomoGrant(id='appstore.admin', display_group='APPSTORE', title='Manage Appstore', depends_on_ls=[], description='View listings of installed Apps, uninstall previously installed Apps, and approve newly submitted Apps in this instance.', role_membership_ls=['1', '104295428', '275763436', '810756122', '1927158482']), DomoGrant(id='appstore.edit', display_group='APPSTORE', title='Use Appstore', depends_on_ls=[], description='Install and use Apps from the Appstore. Uninstall Apps that you previously installed.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='appstore.read', display_group='APPSTORE', title='View Appstore', depends_on_ls=[], description='View the Appstore and App information.', role_membership_ls=['1', '2', '3', '275763436', '4', '810756122', '1927158482', '2097317660']), DomoGrant(id='appstore.payments.manage', display_group='APPSTORE', title='Manage Appstore payments', depends_on_ls=[], description='Manage methods of receiving payments within the Appstore.', role_membership_ls=['1', '810756122']), DomoGrant(id='domoapps.read', display_group='DOMO_APPS', title='View DomoApps', depends_on_ls=[], description='View custom DomoApps to which you have access.', role_membership_ls=['1', '2', '3', '275763436', '4', '810756122', '1927158482', '2097317660']), DomoGrant(id='domoapps.edit', display_group='DOMO_APPS', title='Create DomoApps', depends_on_ls=[], description='Create, edit and upload custom DomoApps.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='app.admin', display_group='DOMO_APPS', title='Manage DomoApps', depends_on_ls=[], description='View and manage all custom apps.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='app.ddx', display_group='DOMO_APPS', title='Create DDX Apps', depends_on_ls=[], description='Create and edit DDX apps.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='datastore.create', display_group='DATA', title='Use AppDB', depends_on_ls=[], description='Create data in AppDB.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='datastore.admin', display_group='DATA', title='Manage AppDB', depends_on_ls=[], description='View and manage all data in AppDB.', role_membership_ls=['1', '104295428', '275763436', '810756122', '1927158482']), DomoGrant(id='workflow.create', display_group='WORKFLOWS', title='Create Workflows', depends_on_ls=[], description='Create workflow models.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='workflow.admin', display_group='WORKFLOWS', title='Manage Workflows', depends_on_ls=[], description='View and manage all workflow models and workflow instances.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='form.create', display_group='FORMS', title='Create Forms', depends_on_ls=[], description='Create new forms.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='form.admin', display_group='FORMS', title='Manage Forms', depends_on_ls=[], description='View, publish, and manage all forms, their versions, and contracts.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='queue.create', display_group='QUEUES', title='Create Task Queues', depends_on_ls=[], description='Create new task queues.', role_membership_ls=['1', '2', '3', '810756122', '2097317660']), DomoGrant(id='queue.admin', display_group='QUEUES', title='Manage Task Queues', depends_on_ls=[], description='Create, view, and manage all task queues.', role_membership_ls=['1', '810756122']), DomoGrant(id='content.card.embed', display_group='CARDS_PAGES', title='Embed content', depends_on_ls=[], description='Use Domo Everywhere to embed Cards and Dashboards externally, with or without authentication.', role_membership_ls=['1', '2', '3', '275763436', '1662852841', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='content.card.edit', display_group='CARDS_PAGES', title='Edit Cards', depends_on_ls=['ui.admin'], description='Create, edit and delete Cards, Drill views, and Beast Modes to which you have access. Share cards to which you have access.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='content.card.analyzerview', display_group='CARDS_PAGES', title='Create DataSet views in Analyzer', depends_on_ls=[], description='Create and edit DataSet views in Analyzer', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='content.page.edit', display_group='CARDS_PAGES', title='Edit Pages', depends_on_ls=['ui.admin'], description='Create, edit and delete Pages, styles, templates, and layouts.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='content.export', display_group='CARDS_PAGES', title='Export from Domo', depends_on_ls=[], description='Create Scheduled Reports and export to email, print, PowerPoint, CSV, and Excel.', role_membership_ls=['1', '2', '3', '275763436', '4', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='content.admin', display_group='CARDS_PAGES', title='Manage all Cards, Pages and Data apps', depends_on_ls=['ui.admin'], description='View, create, edit, share and delete any Card or Page or Data app in this instance. Subscribe to Publications from other instances.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='content.card.narrative.edit', display_group='CARDS_PAGES', title='Edit Narrative Cards', depends_on_ls=['content.card.edit'], description='\"Create and edit natural language generated narratives in notebook cards.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='content.variable.edit', display_group='CARDS_PAGES', title='Edit Variables', depends_on_ls=['content.card.edit'], description='Create, edit and delete Variables', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='content.dataapp.edit', display_group='CARDS_PAGES', title='Edit Data app', depends_on_ls=['content.page.edit', 'ui.admin'], description='View, create, edit, share and delete Data app', role_membership_ls=['1', '2', '3', '275763436', '810756122']), DomoGrant(id='saasaas.edit', display_group='SAASAAS', title='Manage Publication Groups', depends_on_ls=['ui.admin'], description='Create, edit, and delete any Publication Groups in this instance', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='account.admin', display_group='DATA', title='Manage all accounts', depends_on_ls=['account.view.all'], description='Create, edit, delete, and control sharing on any account.', role_membership_ls=['810756122']), DomoGrant(id='account.view.all', display_group='DATA', title='View all accounts', depends_on_ls=[], description='View all accounts in this instance.', role_membership_ls=['810756122']), DomoGrant(id='dataset.manage', display_group='DATA', title='Edit DataSet', depends_on_ls=['ui.datacenter'], description='Create, edit and delete DataSets to which you have access.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='dataset.admin', display_group='DATA', title='Manage DataSet', depends_on_ls=['ui.datacenter', 'dataset.manage'], description='View, edit and delete any DataSets in this instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='dataset.export', display_group='DATA', title='Export DataSet', depends_on_ls=[], description='Export data from DataSets you have access to.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='dataset.account.create', display_group='DATA', title='Create Dataset Account', depends_on_ls=['ui.datacenter', 'dataset.manage'], description='Create accounts for DataSets in this instance.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='dataset.account.create.big.query', display_group='DATA', title='Create Google Big Query Account', depends_on_ls=[], description='Create Google Big Query accounts for DataSets in this instance.', role_membership_ls=['810756122', '1927158482']), DomoGrant(id='dataset.account.create.federated.oauth', display_group='DATA', title='Create Federated OAuth Accounts', depends_on_ls=[], description='Create Federated OAuth accounts for DataSets in this instance.', role_membership_ls=['810756122']), DomoGrant(id='cloud.admin', display_group='DATA', title='Manage Cloud Accounts', depends_on_ls=[], description='Manage cloud accounts in this instance.  Ability to edit all OAuth Configurations created by all users', role_membership_ls=['1', '104295428', '810756122']), DomoGrant(id='cloud.override', display_group='DATA', title='Override Default Cloud', depends_on_ls=[], description='Override the default cloud account when creating a new DataSet or computing a Data Flow.', role_membership_ls=['1', '810756122']), DomoGrant(id='workbench.download', display_group='DATA', title='Download Workbench', depends_on_ls=[], description='Allow download of workbench.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='workbench.enterprise.admin', display_group='WORKBENCH', title='Manage Workbench Enterprise', depends_on_ls=[], description='Allows editing of all jobs and configurations in Workbench Enterprise', role_membership_ls=['810756122']), DomoGrant(id='workbench.enterprise.edit', display_group='WORKBENCH', title='Edit Workbench Enterprise', depends_on_ls=[], description='Allows editing of all jobs in Workbench Enterprise', role_membership_ls=['810756122']), DomoGrant(id='workbench.enterprise.view', display_group='WORKBENCH', title='View Workbench Enterprise', depends_on_ls=[], description='Allow viewing jobs in Workbench Enterprise', role_membership_ls=['810756122']), DomoGrant(id='dataflow.manage', display_group='DATA', title='Edit DataFlow', depends_on_ls=[], description='Create, edit and delete DataFlows to which you have access.  Requires the Edit DataSet grant.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='dataflow.admin', display_group='DATA', title='Manage DataFlow', depends_on_ls=['dataflow.manage', 'dataflow.adrenaline'], description='View, edit and delete any DataFlows in this instance. Requires the Manage DataSet grant.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='ml.execute', display_group='DATA', title='Execute AutoML', depends_on_ls=['dataflow.manage', 'dataflow.magic'], description='Train AutoML models. Run DataFlows containing AutoML Inference actions.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='dataflow.adrenaline', display_group='DATA', title='Edit Adrenaline DataFlow', depends_on_ls=['dataflow.manage'], description='Create, edit and run Adrenaline DataFlows to which you have access.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='dataflow.magic', display_group='DATA', title='Edit Magic ETL v2 DataFlow', depends_on_ls=['dataflow.manage'], description='Create, edit and run Magic ETL v2 DataFlows to which you have access.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='alert.edit', display_group='ALERTS', title='Use Alerts', depends_on_ls=[], description='Create, edit and share any Alerts to which you have access.', role_membership_ls=['1', '2', '3', '275763436', '4', '1662852841', '5', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='alert.admin', display_group='ALERTS', title='Manage all Alerts', depends_on_ls=['alert.edit', 'alert.actions'], description=\"View, edit and delete any Alerts irrespective of access to underlying Cards or DataSets. Note that while this doesn't grant access to Cards or DataSets, these users will be able to see computed information as part of the alert values and/or alert history. Typically reserved for Major Domo's or Administrators\", role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='alert.actions', display_group='ALERTS', title='Use Alert Actions', depends_on_ls=['alert.edit'], description='View, edit, add, or delete Alert Actions on any Alert of which the user is owner.', role_membership_ls=['1', '2', '3', '275763436', '1662852841', '810756122', '1927158482', '1563101750', '2097317660']), DomoGrant(id='goal.edit', display_group='GOALS', title='Use Goals', depends_on_ls=['alert.edit'], description='Create and edit any Goals to which you have access.', role_membership_ls=['1', '2', '3', '4', '810756122']), DomoGrant(id='goal.admin', display_group='GOALS', title='Manage all Goals', depends_on_ls=['goal.distribute', 'goal.edit'], description='Edit and delete any Goals in this instance. This should be reserved for Admins or those who administer the goals strategy in your company.', role_membership_ls=['1', '810756122']), DomoGrant(id='goal.distribute', display_group='GOALS', title='Create distributed goals', depends_on_ls=['goal.edit'], description='Create and edit Goals that are distributed in bulk to large groups of people.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='connector.admin', display_group='CONNECTORS', title='Manage Connectors', depends_on_ls=[], description='Create, edit, and delete user and group access to connectors in this instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='datascience.notebooks.create', display_group='DATA', title='Create Jupyter Workspace', depends_on_ls=[], description='Create, edit and delete Jupyter Workspaces to which you have access.  Requires the Edit DataSet grant.', role_membership_ls=['1', '2', '3', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='datascience.notebooks.admin', display_group='DATA', title='Manage Jupyter Workspace', depends_on_ls=['datascience.notebooks.create'], description='View, edit and delete any Jupyter Workspaces in this instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='publish.publication.create', display_group='PUBLISH', title='Manage Publications', depends_on_ls=[], description='Create, edit, or remove Publications.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='publish.space.admin', display_group='PUBLISH', title='Manage Domo Spaces', depends_on_ls=[], description='Request, modify, terminate, or otherwise manage Domo Spaces', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='publish.subscribers.manage', display_group='PUBLISH', title='Manage Subscribers', depends_on_ls=[], description='Create and delete subscribers.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '1563101750']), DomoGrant(id='pipeline.executor.job.create', display_group='PIPELINE_EXECUTOR', title='Create Custom Pipeline Processes', depends_on_ls=[], description='Create, edit, or remove custom pipeline processes.', role_membership_ls=['1', '2', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='pipeline.executor.job.admin', display_group='PIPELINE_EXECUTOR', title='Administer Custom Pipeline Processes', depends_on_ls=[], description='Administer custom pipeline processes.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='versions.deployment.manage', display_group='VERSIONS', title='Manage Repository Promotions', depends_on_ls=[], description='Promote repository commits in this instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='versions.repository.create', display_group='VERSIONS', title='Manage Repositories', depends_on_ls=[], description='Create, edit, and delete Sandbox repositories. Repositories store metadata of content, such as Cards and Pages, to allow them to be recreated in a Domo instance.', role_membership_ls=['1', '275763436', '810756122', '1927158482']), DomoGrant(id='versions.repository.admin', display_group='VERSIONS', title='Administer Sandbox', depends_on_ls=[], description='Administer Sandbox, including authorizing read access to Sandbox Repositories to other instances.', role_membership_ls=['1', '104295428', '275763436', '810756122', '1927158482']), DomoGrant(id='codeengine.package.manage', display_group='CODEENGINE', title='Create Code Engine Packages', depends_on_ls=[], description='Create, read, write, execute, share, delete Code Engine packages.', role_membership_ls=['1', '104295428', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='codeengine.package.admin', display_group='CODEENGINE', title='Manage Code Engine Packages', depends_on_ls=[], description='Create, view, and manage all Code Engine packages.', role_membership_ls=['1', '275763436', '810756122', '1927158482', '2097317660']), DomoGrant(id='fileshare.admin', display_group='DATA', title='Manage Fileshare Directories', depends_on_ls=['fileshare.create'], description='View, edit and delete any Fileshare Directory in this instance.', role_membership_ls=['1', '275763436', '810756122']), DomoGrant(id='fileshare.create', display_group='DATA', title='Create Fileshare Directories', depends_on_ls=[], description='Create, edit and delete Fileshare directories that you can access.', role_membership_ls=['1', '2', '3', '275763436', '810756122'])]\n\n\nDomoRole(id=810756122, name='super_admin', description='updated via domolibrary on 2023-03-24', is_system_role=0, is_default_role=False, grant_ls=[DomoGrant(id='versions.deployment.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='buzz.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataflow.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='goal.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workflow.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='account.view.all', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='profile.achieve.assign', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datascience.notebooks.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.dataapp.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='user.invite', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='connector.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.analyzerview', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='fileshare.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='customer.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.variable.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='pipeline.executor.job.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='cloud.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='versions.repository.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='codeengine.package.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='appstore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datastore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='group.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='tasks.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='group.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='app.ddx', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='queue.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workbench.enterprise.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='domoapps.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.export', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='codeengine.package.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='domo.system.messages', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.account.create.big.query', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='publish.space.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='authorization.roles', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='goal.distribute', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='appstore.read', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.embed', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='user.session.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workbench.enterprise.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='cloud.override', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datastore.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='user.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='account.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='saasaas.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='developer.token.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='publish.subscribers.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.request', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.page.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='alert.actions', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='ml.execute', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='audit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='domoapps.read', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='tasks.private.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='content.card.narrative.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='approvalcenter.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workbench.enterprise.view', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datascience.notebooks.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.account.create.federated.oauth', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='form.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='pipeline.executor.job.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='alert.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='fileshare.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='appstore.payments.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='publish.publication.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataflow.adrenaline', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workbench.download', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataset.account.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='usage.reports.view', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='goal.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='versions.repository.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='app.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataflow.magic', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='dataflow.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='workflow.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='form.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='queue.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='alert.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='appstore.edit', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)], membership_ls=[])"
  },
  {
    "objectID": "blog/posts/2023-03-13-Custom_Roles/index.html#create-user",
    "href": "blog/posts/2023-03-13-Custom_Roles/index.html#create-user",
    "title": "Creating and UPSERTing custom roles with DomoLibrary",
    "section": "create user",
    "text": "create user\nAt code execution, it is possible that a user may need to be a specific role, but that user and the role haven’t been deployed to the instance yet.\nThe proper order of operations would be to create a role and then assign the user to that role. You cannot create a user without defining their role membership\n\nimport domolibrary.classes.DomoUser as dmu\n\n\nasync def upsert_user(\n    auth: dmda.DomoAuth,\n    email_address: str,\n    role_id: str,\n    debug_api: bool = False,\n):\n\n    return await dmu.DomoUsers.upsert_user(\n        email_address=email_address, role_id=role_id, auth=auth, debug_api=debug_api\n    )\n\n\nsample implementation of upsert_user\n\nrole = roles_to_create[0]\nawait upsert_user(auth=token_auth, role_id=4, email_address=\"test23@test.com\")\n\nResponseGetData(status=200, response={'attributes': [{'key': 'id', 'values': [1802840904]}, {'key': 'displayName', 'values': ['test23@test.com - via dl 2023-03-16']}, {'key': 'userName', 'values': ['test23@test.com']}, {'key': 'emailAddress', 'values': ['test23@test.com']}, {'key': 'modified', 'values': [1680526181615]}, {'key': 'created', 'values': [1679010842000]}, {'key': 'roleId', 'values': [4]}, {'key': 'isAnonymous', 'values': [True]}, {'key': 'isSystemUser', 'values': [False]}, {'key': 'isPending', 'values': [True]}, {'key': 'isActive', 'values': [True]}, {'key': 'invitorUserId', 'values': [1893952720]}, {'key': 'avatarKey', 'values': ['/api/content/v1/avatar/USER/1802840904']}], 'id': 1802840904, 'displayName': 'test23@test.com - via dl 2023-03-16', 'roleId': 4, 'userName': 'test23@test.com', 'emailAddress': 'test23@test.com'}, is_success=True)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html",
    "title": "Domo Onboarding",
    "section": "",
    "text": "This document describes the best practices for beginner Domo users. There are different personas use cases covered in this document:\n🖊️ this is a working document (ish).  Leave comments if specific content doesn’t make sense or you need more information."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#motivation",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#motivation",
    "title": "Domo Onboarding",
    "section": "Motivation",
    "text": "Motivation\nThis document contains a set of recommendations which will help end users:\n\nOptimize the development process\nReduce development efforts\nBe integrated into SIE process\nUnderstand how to improve the content searchability and accessibility\nUnderstand Domo tooling that can lead to improved customer satisfaction and engagement."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#relevant-links",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#relevant-links",
    "title": "Domo Onboarding",
    "section": "Relevant Links",
    "text": "Relevant Links\nNew Features\nCurrent Release Notes\n🧵 Domo Training Slack Channel"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#core-domo-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#core-domo-terms",
    "title": "Domo Onboarding",
    "section": "Core Domo Terms",
    "text": "Core Domo Terms\n\nDataSet: In Domo, a DataSet is a single flat table of data consisting of columns and rows.\nDatasets are stored as flat files in “Vault” (Amazon S3) before getting loaded into “Adrenaline” (parallel distributed database layer)\nDataFlow: a job in the Domo Data Center that makes transformations (e.g. joins, edits, calculations, etc.) to existing DataSets inside of Domo.\nThe output of a DataFlow is a new dataset (flat file) stored in Vault.\nAnalyzer: we design a Card in the Analyzer. The Analyzer is where we create and edit the card.\n﻿\nCard: synonymous with “chart”, “graph”, or “plot”\nUnderstanding Cards KB link\nEach card gets reduced to a SQL Query against the underlying dataset\n﻿\nDashboard/Page: a group of cards ﻿\nManaging Cards and Dashboards KB Link"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#unofficial-terms-scotts-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#unofficial-terms-scotts-terms",
    "title": "Domo Onboarding",
    "section": "Unofficial Terms / “Scott’s Terms”",
    "text": "Unofficial Terms / “Scott’s Terms”\n\nWall: a term to represent Pages in Domo (e.g. “I can see a bunch of different walls in Domo”)\nPretty Picture: a term to represent Cards in Domo (e.g. I can see a bunch of pretty pictures hanging on a wall in Domo”)\nShell: A Card is like a Shell - we design the Shell in the Analyzer and the data from the chosen DataSet flows in the Shell and is displayed according to the Shell parameters (i.e. filters, time frame, etc.)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#business-terms",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#business-terms",
    "title": "Domo Onboarding",
    "section": "“Business” Terms",
    "text": "“Business” Terms\n\nCharts, graphs: Any sort of graphic to visualize data\nDashboards: A collection of key business indicators organized and arranged on a single page"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations",
    "title": "Domo Onboarding",
    "section": "Jae Recommendations",
    "text": "Jae Recommendations\n\nRecommended naming conventions for datasets/dataflows\nUse snake_case as it is easier to read.\nEx. MYPROJ_01_historisation_v1_PROD\n_&lt;STAGE_ 1/2/X&gt;__&lt;Version 1/2/X&gt;_\nNaming conventions allow the DSO team to track your utilization as well as facilitate data categorization.\n\nThe status of this dataset/dataflow. Also if you would like to create a copy and work on parallel development you just need to change the prefix to DEV and work on it.\nProject Code should be unique and will help us to monitor the rows allocation per project per instance\nStage allows you better to define the data lineage and identify dependencies\nDescription provides more information about the nature of transformation or business logic\nVersioning allows you to better manage the versioning (you might have PROD____ V1 and then you create DEV____ V2 to work on in the new version). This approach allows you to better control and separate different versions of dataflow.\n\n\n\nAccount Creation and Dataset Continuity\n\nManaging Accounts / Dataset Credentials when individuals go on PTO or leave the Company\nDomo KB Link\n“I’d like to know what is the current way we use the service account to manage connectors / credentials in Domo so that the management of those connectors can be spread across a few individuals.  Currently, our team members are creating those connectors in their own account causing maintenance issues when those individual is on PTO or left the company.”\nDatasets will continue executing using the stored credentials in an account object as long as the credentials are valid.  If a user is removed from Domo, the account is not automatically assigned, admins will need the Manage All Accounts role Grant to administer accounts that have not explicitly been shared with them.\nAssign Account ownership to a service account OR a Domo Group (beta)\nTake note that there are different account sharing levels, Read, Edit, Owner etc.\n\n\nCreating Accounts\nAccounts are created when users enter credentials for a datasource (Adobe Analytics, Salesforce, Snowflake etc). These credentials cannot be seen in plain text anywhere in Domo but are exchanged when a connector requests access from the source system.\nAccounts are owned by a user(s) or group.\n\nOwners can rename accounts and update the stored credentials (cycling credentials).  \nUsers who have Read access to an account can impersonate the stored credentials and create new data extracts from the source system.\n\n\n\n\nRecommended naming conventions for dataset columns\nWe recommend using snake case (article) for column names.\n\n\nRecommended tagging structure\nTo facilitate dataset classification, Jae requires the use of tags.  \nTags can be applied to datasets AND dataflows but they do not transfer automatically from a parent object to a child object.\n\nPrefix Breakdown\ncl_\nContent lifecycle\ncl_PROD\ncl_DEV\ncl_UAT\ncl_ARCHIVE\ncl_DELETE\npj_\nProject\npj_MONIT\n\n\nKnown Project Prefixes\npj_MONIT\nFor instance monitoring datasets (Domo_Governance, Domo_Stats etc).\n\n\n\nETL and Data Pipeline Development\nHow to Structure your DataCenter - video\n\nAlways comment you code (for MySQL/Redshift/Adrenaline flows) Each temporary table should be commented on purpose and what is the output\nTry to use clear names for Magic tiles (instead of generated one like Select Columns 1/2/3 or Remove duplicates)\nUse a bus matrix to organize and play your pipeline\nCategorize datasets as Fact or Dimension (and wait till the late steps to JOIN them\nAlways apply GROUP BY or DEDUPLICATION before JOIN’ing in ETL\nTry to UNION facts.  Do Not JOIN facts together.\nUse the ALTER COLUMNS tile to standardize data types\nUNION columns with an Activity_Type and Activity_Date for standard Filtering\nUsing WebForms you can join in descriptive information to augment datasets\nDon’t filter your output datasets in ETL. Filter in Cards or a DSV used as a Semantic Layer.\nRationalize when it’s appropriate to write business logic into Magic (Formula tiles), webform_lookups, vs. Beast Modes.\nDo not leverage DSVs for data transformation if you’re also using Magic. Try to keep all your transformation logic in the same place.\nIf you are writing the same code multiple times, find a different implementation strategy\nduring this stage of adoption (and given the small data) JUST do Magic & Beast Modes. Don’t use DSVs until Users demand an intermediate semantic layer.\n\n\n\nUse Change Log and Versioning\nDomo allows you to keep track of changes in the dataflow (all types).\n\n\nArchiving and Deleting Content\n🚀 Deleting a dataflow does not automatically delete connected datasets.\nTo properly decommission dataflows:\n\nRelabel the output datasets, DELETE_&lt;dataset_name&gt;\nRelabel the dataflow, DELETE_&lt;dataflow_name&gt;\nDelete dataflows and datasets\n\nThere is no archive feature built into Domo.  As a surrogate for archiving, users can\n\nDisable execution of dataflows, workbench jobs, or connector datasources\nUse Lineage to confirm datasets are not part of an operational pipeline\nRelabel and retag assets.\nCards and Pages can be moved from production pages and relabeled as appropriate."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#supporting-features-from-domo",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#supporting-features-from-domo",
    "title": "Domo Onboarding",
    "section": "Supporting Features from Domo",
    "text": "Supporting Features from Domo\n\nAdrenaline Dataflows\nMagic 2.0\nCLI\nDataset Views\nPublish\nCertification\nAdvanced tools (Stacker, Data Assembler)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#which-tool-is-the-best-for-which-use-case",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#which-tool-is-the-best-for-which-use-case",
    "title": "Domo Onboarding",
    "section": "Which tool is the best for which use case",
    "text": "Which tool is the best for which use case"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#upsert-and-partitioning-tools",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#upsert-and-partitioning-tools",
    "title": "Domo Onboarding",
    "section": "Upsert and Partitioning tools",
    "text": "Upsert and Partitioning tools"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-pages-and-dashboards",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-pages-and-dashboards",
    "title": "Domo Onboarding",
    "section": "Understanding Pages and Dashboards",
    "text": "Understanding Pages and Dashboards\nIn addition to default system dashboards (Overview, Favorites, Shared), as well as company-defined default dashboards, users can display content and cards on dashboards.\nPage owners and users with manage pages rights can lock a page to prevent alterations to a page.  Consider the use of Certification workflows for ‘official’ content that should not be altered."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#change-card-interactions-to-control-what-happens-when-users-click-on-a-dashboard",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#change-card-interactions-to-control-what-happens-when-users-click-on-a-dashboard",
    "title": "Domo Onboarding",
    "section": "Change Card Interactions to control what happens when Users click on a Dashboard",
    "text": "Change Card Interactions to control what happens when Users click on a Dashboard\nDefault behavior is to apply filters on click, but dashboard designers change interaction behavior on a card by card basis.\nEx. Can have drilldown in place, or click to open a link to another Domo Page or external link.\nInteractions KB Link\nURL Links to pages can include predefined column filters using PFilters.  KB Link\n\nAdditional Resources\n\nDesign better Dashboards / Tell Better Data Stories (📹 YouTube Video)\nUnderstanding Pages (System Defaults - Overview, Favorites, Shared – KB Link)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-cards",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#understanding-cards",
    "title": "Domo Onboarding",
    "section": "Understanding Cards",
    "text": "Understanding Cards\nCards are the Domo equivalent of charts, plots, or graphs.\nFiltering, Sorting, cards in the Details view\n\nSharing Cards to Pages vs Save As (creating a copy)\nSharing and Removing Access to Cards and Pages Link to KB\n\n\nLock your Cards and Pages to prevent users from editing the content.\n\n\nChart Colors\nColor Rules (“conditional formatting”) Link to KB\nChanging Default Colors in different Chart Types Link to KB\n🚀 Only one Default Theme (color palette) can exist per instance in the form of the Brand Kit feature.   Link to KB\n❓ “In Tableau when you select a field to color, it automatically assigns each distinct value a color. This is useful for say Department separation. We can then manually change it if needed.  How do you do it in Domo?”\n\nEither set color rules (for metrics) OR if you have a chart type that allows you to add a Series (ex. Grouped bar chart) it will assign a color to each unique value\n\n\n\nAggregation across Categories / Window Functions / Cumulative Sum\nThere are 3 ways to compare aggregates outside of the window of data you’re currently in\nSegments\nKB Link\nWindow Functions & Fixed Functions\nUltimate 2020 Window Function Tutorial 📹 YouTube Video\n3 Month Average Lag 📹 YouTube Video\nCertain Card Types allow cross category aggregation\nPeriod over Period\nRunning Total\n\n\nBeast Modes are formulas defined in Analyzer / Cards\nBeast Mode calculations will frequently use MySQL (and sometimes Redshift) syntax.\n🚀 Beast Modes can be applied before aggregation (at the row level) or after aggregation\nIn most cases, any CASE statement should occur INSIDE a beast mode.\nCASE statements and date-specific transforms that exist independently of aggregate functions should often move upstream and persist in the dataset itself.\n\n\nUnderstanding Card Sharing and Data Security\nCard and Page sharing versus data security are two very different functions with different implications.  \n⚠️ If you share a card or dashboard, you are implicitly giving READ access to the underlying dataset(s) represented in the entity.\n⚠️ If there is content that needs to be filtered on a per-user basis consider using PDP (Personalized Data Permissions) to apply row-level security to limit the rows of data in a dataset a user has access to."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations-1",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#jae-recommendations-1",
    "title": "Domo Onboarding",
    "section": "Jae Recommendations",
    "text": "Jae Recommendations\n\nCard Design\n🚀 Naming Convention Tip:  Update the card title to indicate cards with a drill path.\n\nConsider an asterisk, *,  or ALT  + 16, ►, to indicate cards with a drill path.\n\n🚀 There is a toggle to prevent users from drilling down to raw data\n\n\nBeast Mode Management\n\nUse Beast Mode Manager and DomoGovernance_BeastModes dataset to monitor beast mode proliferation in your instance\nCard performance is directly correlated SQL commands issued in beast modes where possible to avoid COUNT(DISTINCT) and text-based operations (REGEX or LIKE).\nWhen reasonable, materialize row-based transforms (date conversions) onto the dataset.\nSharing beast modes to datasets will improve card performance but will slow dataset indexing.\nThere is a difference between sharing a card versus making a copy of a card.  Cards can be shared (linked) to multiple pages making it easy to have one object to maintain.\n\n\n\nCard and Dashboard Management\n\nEach card has its own URN.  You can either create a copy / duplicate of a card and embed it on a page (it will have its own URN) OR simply move or share a card to a page (it retains the original URN)."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-faq",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-faq",
    "title": "Domo Onboarding",
    "section": "Card FAQ",
    "text": "Card FAQ\nIs there a difference between “Save As” / “Duplicating” vs “Sharing” a card?\n\nSave As or Duplicate will create a new object in Domo that is separate from the original entity.  \nChanges made to the duplicated card or the original card will not impact the other.  \nDuplicating Cards KB\n\nCan I prevent users from altering my card or page?\n\nYes, lock your content.  KB Link\nConsider a certification flow for ‘official content’.  KB Link\n\nHow can I alias data (fix values) or create a custom calculated metric in a card?\n\nCreate a Beast Mode Link KB using MySQL syntax functions\nEx. CASE WHEN END or SUM(CASE WHEN …  END)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-participants-non-editors",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-participants-non-editors",
    "title": "Domo Onboarding",
    "section": "Card Features for Participants (non-editors)",
    "text": "Card Features for Participants (non-editors)\n\nUse Annotations to share insights\nCreate card annotations and find or document interesting insights using annotations\n\nAnnotation KB\n\n\n\nUse Alerts to update users with changes in Domo\n\nAlerts KB\n\nAlerts can be configured for cards and metrics represented in cards as well as datasets."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-editors",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#card-features-for-editors",
    "title": "Domo Onboarding",
    "section": "Card Features for Editors",
    "text": "Card Features for Editors\n\nUse Quick Filters to encourage data exploration\n\nQuick Filters KB \n\n\n\nUse Page-level Filter Views to create preset combinations of filters for a guided user experience\n\nFilter Views KB\n\n\n\nAdd Drill Paths to Cards to control the exploration experience\n\nDrill Paths KB"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#documentation",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#documentation",
    "title": "Domo Onboarding",
    "section": "Documentation",
    "text": "Documentation\n\nHigh Level Design / Solution overview\nNew Users’ guide\nData Dictionary (see section below)"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-quality",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-quality",
    "title": "Domo Onboarding",
    "section": "Data Quality",
    "text": "Data Quality"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-momentum---certification",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-momentum---certification",
    "title": "Domo Onboarding",
    "section": "Domo Momentum - Certification",
    "text": "Domo Momentum - Certification"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#dev-prod-maintenance",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#dev-prod-maintenance",
    "title": "Domo Onboarding",
    "section": "Dev / Prod & Maintenance",
    "text": "Dev / Prod & Maintenance\n\nUse Domo Sandbox for managing same instance and cross-instance dev/prod content\n\nBy default SIE Domo instances will not have a second Domo instance to separate Dev from Prod.  Within the same instance however, Domo Sandbox can help manage the promotion of development assets to production and back. Sandbox KB \nDo not make full copies of production datasets into Dev; instead, consider developing against randomized samples of data.  This will both help manage developer experience (faster execution times) and instance rowcount.\n\n\n\nTransfer Assets to Appropriate Stakeholders"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#single-sign-on-sso-and-okta-authentication",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#single-sign-on-sso-and-okta-authentication",
    "title": "Domo Onboarding",
    "section": "Single Sign On (SSO) and OKTA Authentication",
    "text": "Single Sign On (SSO) and OKTA Authentication\nUser and Group Management KB link\nUsers can be aJaed to Domo at will.  The SIE Domo contract does not charge licensing fees on a per user basis.\nSee Adding Users to Domo KB link\nOut of the box, Domo user authentication is handled with email and login.  User provisioning and authentication can be handled via SSO (SSO using SAML KB link)\n\nLogging into Domo via Direct Sign On in an environment with SSO\nTo bypass SSO Authentication, users must first be added to the Direct Sign On (DSO) List.  \nOnce aJaed to DSO, users can bypass SSO by adding /auth/index?domoManualLogin=true to the url."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#users-groups-roles",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#users-groups-roles",
    "title": "Domo Onboarding",
    "section": "Users, Groups, Roles",
    "text": "Users, Groups, Roles\n\n⚖️ SIE Standard Roles\nRoles are comprised of Grants which determine actions users can take in Domo.\nJae will create standard roles and groups to which instance members will be assigned by default.  Instance admins can create their own custom roles for departmental users as necessary.\n\nSIE_Admin\nSIE_Reset\nSIE_Priviliged\nPrivileged + ADR Flows\nSIE_Test\n\nTo monitor role & Grant configuration:\n\nGo To Admin &gt; Governance &gt; Roles &gt; Grid\n\n\n\nDefine Custom Roles\n\nhttps://knowledge.domo.com/Administer/Controlling_Access_in_Domo/Managing_Custom_Roles\nhttps://knowledge.domo.com/Administer/Controlling_Access_in_Domo/04Security_Role_Reference\n\n\n\n⚖️ SIE Default Groups\n\nSIE Admin\nSIE User\n\n\n\nDefining Groups\nWhere Roles and Grants define what users can do, Group membership should be used to either:\n\nManage content ownership\nShare content\n\nAvoid the temptation to manage content by individuals, instead try to adopt the practice of sharing content with groups.\n\nhttps://domohelp.domo.com/hc/en-us/articles/360042934294-Creating-and-Managing-User-Groups\n\n\n\nImplement Row-Level Security with Personalized Data Permissions (PDP)  Policies\n🚀 Monitoring card sharing is NOT a replacement for applying PDP policies.  Jae strongly recommends applying PDP policies to all sensitive data in Domo.\n🚀 A card gets reduced to a SQL query against a dataset which is executed at runtime (i.e. when Michelle tries to view the card).  AND PDP creates row-level security to the dataset which limits what gets returned by the query.\nex. Michelle can create a card against any dataset that has been shared with her, but she will only see the rows the pdp policy allows her to see.\nex. SELECT Product, sum(amount) GROUP BY Product.\n🚀 PDP policies are additive (each policy you’re a part of adds an OR clause for the data you can see).\n\nPDP Links\n\nPersonalized Data Permissions - KB Link\nhttps://domohelp.domo.com/hc/en-us/articles/4415800746391-Governance-Toolkit-PDP-Automation\nhttps://domohelp.domo.com/hc/en-us/articles/360043439353-PDP-Policy-Autocreation"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#datacenter-audits",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#datacenter-audits",
    "title": "Domo Onboarding",
    "section": "Datacenter Audits",
    "text": "Datacenter Audits\n\nCreate a schedule with your technology & business users to clean up on a regular basis and monitor the results through governance and activity logs\nSet cleaning campaigns to a theme to make it fun\nCheck to make sure your instance objects are in security compliance with other parts of the business\nSet alerts on ETL jobs to monitor failure – can set up as SMS message\nCheck schedules for ETL jobs and make sure they are available when needed for the business dashboard users\n\n\nSecurity\n⚠️ By default, most users will not see all the data available in the datacenter; however, sharing a card automatically shares the underlying dataset.  Therefore PDP (personalized data permissions KB) is the only way to implement proper data security."
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#manage-data-using-metadata",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#manage-data-using-metadata",
    "title": "Domo Onboarding",
    "section": "Manage Data using Metadata",
    "text": "Manage Data using Metadata\n\nUse Tags facilitate dataset audits and provide additional dataset metadata (KB)\nUtilize the Governance Connectors (KB) to access data schemas, beastmodes, access rights to dataset, and tags\nCreate a data dictionary dashboard"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#monitor-domo-instance-and-projects",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#monitor-domo-instance-and-projects",
    "title": "Domo Onboarding",
    "section": "Monitor Domo Instance and Projects",
    "text": "Monitor Domo Instance and Projects"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-architecture-review",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#domo-architecture-review",
    "title": "Domo Onboarding",
    "section": "Domo Architecture Review",
    "text": "Domo Architecture Review"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-science-toolkit",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#data-science-toolkit",
    "title": "Domo Onboarding",
    "section": "Data Science Toolkit",
    "text": "Data Science Toolkit\n\nJupyter Notebook\nKB link\nPrimary Advantages\n\nNotebooks can be scheduled to run as a dataflow\nDatasets can be read in or updated using the domo jupyter package\nDuring development, the performance of the notebooks will feel much faster than Magic 2.0 Scripting Tiles\n\nDisadvantages\n\nNo built-in version control (no access to private GitHub)\nNo easy way to “download all files”"
  },
  {
    "objectID": "blog/posts/2023-01-24_Domo_Onboarding/index.html#extending-domo-with-apis",
    "href": "blog/posts/2023-01-24_Domo_Onboarding/index.html#extending-domo-with-apis",
    "title": "Domo Onboarding",
    "section": "Extending Domo with APIs",
    "text": "Extending Domo with APIs\n📚 Jae Private API documentation"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "",
    "text": "This is a framework for managing data distribution within an organization that has several departments using standalone instances of domo.\ndomo-accounting.domo.com\ndomo-sales.domo.com\ndomo-marketing.domo.com\ndomo-engineering.domo.com\nThere are several highly bespoke datastores that provide high value data to different departments, they’ll have their own instances of domo too.\ndomo-aa.domo.com\ndomo-sfdc.domo.com\ndomo-snowflake.domo.com\nWe need a single place where users can find trusted dashboards builton a consistent and validated data pipeline that will consume input datasets from different departments or a chain of transformed datasets.\nEx. The executive dashboard gets prepared by domo-engineering but consumes data from accounting, sales, and marketing."
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#types-of-datasets-and-which-ones-we-publish",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#types-of-datasets-and-which-ones-we-publish",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "4 Types of Datasets and Which ones we Publish",
    "text": "4 Types of Datasets and Which ones we Publish"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#non-publishable-datasets",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#non-publishable-datasets",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "Non-publishable Datasets",
    "text": "Non-publishable Datasets\nAvoid publishing datasets that require additional lookups or external data to understand.\n\nRaw Datasets\n\n\nCome straight from the source system.\nMinimize ETL during Ingest.\n\n\nStaging Dataset (INT)\n\n\nExist exclusively in Department or Clearinghouse instances.\nRepresent intermediate steps required to transform a dataset into a usable shape.\nThis will include dimension tables that are not golden records"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#publishable-datasets",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#publishable-datasets",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "Publishable Datasets",
    "text": "Publishable Datasets\nWe promote the publishing of datasets that can stand on their own and do not require additional context to understand.\n\nData Warehouse (DWH)\n\n\nThe building blocks (inputs) to DASH datasets\n\nither facts or dimensional tables that have NOT been shaped for a specific analytic use case.\n\nDo not publish cards or dashboards built on DWH datasets.\nFact tables can take the form of transactional, accumulating snapshot, periodic balance.\nPeriod and accumulating snapshots should be avoided unless there’s a tradeoff for data volume optimization OR rigid reporting requirements where taking snapshots make sense (ex. Financial reporting)\nDWH datasets will be fact tables representing a single fact type (ex. Sales, Sales Forecast or Inventory), joined with the minimum dimensional attributes to be useful in a stand-alone setting.\nAvoid subsetting similar datasets (ex. Inventory 2019 vs Inventory 2022)\nDWH datasets includes conformed dimensional tables (like a Calendar Dimension with FY attributes or golden record customer master)\n\n\nDashboard Dataset (DASH)\n\n\nRepresent stand-alone datasets that dashboards and cards are built against.\nPublishable only to distribution centers.\nTypically will combine multiple DWH fact tables and conformed dimensions.\nDatasets shaped for analysis (PIVOT or UNPIVOT metrics, or POP (CY vs PY etc. are classified as DASH datasets).\nDo not conduct ETL on DASH datasets"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#engineering-produces-a-dashboard",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#engineering-produces-a-dashboard",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "1. Engineering produces a dashboard",
    "text": "1. Engineering produces a dashboard\nEngineering owns “database_monitoring” (dbm) and publishes a dashboard to the PDC (public distribution center)\n\nDATASOURCE via raw - dbm_RAW\nETL to produce dbm_DWH and dbm_DASH\nDISTRIBUTE via publish to PDC (dbm_DASH)"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#infosec-augments-engineerings-dashboard",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#infosec-augments-engineerings-dashboard",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "2. Infosec augments Engineering’s dashboard",
    "text": "2. Infosec augments Engineering’s dashboard\nInfosec wants to augment database_monitoring (dbm) published by Engineering and publish it as a new asset in PDC (public distribution center)\n\nDATASOURCES\nvia subscription from engineering (dbm_DWH)\nBecause we do not do publish DASH between departmental instances\nRAW data from internal sources\nETL produces infosec_DWH and infosec_DASH\nDISTRIBUTE via publish to PDC (infosec_DASH)"
  },
  {
    "objectID": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#secops-chooses-the-most-downstream-branch",
    "href": "blog/posts/2023-01-24-Domo_Everywhere_MultiInstance/index.html#secops-chooses-the-most-downstream-branch",
    "title": "Domo Distribution and Governance Strategy across Instances",
    "section": "3. SecOps chooses the most downstream branch",
    "text": "3. SecOps chooses the most downstream branch\nSecurity Operations wants to augment the work from Infosec and publish it as a new asset in PDC.\n\nThis introduces a 3-step ETL chain (RAW, engineering (dbm_DWH), or infosec (infosec_DWH) that SecOps must choose where to branch from.\n\nPublish / Subscriber requests should be configured from the most downstream certified data owner – in this case infosec.\n\nIf an update is made to how engineering handles database_monitoring, this ensures the update is passed to infosec. If infosec updates their ornamentation, that update passes down to SecOps and anyone who has branched off of it."
  },
  {
    "objectID": "blog/posts/2024-01-02_update_users/index.html",
    "href": "blog/posts/2024-01-02_update_users/index.html",
    "title": "Tutorial Update Users",
    "section": "",
    "text": "# %pip install --upgrade  domolibrary\nimport domolibrary\n\ndomolibrary.__version__\n\n'0.3.46'"
  },
  {
    "objectID": "blog/posts/2024-01-02_update_users/index.html#validate-that-custom-properties-have-been-created",
    "href": "blog/posts/2024-01-02_update_users/index.html#validate-that-custom-properties-have-been-created",
    "title": "Tutorial Update Users",
    "section": "validate that custom properties have been created",
    "text": "validate that custom properties have been created\n\nThe DomoInstanceConfig class has a property user_attributes that can be used to interact with all user attributes (including standard Domo Attributes, IDP created attributes, and custom attributes)\n\n\nasync def get_custom_properties(\n    auth: dmda.DomoAuth, prop_prefix: str, return_all: bool = False\n):\n    domo_config = dmic.DomoInstanceConfig(auth=auth)\n    props = await domo_config.user_attributes.get_attributes()\n\n    if return_all:\n        return props\n    return [prop for prop in props if prop.id.startswith(prop_prefix)]\n\n\nawait get_custom_properties(auth=token_auth, prop_prefix=\"fz\", return_all=False)\n\n[UserAttribute(id='fzManagerEmail', name='ManagerEmail', description='FZ_POC', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True),\n UserAttribute(id='fzStoreID', name='StoreID', description='FZ_POC', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True),\n UserAttribute(id='fzFranchiseID', name='FranchiseID', description='FZ_POC', issuer_type=&lt;UserAttributes_IssuerType.CUSTOM: 'customer-defined'&gt;, customer_id='mmmm-0012-0200', value_type='STRING', validator='ANY_VALUE', validator_configuration=None, security_voter='FULL_VIS_ADMIN_IDP', custom=True)]"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoFeatures/index.html",
    "href": "blog/posts/2023-02-02_DojoFeatures/index.html",
    "title": "Tutorial - Generate your Features list from the Bootstrap API",
    "section": "",
    "text": "# pip install --upgrade  domolibrary\n\n\n\nConfigure a DomoAuth object that will be used to interact with DomoDatasets\nFor this project we must use DomoFullAuth because the bootstrap API will not accept token auth\n\nimport os\n\nDOMO_INSTANCE = \"domo-community\"\nDOMO_USERNAME = os.environ[\"DOMO_USERNAME\"]\nDOMO_PASSWORD = os.environ[\"DOJO_PASSWORD\"]\nFEATURES_DATASET_ID = \"44c5af30-ea04-49e4-9d7a-529afd223590\"\n\n\nimport domolibrary.client.DomoAuth as dmda\n\n\nasync def generate_auth(domo_instance, domo_username, domo_password) -&gt; dmda.DomoAuth:\n    \"\"\"receive auth credentials, generate and test an auth object\"\"\"\n\n    print(f\"⚙️ generate_auth:  retrieving config data from {domo_instance} ⚙️\")\n\n    auth = dmda.DomoFullAuth(\n        domo_username=domo_username,\n        domo_password=domo_password,\n        domo_instance=domo_instance,\n    )\n\n    # confirm we can get a valid auth token\n    await auth.get_auth_token()\n\n    if not auth.token:\n        raise Exception(\"💀 generate_auth: Error retrieving Auth Token\")\n\n    if auth.token:\n        print(\"🌼 generate_auth:  success retrieving Auth Token\")\n\n    return auth\n\n\n# test\ntest_auth = await generate_auth(\n    domo_instance=DOMO_INSTANCE,\n    domo_password=DOMO_PASSWORD,\n    domo_username=DOMO_USERNAME,\n)\n\n\n\n\nConfigure a DomoDataset that will receive the Bootstrap dataframe from DomoBootstrap\nNote, the schema of the dataset must match the schema of the dataframe being uploaded or the dataset won’t index. You can alter schema using the “Schema Management” tool from the Domo Governance Toolkit or java cli.\n\nimport domolibrary.classes.DomoDataset as dmds\n\n\nasync def generate_dataset(dataset_id: str, auth: dmda.DomoAuth):\n    \"\"\"generates a DomoDataset class object from a dataset_id\"\"\"\n\n    return await dmds.DomoDataset.get_from_id(dataset_id=dataset_id, auth=auth)\n\n\n# test\nawait generate_dataset(dataset_id=FEATURES_DATASET_ID, auth=test_auth)\n\n\n\n\nRetrieve your feature list using DomoBootstrap.get_features() and format it as a dataframe\n\nimport pandas as pd\nimport domolibrary.classes.DomoBootstrap as dmbsr\n\n\nasync def get_bootstrap(auth, debug_api: bool = False) -&gt; pd.DataFrame:\n    \"\"\"generates a dataframe of bootstrap_features\"\"\"\n\n    domo_bsr = dmbsr.DomoBootstrap(auth=auth)\n\n    bsr_features = await domo_bsr.get_features(debug_api=debug_api)\n\n    bsr_features_df = pd.DataFrame(bsr_features)\n    bsr_features_df[\"instance\"] = auth.domo_instance\n\n    return bsr_features_df\n\n\n# test\nupload_df = await get_bootstrap(test_auth)\nupload_df[0:5]"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoFeatures/index.html#auth-object",
    "href": "blog/posts/2023-02-02_DojoFeatures/index.html#auth-object",
    "title": "Tutorial - Generate your Features list from the Bootstrap API",
    "section": "",
    "text": "Configure a DomoAuth object that will be used to interact with DomoDatasets\nFor this project we must use DomoFullAuth because the bootstrap API will not accept token auth\n\nimport os\n\nDOMO_INSTANCE = \"domo-community\"\nDOMO_USERNAME = os.environ[\"DOMO_USERNAME\"]\nDOMO_PASSWORD = os.environ[\"DOJO_PASSWORD\"]\nFEATURES_DATASET_ID = \"44c5af30-ea04-49e4-9d7a-529afd223590\"\n\n\nimport domolibrary.client.DomoAuth as dmda\n\n\nasync def generate_auth(domo_instance, domo_username, domo_password) -&gt; dmda.DomoAuth:\n    \"\"\"receive auth credentials, generate and test an auth object\"\"\"\n\n    print(f\"⚙️ generate_auth:  retrieving config data from {domo_instance} ⚙️\")\n\n    auth = dmda.DomoFullAuth(\n        domo_username=domo_username,\n        domo_password=domo_password,\n        domo_instance=domo_instance,\n    )\n\n    # confirm we can get a valid auth token\n    await auth.get_auth_token()\n\n    if not auth.token:\n        raise Exception(\"💀 generate_auth: Error retrieving Auth Token\")\n\n    if auth.token:\n        print(\"🌼 generate_auth:  success retrieving Auth Token\")\n\n    return auth\n\n\n# test\ntest_auth = await generate_auth(\n    domo_instance=DOMO_INSTANCE,\n    domo_password=DOMO_PASSWORD,\n    domo_username=DOMO_USERNAME,\n)"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoFeatures/index.html#dataset-object",
    "href": "blog/posts/2023-02-02_DojoFeatures/index.html#dataset-object",
    "title": "Tutorial - Generate your Features list from the Bootstrap API",
    "section": "",
    "text": "Configure a DomoDataset that will receive the Bootstrap dataframe from DomoBootstrap\nNote, the schema of the dataset must match the schema of the dataframe being uploaded or the dataset won’t index. You can alter schema using the “Schema Management” tool from the Domo Governance Toolkit or java cli.\n\nimport domolibrary.classes.DomoDataset as dmds\n\n\nasync def generate_dataset(dataset_id: str, auth: dmda.DomoAuth):\n    \"\"\"generates a DomoDataset class object from a dataset_id\"\"\"\n\n    return await dmds.DomoDataset.get_from_id(dataset_id=dataset_id, auth=auth)\n\n\n# test\nawait generate_dataset(dataset_id=FEATURES_DATASET_ID, auth=test_auth)"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoFeatures/index.html#bootstrap-data",
    "href": "blog/posts/2023-02-02_DojoFeatures/index.html#bootstrap-data",
    "title": "Tutorial - Generate your Features list from the Bootstrap API",
    "section": "",
    "text": "Retrieve your feature list using DomoBootstrap.get_features() and format it as a dataframe\n\nimport pandas as pd\nimport domolibrary.classes.DomoBootstrap as dmbsr\n\n\nasync def get_bootstrap(auth, debug_api: bool = False) -&gt; pd.DataFrame:\n    \"\"\"generates a dataframe of bootstrap_features\"\"\"\n\n    domo_bsr = dmbsr.DomoBootstrap(auth=auth)\n\n    bsr_features = await domo_bsr.get_features(debug_api=debug_api)\n\n    bsr_features_df = pd.DataFrame(bsr_features)\n    bsr_features_df[\"instance\"] = auth.domo_instance\n\n    return bsr_features_df\n\n\n# test\nupload_df = await get_bootstrap(test_auth)\nupload_df[0:5]"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoSQL/index.html",
    "href": "blog/posts/2023-02-02_DojoSQL/index.html",
    "title": "Tutorial - Extract SQL from a Dataflow",
    "section": "",
    "text": "# pip install --upgrade  domolibrary\n# pip install sqlparse\n# pip install sql-metadata\n\n\n\nConfigure a DomoAuth object that will be used to interact with DomoDatasets\nFor this project we must use DomoFullAuth because the bootstrap API will not accept token auth\n\nimport os\n\ndomo_instance = \"domo-community\"\ndomo_username = os.environ[\"DOMO_USERNAME\"]\ndomo_password = os.environ[\"DOJO_PASSWORD\"]\nsql_dataflow_id = 70\n\n\nimport domolibrary.client.DomoAuth as dmda\n\n\nasync def generate_auth(domo_instance, domo_username, domo_password) -&gt; dmda.DomoAuth:\n    \"\"\"receive auth credentials, generate and test an auth object\"\"\"\n\n    print(f\"⚙️ generate_auth:  retrieving config data from {domo_instance} ⚙️\")\n\n    auth = dmda.DomoFullAuth(\n        domo_username=domo_username,\n        domo_password=domo_password,\n        domo_instance=domo_instance,\n    )\n\n    # confirm we can get a valid auth token\n    await auth.get_auth_token()\n\n    if not auth.token:\n        raise Exception(\"💀 generate_auth: Error retrieving Auth Token\")\n\n    if auth.token:\n        print(\"🌼 generate_auth:  success retrieving Auth Token\")\n\n    return auth\n\n\n# test\ntest_auth = await generate_auth(\n    domo_instance=domo_instance,\n    domo_password=domo_password,\n    domo_username=domo_username,\n)\n\n⚙️ generate_auth:  retrieving config data from domo-community ⚙️\n🌼 generate_auth:  success retrieving Auth Token\n\n\n\n\n\nConfigure a DomoDataflow\n\nimport domolibrary.classes.DomoDataflow as dmdf\n\n\nasync def generate_dataflow(dataflow_id: str, auth: dmda.DomoAuth):\n    \"\"\"generates a DomoDataset class object from a dataset_id\"\"\"\n\n    return await dmdf.DomoDataflow.get_from_id(dataflow_id=dataflow_id, auth=auth)\n\n\n# test\ndf = await generate_dataflow(dataflow_id=sql_dataflow_id, auth=test_auth)\n\n\n\n\nDomoDataflow_Action definitions are embeded in the DomoDataflow.actions property.\nThe DomoDataflow_Action class only captures a portion of the available properties across all the different action types, so this can be extended as needed.\nSQL statements are captured in DomoDataflow_Action.sql and can therefore be parsed or reformatted for presentation in other documentation tools. In the example below we use the [sqlparse(https://github.com/andialbrecht/sqlparse]) and [sql_metadata(https://github.com/macbre/sql-metadata)] library to parse and present a dataflow.\n\nimport sqlparse\nimport sql_metadata as sqlmd\nimport domolibrary.classes.DomoBootstrap as dmbsr\nfrom pprint import pprint\n\n\ndef process_actions(domo_dataflow: dmdf.DomoDataflow, debug_api: bool = False):\n    \"\"\"exctract SQL from actions\"\"\"\n\n    domo_actions = domo_dataflow.actions\n\n    if not domo_actions:\n        return\n\n    clean_sql = []\n\n    for action in domo_actions:\n        sql = action.sql\n\n        # not all domo actions will contain sql.\n        if not sql:\n            continue\n\n        # alter according to your needs\n        clean_sql.append(\n            {\n                \"transform_sql\": sqlparse.format(\n                    sql, reindent_aligned=True, keyword_case=\"upper\"\n                ),\n                \"referenced_tables\": \", \".join(sqlmd.Parser(sql).tables),\n                \"target_table\": action.name,\n            }\n        )\n\n    return clean_sql\n\n\nres = process_actions(domo_dataflow=df)\npprint(res)\n\n[{'referenced_tables': 'domostats_people',\n  'target_table': 't_1',\n  'transform_sql': 'SELECT `Display Name`,\\n'\n                   '       `User ID` , @row := @row+1 AS id , @isReset := CASE '\n                   'WHEN @iter = @rowCounter THEN 1\\n'\n                   '            ELSE 0\\n'\n                   '             END isReset , @group := @isReset + @group AS '\n                   'rowGroup , @iter := CASE WHEN @isReset = 1 THEN 1\\n'\n                   '            ELSE @iter + 1\\n'\n                   '             END iter , @rowCounter := CASE WHEN @isReset '\n                   '= 1 THEN FLOOR(RAND() * (7-3) + 3)\\n'\n                   '            ELSE @rowCounter\\n'\n                   '             END numChildren\\n'\n                   '  FROM `domostats_people` p ,\\n'\n                   '       (\\n'\n                   '        SELECT @row:= 0,@rowCounter:= 1, @iter := 1, '\n                   '@isReset := 0 , @group := 0\\n'\n                   '       ) r'},\n {'referenced_tables': 't_1',\n  'target_table': 'reportsto',\n  'transform_sql': 'SELECT b.`User ID` AS userID,\\n'\n                   \"       'reportsTo' AS Action,\\n\"\n                   '       a.`User ID` AS bodyID\\n'\n                   '  FROM t_1 a\\n'\n                   '  JOIN t_1 b\\n'\n                   '    ON a.id = b.`rowGroup`\\n'\n                   ' WHERE a.`User ID` &lt;&gt; b.`User ID`\\n'\n                   ' UNION SELECT b.`User ID` AS userID,\\n'\n                   \"       'directReports' AS Action,\\n\"\n                   '       a.`User ID` AS bodyID\\n'\n                   '  FROM t_1 a\\n'\n                   '  JOIN t_1 b\\n'\n                   '    ON b.id = a.`rowGroup`\\n'\n                   ' WHERE a.`User ID` &lt;&gt; b.`User ID`'},\n {'referenced_tables': 'reportsto',\n  'target_table': 'domoStats_people_reports',\n  'transform_sql': 'SELECT *\\n  FROM `reportsto`'}]"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoSQL/index.html#auth-object",
    "href": "blog/posts/2023-02-02_DojoSQL/index.html#auth-object",
    "title": "Tutorial - Extract SQL from a Dataflow",
    "section": "",
    "text": "Configure a DomoAuth object that will be used to interact with DomoDatasets\nFor this project we must use DomoFullAuth because the bootstrap API will not accept token auth\n\nimport os\n\ndomo_instance = \"domo-community\"\ndomo_username = os.environ[\"DOMO_USERNAME\"]\ndomo_password = os.environ[\"DOJO_PASSWORD\"]\nsql_dataflow_id = 70\n\n\nimport domolibrary.client.DomoAuth as dmda\n\n\nasync def generate_auth(domo_instance, domo_username, domo_password) -&gt; dmda.DomoAuth:\n    \"\"\"receive auth credentials, generate and test an auth object\"\"\"\n\n    print(f\"⚙️ generate_auth:  retrieving config data from {domo_instance} ⚙️\")\n\n    auth = dmda.DomoFullAuth(\n        domo_username=domo_username,\n        domo_password=domo_password,\n        domo_instance=domo_instance,\n    )\n\n    # confirm we can get a valid auth token\n    await auth.get_auth_token()\n\n    if not auth.token:\n        raise Exception(\"💀 generate_auth: Error retrieving Auth Token\")\n\n    if auth.token:\n        print(\"🌼 generate_auth:  success retrieving Auth Token\")\n\n    return auth\n\n\n# test\ntest_auth = await generate_auth(\n    domo_instance=domo_instance,\n    domo_password=domo_password,\n    domo_username=domo_username,\n)\n\n⚙️ generate_auth:  retrieving config data from domo-community ⚙️\n🌼 generate_auth:  success retrieving Auth Token"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoSQL/index.html#dataflow-object",
    "href": "blog/posts/2023-02-02_DojoSQL/index.html#dataflow-object",
    "title": "Tutorial - Extract SQL from a Dataflow",
    "section": "",
    "text": "Configure a DomoDataflow\n\nimport domolibrary.classes.DomoDataflow as dmdf\n\n\nasync def generate_dataflow(dataflow_id: str, auth: dmda.DomoAuth):\n    \"\"\"generates a DomoDataset class object from a dataset_id\"\"\"\n\n    return await dmdf.DomoDataflow.get_from_id(dataflow_id=dataflow_id, auth=auth)\n\n\n# test\ndf = await generate_dataflow(dataflow_id=sql_dataflow_id, auth=test_auth)"
  },
  {
    "objectID": "blog/posts/2023-02-02_DojoSQL/index.html#process-actions",
    "href": "blog/posts/2023-02-02_DojoSQL/index.html#process-actions",
    "title": "Tutorial - Extract SQL from a Dataflow",
    "section": "",
    "text": "DomoDataflow_Action definitions are embeded in the DomoDataflow.actions property.\nThe DomoDataflow_Action class only captures a portion of the available properties across all the different action types, so this can be extended as needed.\nSQL statements are captured in DomoDataflow_Action.sql and can therefore be parsed or reformatted for presentation in other documentation tools. In the example below we use the [sqlparse(https://github.com/andialbrecht/sqlparse]) and [sql_metadata(https://github.com/macbre/sql-metadata)] library to parse and present a dataflow.\n\nimport sqlparse\nimport sql_metadata as sqlmd\nimport domolibrary.classes.DomoBootstrap as dmbsr\nfrom pprint import pprint\n\n\ndef process_actions(domo_dataflow: dmdf.DomoDataflow, debug_api: bool = False):\n    \"\"\"exctract SQL from actions\"\"\"\n\n    domo_actions = domo_dataflow.actions\n\n    if not domo_actions:\n        return\n\n    clean_sql = []\n\n    for action in domo_actions:\n        sql = action.sql\n\n        # not all domo actions will contain sql.\n        if not sql:\n            continue\n\n        # alter according to your needs\n        clean_sql.append(\n            {\n                \"transform_sql\": sqlparse.format(\n                    sql, reindent_aligned=True, keyword_case=\"upper\"\n                ),\n                \"referenced_tables\": \", \".join(sqlmd.Parser(sql).tables),\n                \"target_table\": action.name,\n            }\n        )\n\n    return clean_sql\n\n\nres = process_actions(domo_dataflow=df)\npprint(res)\n\n[{'referenced_tables': 'domostats_people',\n  'target_table': 't_1',\n  'transform_sql': 'SELECT `Display Name`,\\n'\n                   '       `User ID` , @row := @row+1 AS id , @isReset := CASE '\n                   'WHEN @iter = @rowCounter THEN 1\\n'\n                   '            ELSE 0\\n'\n                   '             END isReset , @group := @isReset + @group AS '\n                   'rowGroup , @iter := CASE WHEN @isReset = 1 THEN 1\\n'\n                   '            ELSE @iter + 1\\n'\n                   '             END iter , @rowCounter := CASE WHEN @isReset '\n                   '= 1 THEN FLOOR(RAND() * (7-3) + 3)\\n'\n                   '            ELSE @rowCounter\\n'\n                   '             END numChildren\\n'\n                   '  FROM `domostats_people` p ,\\n'\n                   '       (\\n'\n                   '        SELECT @row:= 0,@rowCounter:= 1, @iter := 1, '\n                   '@isReset := 0 , @group := 0\\n'\n                   '       ) r'},\n {'referenced_tables': 't_1',\n  'target_table': 'reportsto',\n  'transform_sql': 'SELECT b.`User ID` AS userID,\\n'\n                   \"       'reportsTo' AS Action,\\n\"\n                   '       a.`User ID` AS bodyID\\n'\n                   '  FROM t_1 a\\n'\n                   '  JOIN t_1 b\\n'\n                   '    ON a.id = b.`rowGroup`\\n'\n                   ' WHERE a.`User ID` &lt;&gt; b.`User ID`\\n'\n                   ' UNION SELECT b.`User ID` AS userID,\\n'\n                   \"       'directReports' AS Action,\\n\"\n                   '       a.`User ID` AS bodyID\\n'\n                   '  FROM t_1 a\\n'\n                   '  JOIN t_1 b\\n'\n                   '    ON b.id = a.`rowGroup`\\n'\n                   ' WHERE a.`User ID` &lt;&gt; b.`User ID`'},\n {'referenced_tables': 'reportsto',\n  'target_table': 'domoStats_people_reports',\n  'transform_sql': 'SELECT *\\n  FROM `reportsto`'}]"
  },
  {
    "objectID": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/index_v2_with_history.html",
    "href": "blog/posts/2023-11-18 _creatingDomoStats_MgicETL/index_v2_with_history.html",
    "title": "Tutorial - Generate a DomoStats dataset using DomoLibrary",
    "section": "",
    "text": "# pip install --upgrade domolibrary\n\n\nimport domolibrary\n\ndomolibrary.__version__\n\n'4.0.1'\n\n\n\nretrieve Authentication credentials\nDon’t store your password on the internet!!!\n\nimport os\n\ndomo_username = os.environ.get(\"DOMO_USERNAME\")\ndomo_instance = \"domo-community\"\ndomo_password = os.environ.get(\"DOJO_PASSWORD\")\n\nTEST_DATAFLOW_ID = 108\n\n\nimport domolibrary.client.DomoAuth as dmda\n\nauth = dmda.DomoFullAuth(\n    domo_username=domo_username,\n    domo_password=domo_password,\n    domo_instance=domo_instance,\n)\n\nawait auth.print_is_token()\n\nassert auth.token\n\n🎉 full_auth token retrieved from domo-community ⚙️\n\n\n\n\nRetrieve Data\n\nHow do you handle looping??\nHow do you handle ‘fast’ code execution? (asynchronous code execution)\nWill one request be enough?\n\nget all dataflow\nfor each dataflow retrieve the correct information”\n\n\n\nimport domolibrary.classes.DomoDatacenter as dmdc\nfrom typing import List\n\n\nasync def get_dataflow_ids(auth: dmda.DomoAuth) -&gt; List[int]:\n    \"\"\"searches domo datacenter and returns a list of dataflow_ids\"\"\"\n\n    domo_datacenter = dmdc.DomoDatacenter(auth=auth)\n\n    dataflows_ls = await domo_datacenter.search_datacenter(\n        auth=auth,\n        entity_type=\"DATAFLOW\",\n        additional_filters_ls=[\n            {\n                \"filterType\": \"term\",\n                \"field\": \"data_flow_type\",\n                \"value\": \"MAGIC\",\n                \"name\": \"Magic ETL v2\",\n                \"not\": False,\n            }\n        ],\n    )\n\n    return [dataflow_obj[\"databaseId\"] for dataflow_obj in dataflows_ls]\n\n\ndataflow_ids = await get_dataflow_ids(auth)\ndataflow_ids[0:5]\n\n['340', '131', '227', '37', '185']\n\n\n\nimport domolibrary.classes.DomoDataflow as dmdf\nimport domolibrary.utils.chunk_execution as ce\nfrom typing import List\n\n\nasync def get_dataflows(dataflow_ids_ls: List[int]) -&gt; List[dmdf.DomoDataflow]:\n    \"\"\"retrieves dataflow metadata from a list of dataflows\"\"\"\n\n    return await ce.gather_with_concurrency(\n        *[\n            dmdf.DomoDataflow.get_from_id(dataflow_id=dataflow_id, auth=auth)\n            for dataflow_id in dataflow_ids_ls\n        ],\n        n=20\n    )\n\n\ndomo_dataflow_ls = await get_dataflows([TEST_DATAFLOW_ID])\ndomo_dataflow = domo_dataflow_ls[0]\ndomo_dataflow\n\nDomoDataflow(id=108, name='Datasets_lineage', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='dce3487e-6a2d-49a2-afd4-1f7867cb3b95', type='LoadFromVault', name='Governance_datasets', datasource_id='42917df1-fa58-483f-a290-5fe95ccda4ed', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='3b3396dd-a673-4211-868f-abbbcc4ce0a3', type='SelectValues', name='Datasets', datasource_id=None, sql=None, depends_on=['dce3487e-6a2d-49a2-afd4-1f7867cb3b95'], parent_actions=[DomoDataflow_Action(id='dce3487e-6a2d-49a2-afd4-1f7867cb3b95', type='LoadFromVault', name='Governance_datasets', datasource_id='42917df1-fa58-483f-a290-5fe95ccda4ed', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='7e839c17-3e1a-4938-86d4-1b19d61c3662', type='SelectValues', name='Dataflow Details', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='b1ec014b-66d8-4518-84fc-7c6579be9749', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['741d4ee4-32e9-47ca-8a2d-98f075d17518'], parent_actions=[DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])])]), DomoDataflow_Action(id='0d4e85e7-b988-4492-9340-199869d5a66b', type='Unique', name='Remove Duplicates', datasource_id=None, sql=None, depends_on=['b1ec014b-66d8-4518-84fc-7c6579be9749'], parent_actions=[DomoDataflow_Action(id='b1ec014b-66d8-4518-84fc-7c6579be9749', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['741d4ee4-32e9-47ca-8a2d-98f075d17518'], parent_actions=[DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])])])]), DomoDataflow_Action(id='2333341b-3a52-4b43-b72d-4ace763a9d1f', type='UnionAll', name='Dataflow Details With datafusion', datasource_id=None, sql=None, depends_on=['7e839c17-3e1a-4938-86d4-1b19d61c3662', '0d4e85e7-b988-4492-9340-199869d5a66b'], parent_actions=[DomoDataflow_Action(id='7e839c17-3e1a-4938-86d4-1b19d61c3662', type='SelectValues', name='Dataflow Details', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='0d4e85e7-b988-4492-9340-199869d5a66b', type='Unique', name='Remove Duplicates', datasource_id=None, sql=None, depends_on=['b1ec014b-66d8-4518-84fc-7c6579be9749'], parent_actions=[DomoDataflow_Action(id='b1ec014b-66d8-4518-84fc-7c6579be9749', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['741d4ee4-32e9-47ca-8a2d-98f075d17518'], parent_actions=[DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])])])])]), DomoDataflow_Action(id='33a5f316-cb1e-4c2c-bf10-911396a5ae97', type='PythonEngineAction', name='Python Script', datasource_id=None, sql=None, depends_on=['3b3396dd-a673-4211-868f-abbbcc4ce0a3', '2333341b-3a52-4b43-b72d-4ace763a9d1f'], parent_actions=[DomoDataflow_Action(id='3b3396dd-a673-4211-868f-abbbcc4ce0a3', type='SelectValues', name='Datasets', datasource_id=None, sql=None, depends_on=['dce3487e-6a2d-49a2-afd4-1f7867cb3b95'], parent_actions=[DomoDataflow_Action(id='dce3487e-6a2d-49a2-afd4-1f7867cb3b95', type='LoadFromVault', name='Governance_datasets', datasource_id='42917df1-fa58-483f-a290-5fe95ccda4ed', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='2333341b-3a52-4b43-b72d-4ace763a9d1f', type='UnionAll', name='Dataflow Details With datafusion', datasource_id=None, sql=None, depends_on=['7e839c17-3e1a-4938-86d4-1b19d61c3662', '0d4e85e7-b988-4492-9340-199869d5a66b'], parent_actions=[DomoDataflow_Action(id='7e839c17-3e1a-4938-86d4-1b19d61c3662', type='SelectValues', name='Dataflow Details', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='0d4e85e7-b988-4492-9340-199869d5a66b', type='Unique', name='Remove Duplicates', datasource_id=None, sql=None, depends_on=['b1ec014b-66d8-4518-84fc-7c6579be9749'], parent_actions=[DomoDataflow_Action(id='b1ec014b-66d8-4518-84fc-7c6579be9749', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['741d4ee4-32e9-47ca-8a2d-98f075d17518'], parent_actions=[DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])])])])])]), DomoDataflow_Action(id='dffae0ba-4e21-457f-b190-9af841e5f771', type='PublishToVault', name='Datasets_lineage', datasource_id='715429cb-45c5-4da6-b606-23d845da0f2b', sql=None, depends_on=['33a5f316-cb1e-4c2c-bf10-911396a5ae97'], parent_actions=[DomoDataflow_Action(id='33a5f316-cb1e-4c2c-bf10-911396a5ae97', type='PythonEngineAction', name='Python Script', datasource_id=None, sql=None, depends_on=['3b3396dd-a673-4211-868f-abbbcc4ce0a3', '2333341b-3a52-4b43-b72d-4ace763a9d1f'], parent_actions=[DomoDataflow_Action(id='3b3396dd-a673-4211-868f-abbbcc4ce0a3', type='SelectValues', name='Datasets', datasource_id=None, sql=None, depends_on=['dce3487e-6a2d-49a2-afd4-1f7867cb3b95'], parent_actions=[DomoDataflow_Action(id='dce3487e-6a2d-49a2-afd4-1f7867cb3b95', type='LoadFromVault', name='Governance_datasets', datasource_id='42917df1-fa58-483f-a290-5fe95ccda4ed', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='2333341b-3a52-4b43-b72d-4ace763a9d1f', type='UnionAll', name='Dataflow Details With datafusion', datasource_id=None, sql=None, depends_on=['7e839c17-3e1a-4938-86d4-1b19d61c3662', '0d4e85e7-b988-4492-9340-199869d5a66b'], parent_actions=[DomoDataflow_Action(id='7e839c17-3e1a-4938-86d4-1b19d61c3662', type='SelectValues', name='Dataflow Details', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='0d4e85e7-b988-4492-9340-199869d5a66b', type='Unique', name='Remove Duplicates', datasource_id=None, sql=None, depends_on=['b1ec014b-66d8-4518-84fc-7c6579be9749'], parent_actions=[DomoDataflow_Action(id='b1ec014b-66d8-4518-84fc-7c6579be9749', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['741d4ee4-32e9-47ca-8a2d-98f075d17518'], parent_actions=[DomoDataflow_Action(id='741d4ee4-32e9-47ca-8a2d-98f075d17518', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['b285a26d-cc81-4ac9-bfc5-68effba45241'], parent_actions=[DomoDataflow_Action(id='b285a26d-cc81-4ac9-bfc5-68effba45241', type='Filter', name='Filter Rows', datasource_id=None, sql=None, depends_on=['df709f9b-0e6f-4f69-8b66-aa7411028db8'], parent_actions=[DomoDataflow_Action(id='df709f9b-0e6f-4f69-8b66-aa7411028db8', type='LoadFromVault', name='Governance_dataflow_details', datasource_id='260a54f7-9636-4eac-9a24-39e56d9b2f5d', sql=None, depends_on=None, parent_actions=None)])])])])])])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None))\n\n\n\nimport pandas as pd\n\n\nasync def generate_version_action_pdf(domo_dataflow: dmdf.DomoDataflow) -&gt; pd.DataFrame:\n    \"\"\"retrieves dataflow definition version history of a dataflow\"\"\"\n\n    dataflow_versions = await domo_dataflow.get_versions()\n\n    if not domo_dataflow.versions:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(\n        [\n            {\n                \"dataflow_id\": dataflow_version.id,\n                \"dataflow_version\": dataflow_version.version_id,\n                \"dataflow_name\": dataflow_version.name,\n                **domo_action.__dict__,\n            }\n            for dataflow_version in dataflow_versions\n            for domo_action in dataflow_version.actions\n        ]\n    )\n\n    df.drop(columns=[\"parent_actions\", \"datasource_id\", \"sql\"], inplace=True)\n    df.rename(columns={\"id\": \"tile_id\", \"type\": \"tile_type\"}, inplace=True)\n\n    return df\n\n\nawait generate_version_action_pdf(domo_dataflow)\n\n\n\n\n\n\n\n\n\ndataflow_id\ndataflow_version\ndataflow_name\ntile_id\ntile_type\nname\ndepends_on\n\n\n\n\n0\n108\n448\nDatasets_lineage\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nLoadFromVault\nGovernance_datasets\nNone\n\n\n1\n108\n448\nDatasets_lineage\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nLoadFromVault\nGovernance_dataflow_details\nNone\n\n\n2\n108\n448\nDatasets_lineage\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nSelectValues\nDatasets\n[dce3487e-6a2d-49a2-afd4-1f7867cb3b95]\n\n\n3\n108\n448\nDatasets_lineage\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nSelectValues\nDataflow Details\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n4\n108\n448\nDatasets_lineage\nb285a26d-cc81-4ac9-bfc5-68effba45241\nFilter\nFilter Rows\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n5\n108\n448\nDatasets_lineage\n741d4ee4-32e9-47ca-8a2d-98f075d17518\nSelectValues\nSelect Columns\n[b285a26d-cc81-4ac9-bfc5-68effba45241]\n\n\n6\n108\n448\nDatasets_lineage\nb1ec014b-66d8-4518-84fc-7c6579be9749\nExpressionEvaluator\nAdd Formula\n[741d4ee4-32e9-47ca-8a2d-98f075d17518]\n\n\n7\n108\n448\nDatasets_lineage\n2333341b-3a52-4b43-b72d-4ace763a9d1f\nUnionAll\nDataflow Details With datafusion\n[7e839c17-3e1a-4938-86d4-1b19d61c3662, 0d4e85e...\n\n\n8\n108\n448\nDatasets_lineage\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPythonEngineAction\nPython Script\n[3b3396dd-a673-4211-868f-abbbcc4ce0a3, 2333341...\n\n\n9\n108\n448\nDatasets_lineage\ndffae0ba-4e21-457f-b190-9af841e5f771\nPublishToVault\nDatasets_lineage\n[33a5f316-cb1e-4c2c-bf10-911396a5ae97]\n\n\n10\n108\n448\nDatasets_lineage\n0d4e85e7-b988-4492-9340-199869d5a66b\nUnique\nRemove Duplicates\n[b1ec014b-66d8-4518-84fc-7c6579be9749]\n\n\n11\n108\n443\nDatasets_lineage\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nLoadFromVault\nGovernance_datasets\nNone\n\n\n12\n108\n443\nDatasets_lineage\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nLoadFromVault\nGovernance_dataflow_details\nNone\n\n\n13\n108\n443\nDatasets_lineage\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nSelectValues\nDatasets\n[dce3487e-6a2d-49a2-afd4-1f7867cb3b95]\n\n\n14\n108\n443\nDatasets_lineage\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nSelectValues\nDataflow Details\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n15\n108\n443\nDatasets_lineage\nb285a26d-cc81-4ac9-bfc5-68effba45241\nFilter\nFilter Rows\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n16\n108\n443\nDatasets_lineage\n741d4ee4-32e9-47ca-8a2d-98f075d17518\nSelectValues\nSelect Columns\n[b285a26d-cc81-4ac9-bfc5-68effba45241]\n\n\n17\n108\n443\nDatasets_lineage\nb1ec014b-66d8-4518-84fc-7c6579be9749\nExpressionEvaluator\nAdd Formula\n[741d4ee4-32e9-47ca-8a2d-98f075d17518]\n\n\n18\n108\n443\nDatasets_lineage\n2333341b-3a52-4b43-b72d-4ace763a9d1f\nUnionAll\nDataflow Details With datafusion\n[7e839c17-3e1a-4938-86d4-1b19d61c3662, b1ec014...\n\n\n19\n108\n443\nDatasets_lineage\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPythonEngineAction\nPython Script\n[3b3396dd-a673-4211-868f-abbbcc4ce0a3, 2333341...\n\n\n20\n108\n443\nDatasets_lineage\ndffae0ba-4e21-457f-b190-9af841e5f771\nPublishToVault\nDatasets_lineage\n[33a5f316-cb1e-4c2c-bf10-911396a5ae97]\n\n\n21\n108\n442\nDatasets_lineage\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nLoadFromVault\nGovernance_datasets\nNone\n\n\n22\n108\n442\nDatasets_lineage\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nLoadFromVault\nGovernance_dataflow_details\nNone\n\n\n23\n108\n442\nDatasets_lineage\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nSelectValues\nDatasets\n[dce3487e-6a2d-49a2-afd4-1f7867cb3b95]\n\n\n24\n108\n442\nDatasets_lineage\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nSelectValues\nDataflow Details\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n25\n108\n442\nDatasets_lineage\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPythonEngineAction\nPython Script\n[3b3396dd-a673-4211-868f-abbbcc4ce0a3, 2333341...\n\n\n26\n108\n442\nDatasets_lineage\ndffae0ba-4e21-457f-b190-9af841e5f771\nPublishToVault\nDatasets_lineage\n[33a5f316-cb1e-4c2c-bf10-911396a5ae97]\n\n\n27\n108\n442\nDatasets_lineage\nb285a26d-cc81-4ac9-bfc5-68effba45241\nFilter\nFilter Rows\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n28\n108\n442\nDatasets_lineage\n741d4ee4-32e9-47ca-8a2d-98f075d17518\nSelectValues\nSelect Columns\n[b285a26d-cc81-4ac9-bfc5-68effba45241]\n\n\n29\n108\n442\nDatasets_lineage\nb1ec014b-66d8-4518-84fc-7c6579be9749\nExpressionEvaluator\nAdd Formula\n[741d4ee4-32e9-47ca-8a2d-98f075d17518]\n\n\n30\n108\n442\nDatasets_lineage\n2333341b-3a52-4b43-b72d-4ace763a9d1f\nUnionAll\nDataflow Details With datafusion\n[7e839c17-3e1a-4938-86d4-1b19d61c3662, b1ec014...\n\n\n31\n108\n441\nDatasets_lineage\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nLoadFromVault\nGovernance_datasets\nNone\n\n\n32\n108\n441\nDatasets_lineage\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nLoadFromVault\nGovernance_dataflow_details\nNone\n\n\n33\n108\n441\nDatasets_lineage\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nSelectValues\nDatasets\n[dce3487e-6a2d-49a2-afd4-1f7867cb3b95]\n\n\n34\n108\n441\nDatasets_lineage\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nSelectValues\nDataflow Details\n[df709f9b-0e6f-4f69-8b66-aa7411028db8]\n\n\n35\n108\n441\nDatasets_lineage\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPythonEngineAction\nPython Script\n[3b3396dd-a673-4211-868f-abbbcc4ce0a3, 7e839c1...\n\n\n36\n108\n441\nDatasets_lineage\ndffae0ba-4e21-457f-b190-9af841e5f771\nPublishToVault\nDatasets_lineage\n[33a5f316-cb1e-4c2c-bf10-911396a5ae97]\n\n\n\n\n\n\n\n\n\nasync def generate_action_stats_df(\n    domo_dataflow: dmdf.DomoDataflow,\n    maximum_history: int = 10,  # number of history to look back\n) -&gt; pd.DataFrame:\n    \"\"\"returns execution history by tile\"\"\"\n\n    await domo_dataflow.history.get_execution_history(maximum=maximum_history)\n\n    if (\n        not domo_dataflow.history\n        or not domo_dataflow.history.execution_history\n        or len(domo_dataflow.history.execution_history) == 0\n    ):\n        print(\n            f\"⚠️ dataflow {domo_dataflow.id} - {domo_dataflow.name} has never been executed\"\n        )\n        return pd.DataFrame()\n\n    history_ls = [\n        domo_history\n        for domo_history in domo_dataflow.history.execution_history\n        if domo_history.action_results and len(domo_history.action_results) &gt; 0\n    ]\n\n    df = pd.DataFrame(\n        [\n            {\n                \"dataflow_execution_id\": domo_history.dataflow_execution_id,\n                \"dataflow_version\": domo_history.dataflow_version,\n                \"dataflow_id\": domo_history.dataflow_id,\n                \"dataflow_begin_time\": domo_history.begin_time,\n                **domo_action.__dict__,\n            }\n            for domo_history in history_ls\n            for domo_action in domo_history.action_results\n        ]\n    )\n\n    df.drop(columns=[\"name\"], inplace=True)\n\n    df.rename(columns={\"id\": \"tile_id\", \"type\": \"tile_type\"}, inplace=True)\n\n    return df\n\n\nstats_df = await generate_action_stats_df(domo_dataflow)\nstats_df[0:5]\n\n\n\n\n\n\n\n\n\ndataflow_execution_id\ndataflow_version\ndataflow_id\ndataflow_begin_time\ntile_id\ntile_type\nis_success\nrows_processed\nbegin_time\nend_time\nduration_in_sec\n\n\n\n\n0\n133cb2f6-caf7-4ef0-8535-4f5effdf121e\n448\n108\n2022-11-04 10:06:26\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nDataHubManifestLoaderAction\nTrue\n576\n2022-11-04 10:06:31.425\n2022-11-04 10:06:32.316\n0.891\n\n\n1\n133cb2f6-caf7-4ef0-8535-4f5effdf121e\n448\n108\n2022-11-04 10:06:26\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nDataHubManifestLoaderAction\nTrue\n367\n2022-11-04 10:06:31.425\n2022-11-04 10:06:32.314\n0.889\n\n\n2\n133cb2f6-caf7-4ef0-8535-4f5effdf121e\n448\n108\n2022-11-04 10:06:26\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nSelectValues\nTrue\n576\n2022-11-04 10:06:32.278\n2022-11-04 10:06:32.316\n0.038\n\n\n3\n133cb2f6-caf7-4ef0-8535-4f5effdf121e\n448\n108\n2022-11-04 10:06:26\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nSelectValues\nTrue\n367\n2022-11-04 10:06:32.276\n2022-11-04 10:06:32.277\n0.001\n\n\n4\n133cb2f6-caf7-4ef0-8535-4f5effdf121e\n448\n108\n2022-11-04 10:06:26\nb285a26d-cc81-4ac9-bfc5-68effba45241\nFilter\nTrue\n367\n2022-11-04 10:06:32.278\n2022-11-04 10:06:32.280\n0.002\n\n\n\n\n\n\n\n\n\nasync def process_instance(auth):\n    dataflow_ids = await get_dataflow_ids(auth)\n\n    domo_dataflows = await get_dataflows(dataflow_ids)\n\n    actions_df_ls = await ce.gather_with_concurrency(\n        *[\n            generate_version_action_pdf(domo_dataflow)\n            for domo_dataflow in domo_dataflows\n        ],\n        n=20\n    )\n\n    stats_df_ls = await ce.gather_with_concurrency(\n        *[generate_action_stats_df(domo_dataflow) for domo_dataflow in domo_dataflows],\n        n=20\n    )\n\n    actions_df = pd.concat(actions_df_ls)\n\n    stats_df = pd.concat(stats_df_ls)\n\n    # import domojupyter as dj\n    # dj.write_dataframe(actions_df, 'MONIT_Dataflow_Tiles')\n    # dj.write_dataframe(stats_df, 'MONIT_Dataflow_Stats')\n\n    return actions_df, stats_df\n\n\nbase_actions_df, base_stats_df = await process_instance(auth)\n\n⚠️ dataflow 69 - Copy of gov_datasets_INT has never been executed\n⚠️ dataflow 27 - JW_Simple Sample Set_Rolling Averages has never been executed\n⚠️ dataflow 85 - Working Hours Test has never been executed\n⚠️ dataflow 322 - Forecast Sales - HV has never been executed\n⚠️ dataflow 83 - Working Hours Example has never been executed\n⚠️ dataflow 323 - New ETL Transform has never been executed\n\n\n\ndef generate_datasets(actions_df, stats_df, dataflow_id=None, execution_id=None):\n\n    ### filter and configure actions_df\n    actions_df = actions_df.copy()\n    if dataflow_id:\n        actions_df = actions_df[actions_df[\"dataflow_id\"] == dataflow_id]\n    actions_df.rename(columns={\"name\": \"tile_name\"}, inplace=True)\n\n    #### filter and configure stats_df\n    stats_df = stats_df.copy()\n    if execution_id:\n        stats_df = stats_df[stats_df[\"dataflow_execution_id\"] == execution_id]\n    if dataflow_id:\n        stats_df = stats_df[stats_df[\"dataflow_id\"] == dataflow_id]\n\n    stats_df = pd.merge(\n        stats_df,\n        actions_df[\n            [\"dataflow_id\", \"dataflow_name\", \"dataflow_version\", \"tile_id\", \"tile_name\"]\n        ],\n        how=\"inner\",\n    )\n\n    #### handle generate facts_df with one row per action and parent\n    explode_df = actions_df[\n        [\"dataflow_id\", \"dataflow_version\", \"tile_id\", \"depends_on\"]\n    ].explode(\"depends_on\")\n\n    facts_df = stats_df[\n        [\n            \"dataflow_name\",\n            \"dataflow_execution_id\",\n            \"dataflow_version\",\n            \"dataflow_id\",\n            \"tile_id\",\n            \"tile_name\",\n            \"tile_type\",\n            \"rows_processed\",\n            \"dataflow_begin_time\",\n            \"begin_time\",\n            \"end_time\",\n            \"duration_in_sec\",\n        ]\n    ]\n\n    parent_df = facts_df[\n        [\n            \"dataflow_execution_id\",\n            \"dataflow_version\",\n            \"dataflow_id\",\n            \"tile_id\",\n            \"tile_name\",\n            \"tile_type\",\n            \"rows_processed\",\n            \"end_time\",\n        ]\n    ].rename(\n        columns={\n            \"tile_id\": \"depends_on\",\n            \"tile_name\": \"parent_tile_name\",\n            \"tile_type\": \"parent_tile_type\",\n            \"rows_processed\": \"parent_rows_processed\",\n            \"end_time\": \"parent_end_time\",\n        }\n    )\n\n    facts_by_parent_df = pd.merge(\n        facts_df,\n        explode_df,\n        how=\"inner\",\n        on=[\"dataflow_id\", \"tile_id\", \"dataflow_version\"],\n    )\n    facts_by_parent_df = pd.merge(\n        facts_by_parent_df,\n        parent_df,\n        how=\"left\",\n        on=[\"dataflow_id\", \"dataflow_version\", \"dataflow_execution_id\", \"depends_on\"],\n    ).rename(columns={\"depends_on\": \"parent_tile_id\"})\n\n    facts_by_parent_df[\"parent_end_time\"] = facts_by_parent_df[\n        \"parent_end_time\"\n    ].fillna(facts_by_parent_df[\"begin_time\"])\n\n    facts_by_parent_df[\"actual_duration_in_sec\"] = (\n        facts_by_parent_df[\"end_time\"] - facts_by_parent_df[\"parent_end_time\"]\n    ).dt.total_seconds()\n    facts_by_parent_df[\"tile_delay_rank\"] = facts_by_parent_df.groupby(\n        [\"dataflow_execution_id\", \"dataflow_version\", \"dataflow_id\", \"tile_id\"]\n    )[\"actual_duration_in_sec\"].rank(ascending=False)\n\n    return facts_by_parent_df.sort_values(\n        by=[\"dataflow_id\", \"begin_time\", \"parent_tile_id\"], ascending=True\n    )\n\n\ngenerate_datasets(\n    base_actions_df,\n    base_stats_df,\n    TEST_DATAFLOW_ID,\n    execution_id=\"1e331f2b-1db8-460d-9860-334aedc88e93\",\n)\n\n\n\n\n\n\n\n\n\ndataflow_name\ndataflow_execution_id\ndataflow_version\ndataflow_id\ntile_id\ntile_name\ntile_type\nrows_processed\ndataflow_begin_time\nbegin_time\nend_time\nduration_in_sec\nparent_tile_id\nparent_tile_name\nparent_tile_type\nparent_rows_processed\nparent_end_time\nactual_duration_in_sec\ntile_delay_rank\n\n\n\n\n0\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nGovernance_datasets\nDataHubManifestLoaderAction\n570.0\n2022-11-03 09:33:00\n2022-11-03 09:33:05.717\n2022-11-03 09:33:06.614\n0.897\nNone\nNaN\nNaN\nNaN\n2022-11-03 09:33:05.717\n0.897\n1.0\n\n\n1\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nGovernance_dataflow_details\nDataHubManifestLoaderAction\n361.0\n2022-11-03 09:33:00\n2022-11-03 09:33:05.717\n2022-11-03 09:33:06.656\n0.939\nNone\nNaN\nNaN\nNaN\n2022-11-03 09:33:05.717\n0.939\n1.0\n\n\n2\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nDatasets\nSelectValues\n570.0\n2022-11-03 09:33:00\n2022-11-03 09:33:06.609\n2022-11-03 09:33:06.614\n0.005\ndce3487e-6a2d-49a2-afd4-1f7867cb3b95\nGovernance_datasets\nDataHubManifestLoaderAction\n570.0\n2022-11-03 09:33:06.614\n0.000\n1.0\n\n\n4\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPython Script\nPythonEngineAction\n931.0\n2022-11-03 09:33:00\n2022-11-03 09:33:06.610\n2022-11-03 09:33:15.408\n8.798\n3b3396dd-a673-4211-868f-abbbcc4ce0a3\nDatasets\nSelectValues\n570.0\n2022-11-03 09:33:06.614\n8.794\n1.0\n\n\n5\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPython Script\nPythonEngineAction\n931.0\n2022-11-03 09:33:00\n2022-11-03 09:33:06.610\n2022-11-03 09:33:15.408\n8.798\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nDataflow Details\nSelectValues\n361.0\n2022-11-03 09:33:06.656\n8.752\n2.0\n\n\n3\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\n7e839c17-3e1a-4938-86d4-1b19d61c3662\nDataflow Details\nSelectValues\n361.0\n2022-11-03 09:33:00\n2022-11-03 09:33:06.656\n2022-11-03 09:33:06.656\n0.000\ndf709f9b-0e6f-4f69-8b66-aa7411028db8\nGovernance_dataflow_details\nDataHubManifestLoaderAction\n361.0\n2022-11-03 09:33:06.656\n0.000\n1.0\n\n\n6\nDatasets_lineage\n1e331f2b-1db8-460d-9860-334aedc88e93\n441\n108\ndffae0ba-4e21-457f-b190-9af841e5f771\nDatasets_lineage\nPublishToVault\n1391.0\n2022-11-03 09:33:00\n2022-11-03 09:33:15.348\n2022-11-03 09:33:15.490\n0.142\n33a5f316-cb1e-4c2c-bf10-911396a5ae97\nPython Script\nPythonEngineAction\n931.0\n2022-11-03 09:33:15.408\n0.082\n1.0\n\n\n\n\n\n\n\n\n\ngenerate_datasets(base_actions_df, base_stats_df, None, None)\n\n# dj.write_dataframe(exploded_df , 'MONIT_Dataflow_Tiles_Exploded')\n\n\n\n\n\n\n\n\n\ndataflow_name\ndataflow_execution_id\ndataflow_version\ndataflow_id\ntile_id\ntile_name\ntile_type\nrows_processed\ndataflow_begin_time\nbegin_time\nend_time\nduration_in_sec\nparent_tile_id\nparent_tile_name\nparent_tile_type\nparent_rows_processed\nparent_end_time\nactual_duration_in_sec\ntile_delay_rank\n\n\n\n\n11025\nMetaData_Stage 1\n8f77dfc7-b2fb-4f3c-9d24-1d94e0e32424\n19\n8\nd312578c-e9cb-4e3a-9dc6-662c00c93ba0\nGovernance_Users and Groups\nDataHubManifestLoaderAction\n35.0\n2020-07-09 16:00:07\n2020-07-09 16:00:17.000\n2020-07-09 16:00:21.000\n4.000\nNone\nNaN\nNaN\nNaN\n2020-07-09 16:00:17.000\n4.000\n1.0\n\n\n11026\nMetaData_Stage 1\n8f77dfc7-b2fb-4f3c-9d24-1d94e0e32424\n19\n8\nd316ddf3-9917-4542-bf68-e1cd8397d894\nGovernance_Groups\nDataHubManifestLoaderAction\n3.0\n2020-07-09 16:00:07\n2020-07-09 16:00:17.000\n2020-07-09 16:00:21.000\n4.000\nNone\nNaN\nNaN\nNaN\n2020-07-09 16:00:17.000\n4.000\n1.0\n\n\n11028\nMetaData_Stage 1\n8f77dfc7-b2fb-4f3c-9d24-1d94e0e32424\n19\n8\neebdf394-fc6d-40c0-895e-b325044db506\nMetaData_Groups\nPublishToVault\n3.0\n2020-07-09 16:00:07\n2020-07-09 16:00:21.000\n2020-07-09 16:00:22.000\n1.000\n0fe45cc8-7c88-48cb-a437-4656954767a6\nPDP?\nConstant\n3.0\n2020-07-09 16:00:21.000\n1.000\n1.0\n\n\n11027\nMetaData_Stage 1\n8f77dfc7-b2fb-4f3c-9d24-1d94e0e32424\n19\n8\ne048f809-08ae-49c2-84be-5b7b76a99944\nMetaData_Users and Groups\nPublishToVault\n35.0\n2020-07-09 16:00:07\n2020-07-09 16:00:21.000\n2020-07-09 16:00:22.000\n1.000\n8e52e4dc-fd3a-455b-9ec1-c2a404d342d0\nPDP? 1\nConstant\n35.0\n2020-07-09 16:00:21.000\n1.000\n1.0\n\n\n11024\nMetaData_Stage 1\n8f77dfc7-b2fb-4f3c-9d24-1d94e0e32424\n19\n8\n8e52e4dc-fd3a-455b-9ec1-c2a404d342d0\nPDP? 1\nConstant\n35.0\n2020-07-09 16:00:07\n2020-07-09 16:00:21.000\n2020-07-09 16:00:21.000\n0.000\nd312578c-e9cb-4e3a-9dc6-662c00c93ba0\nGovernance_Users and Groups\nDataHubManifestLoaderAction\n35.0\n2020-07-09 16:00:21.000\n0.000\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n11750\nDEV | Swish Central\n69207fcb-bc5b-4792-b82d-81a8eb05bc70\n1062\n357\nf2a5bf78-3757-4be3-b555-a354df56ce53\nTEST | Swish Central\nPublishToVault\n40756.0\n2024-02-06 16:35:04\n2024-02-06 16:35:20.967\n2024-02-06 16:35:24.767\n3.800\n47257e8e-8a34-41cf-a438-3c034eeb4f87\nSelect Columns 1\nSelectValues\n40756.0\n2024-02-06 16:35:24.066\n0.701\n1.0\n\n\n11747\nDEV | Swish Central\n69207fcb-bc5b-4792-b82d-81a8eb05bc70\n1062\n357\nd6fb5455-f89b-4c83-8714-89fd084db9bb\nRemove Duplicates\nUnique\n38111.0\n2024-02-06 16:35:04\n2024-02-06 16:35:21.167\n2024-02-06 16:35:24.065\n2.898\n2a867c0e-8a3d-49db-81fa-d1ab6668c82c\nFilter Rows\nFilter\n40756.0\n2024-02-06 16:35:24.065\n0.000\n1.0\n\n\n11746\nDEV | Swish Central\n69207fcb-bc5b-4792-b82d-81a8eb05bc70\n1062\n357\n2a867c0e-8a3d-49db-81fa-d1ab6668c82c\nFilter Rows\nFilter\n40756.0\n2024-02-06 16:35:04\n2024-02-06 16:35:21.167\n2024-02-06 16:35:24.065\n2.898\n47257e8e-8a34-41cf-a438-3c034eeb4f87\nSelect Columns 1\nSelectValues\n40756.0\n2024-02-06 16:35:24.066\n-0.001\n1.0\n\n\n11749\nDEV | Swish Central\n69207fcb-bc5b-4792-b82d-81a8eb05bc70\n1062\n357\n1da7fa87-0d1b-434d-b018-cb80a5f3ce5a\nDEV | Swish Central\nPublishToVault\n37924.0\n2024-02-06 16:35:04\n2024-02-06 16:35:21.168\n2024-02-06 16:35:24.734\n3.566\n24bc7117-ac36-4e5c-aee5-582d8f954cec\nAdd Formula 4\nExpressionEvaluator\n37924.0\n2024-02-06 16:35:24.066\n0.668\n1.0\n\n\n11748\nDEV | Swish Central\n69207fcb-bc5b-4792-b82d-81a8eb05bc70\n1062\n357\n24bc7117-ac36-4e5c-aee5-582d8f954cec\nAdd Formula 4\nExpressionEvaluator\n37924.0\n2024-02-06 16:35:04\n2024-02-06 16:35:21.168\n2024-02-06 16:35:24.066\n2.898\nd6fb5455-f89b-4c83-8714-89fd084db9bb\nRemove Duplicates\nUnique\n38111.0\n2024-02-06 16:35:24.065\n0.001\n1.0\n\n\n\n\n15633 rows × 19 columns"
  },
  {
    "objectID": "blog/posts/2023-04-03_AutomatedTagging/index.html",
    "href": "blog/posts/2023-04-03_AutomatedTagging/index.html",
    "title": "Automated Tagging",
    "section": "",
    "text": "a short post on using DomoLibrary to automate dataset tagging\n\nProject Configuration\n\nimport domolibrary.client.DomoAuth as dmda\nimport os\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait token_auth.get_auth_token()\n\nassert isinstance(token_auth.token, str)\n\n\n\nGet Datasets\n\nimport domolibrary.classes.DomoDatacenter as ddc\nimport pandas as pd\n\ndomo_datasets = await ddc.DomoDatacenter.search_datasets(auth=token_auth)\n\ndomo_datasets[0:5]\n\n[DomoDataset(id='da552832-c04d-46ac-936a-f982d9d3f2e6', display_type='api', data_provider_type=None, name='SalesProject01_hello world_INT *', description=None, row_count=0, column_count=0, stream_id=None, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['provider_type : api *', 'proj_phase : 01 *', 'proj_name : SalesProject *', 'ds_type : INT *'])),\n DomoDataset(id='a2f255fc-6c24-4e63-9b61-0c88ae7c33a5', display_type='webform', data_provider_type='webform', name='AJ | Waterfall Demo', description=None, row_count=48, column_count=4, stream_id=973, owner={'id': '1345737456', 'name': 'Aditya Jain', 'type': 'USER', 'group': False}, formula={'calculation_c4e9c63d-f4c9-4c13-a7bc-8baf83f55721': {'templateId': 2662, 'id': 'calculation_c4e9c63d-f4c9-4c13-a7bc-8baf83f55721', 'name': 'WF Values', 'formula': \"SUM(CASE \\n\\tWHEN \\n    \\tDOMO_BEAST_MODE(2661) = 'Absolute' THEN `Values`\\n        ELSE\\n        (CASE \\n\\tWHEN \\n    DOMO_BEAST_MODE(2658) = LEFT(MONTHNAME(`Month`),3) THEN `Values` ELSE 0 \\nEND)\\n   -\\n   (CASE \\n\\tWHEN \\n    DOMO_BEAST_MODE(2659) = LEFT(MONTHNAME(`Month`),3) THEN `Values` ELSE 0 \\nEND)\\n    END)\", 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Values`', 'columnPosition': 62}, {'columnName': '`Month`', 'columnPosition': 149}, {'columnName': '`Values`', 'columnPosition': 166}, {'columnName': '`Month`', 'columnPosition': 253}, {'columnName': '`Values`', 'columnPosition': 270}]}, 'calculation_34e6562c-d19d-408d-8b68-91dc72d48150': {'templateId': 2660, 'id': 'calculation_34e6562c-d19d-408d-8b68-91dc72d48150', 'name': 'Values Delta', 'formula': 'SUM(CASE \\n\\tWHEN \\n    DOMO_BEAST_MODE(2658) = LEFT(MONTHNAME(`Month`),3) THEN `Values` ELSE 0 \\nEND)\\n   -\\n   SUM(CASE \\n\\tWHEN \\n    DOMO_BEAST_MODE(2659) = LEFT(MONTHNAME(`Month`),3) THEN `Values` ELSE 0 \\nEND)\\n    ', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Month`', 'columnPosition': 60}, {'columnName': '`Values`', 'columnPosition': 77}, {'columnName': '`Month`', 'columnPosition': 167}, {'columnName': '`Values`', 'columnPosition': 184}]}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[])),\n DomoDataset(id='dbb9502b-777f-4845-b218-fd212ffa334e', display_type='dataflow', data_provider_type='dataflow', name='AJ | Store Sales Analysis Dataset', description=None, row_count=907841, column_count=57, stream_id=None, owner={'id': '1345737456', 'name': 'Aditya Jain', 'type': 'USER', 'group': False}, formula={'calculation_bfad6d3f-ac3f-4f4c-9db6-c11c9b5cf137': {'templateId': 798, 'id': 'calculation_bfad6d3f-ac3f-4f4c-9db6-c11c9b5cf137', 'name': 'Retail Profit', 'formula': 'SUM(`current_retail_price`) - SUM(`current_cost`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`current_retail_price`', 'columnPosition': 4}, {'columnName': '`current_cost`', 'columnPosition': 34}]}, 'calculation_54803ae4-cad0-4d89-9dcd-440780bf27af': {'templateId': 796, 'id': 'calculation_54803ae4-cad0-4d89-9dcd-440780bf27af', 'name': 'Total Revenue', 'formula': \"`quantity_sold` * `unit_price` * \\nCASE WHEN DOMO_BEAST_MODE(2530) = 'lb' THEN 2.3 else 2.9 end\", 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`quantity_sold`', 'columnPosition': 0}, {'columnName': '`unit_price`', 'columnPosition': 18}]}, 'calculation_2c68accf-d899-43e4-afca-9db6cfc65471': {'templateId': 799, 'id': 'calculation_2c68accf-d899-43e4-afca-9db6cfc65471', 'name': 'Wholesale Profit', 'formula': 'SUM(`current_wholesale_price`) - SUM(`current_cost`)', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`current_wholesale_price`', 'columnPosition': 4}, {'columnName': '`current_cost`', 'columnPosition': 37}]}, 'calculation_3715c792-0de0-4f18-941e-03ddf0280253': {'templateId': 2534, 'id': 'calculation_3715c792-0de0-4f18-941e-03ddf0280253', 'name': 'Dates', 'formula': \"CASE DOMO_BEAST_MODE(2533)\\nWHEN 'Months' THEN `Month_Name`\\nWHEN 'Quarters' THEN `Quarter_Name`\\nELSE `Year_ID`\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Month_Name`', 'columnPosition': 46}, {'columnName': '`Quarter_Name`', 'columnPosition': 80}, {'columnName': '`Year_ID`', 'columnPosition': 100}]}, 'calculation_910395bf-a1d1-4ab7-a69c-d9aca58e1bc5': {'templateId': 2529, 'id': 'calculation_910395bf-a1d1-4ab7-a69c-d9aca58e1bc5', 'name': 'PG BM', 'formula': \"CASE\\nWHEN DOMO_BEAST_MODE(2528) = 'Product' THEN `product`\\nWHEN DOMO_BEAST_MODE(2528) = 'Product Group' THEN `product_group`\\n\\nEND\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`product`', 'columnPosition': 49}, {'columnName': '`product_group`', 'columnPosition': 109}]}, 'calculation_5188cba2-d192-4bdd-bcc8-43f99a9aec6f': {'templateId': 2526, 'id': 'calculation_5188cba2-d192-4bdd-bcc8-43f99a9aec6f', 'name': 'Overall', 'formula': 'SUM(SUM(`unit_price`)) OVER ()', 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`unit_price`', 'columnPosition': 8}]}, 'calculation_185dea03-8cdc-4b03-b783-aac67e10d40a': {'templateId': 2539, 'id': 'calculation_185dea03-8cdc-4b03-b783-aac67e10d40a', 'name': 'Product Details', 'formula': 'CONCAT(\\'&lt;div&gt;&lt;a href=\"https://domo-dojo.domo.com/page/1099148856?pfilters=[{\"column\":\"product_group\",\"operand\":\"IN\",\"values\":\"Food\"}]\" target=\"_blank\"&gt;\\',\\'Product Details\\',\\'&lt;/a&gt;&lt;/div&gt;\\')', 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False}, 'calculation_70ace6e1-09cc-4e33-9fdc-2f4d1304478a': {'templateId': 800, 'id': 'calculation_70ace6e1-09cc-4e33-9fdc-2f4d1304478a', 'name': 'Customer Distinct', 'formula': 'COUNT(DISTINCT `customer_id`)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`customer_id`', 'columnPosition': 15}]}, 'calculation_5ffde809-7879-41cd-952d-d6e521d53c19': {'templateId': 801, 'id': 'calculation_5ffde809-7879-41cd-952d-d6e521d53c19', 'name': 'Distinct Staff', 'formula': 'COUNT(DISTINCT `staff_id`)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`staff_id`', 'columnPosition': 15}]}, 'calculation_7702d51a-e0d1-40a5-84d0-9026138bd0ef': {'templateId': 797, 'id': 'calculation_7702d51a-e0d1-40a5-84d0-9026138bd0ef', 'name': 'Customer Age', 'formula': 'YEAR(CURRENT_DATE()) - `birth_year`', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`birth_year`', 'columnPosition': 23}]}, 'calculation_f24adf9e-3609-40d7-9c23-9db05c9228ed': {'templateId': 2532, 'id': 'calculation_f24adf9e-3609-40d7-9c23-9db05c9228ed', 'name': 'CAGR', 'formula': \"SUM(CASE\\n\\tWHEN YEAR(`transaction_date`) = 2019 THEN `unit_price` ELSE 0\\nEND)\\n/\\nSUM(\\n  CASE WHEN DOMO_BEAST_MODE(2531) = '1 Year' THEN \\n  CASE\\n\\tWHEN YEAR(`transaction_date`) = 2018 THEN `unit_price` ELSE 0\\nEND\\n  ELSE\\n  CASE\\n\\tWHEN YEAR(`transaction_date`) = 2017 THEN `unit_price` ELSE 0\\nEND\\nEND  \\n  )\", 'status': 'VALID', 'dataType': 'DOUBLE', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`transaction_date`', 'columnPosition': 20}, {'columnName': '`unit_price`', 'columnPosition': 52}, {'columnName': '`transaction_date`', 'columnPosition': 153}, {'columnName': '`unit_price`', 'columnPosition': 185}, {'columnName': '`transaction_date`', 'columnPosition': 234}, {'columnName': '`unit_price`', 'columnPosition': 266}]}, 'calculation_f9e5a7ed-1c64-440b-b3a3-6dacb49db136': {'templateId': 803, 'id': 'calculation_f9e5a7ed-1c64-440b-b3a3-6dacb49db136', 'name': 'Weekday', 'formula': \"(CASE \\tWHEN  DAYOFWEEK(`transaction_date`) = 1 THEN 'SUNDAY'\\n \\t  \\tWHEN  DAYOFWEEK(`transaction_date`) = 2 THEN 'MONDAY'\\n \\t\\tWHEN  DAYOFWEEK(`transaction_date`) = 3 THEN 'TUESDAY'\\n \\t\\tWHEN  DAYOFWEEK(`transaction_date`) = 4 THEN 'WEDNESDAY'\\n \\t\\tWHEN  DAYOFWEEK(`transaction_date`) = 5 THEN 'THURSDAY'\\n \\t\\tWHEN  DAYOFWEEK(`transaction_date`) = 6 THEN 'FRIDAY'\\n \\t\\tELSE 'SATURDAY'\\n END)\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`transaction_date`', 'columnPosition': 23}, {'columnName': '`transaction_date`', 'columnPosition': 82}, {'columnName': '`transaction_date`', 'columnPosition': 139}, {'columnName': '`transaction_date`', 'columnPosition': 197}, {'columnName': '`transaction_date`', 'columnPosition': 257}, {'columnName': '`transaction_date`', 'columnPosition': 316}]}, 'calculation_c78f6bb0-b99f-4e6e-b2f6-0b19fdd00b6d': {'templateId': 802, 'id': 'calculation_c78f6bb0-b99f-4e6e-b2f6-0b19fdd00b6d', 'name': 'Distinct Store', 'formula': 'COUNT(DISTINCT `store_id`)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`store_id`', 'columnPosition': 15}]}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['file-upload-new', 's_file-upload-new'])),\n DomoDataset(id='04c1574e-c8be-4721-9846-c6ffa491144b', display_type='domo-jupyterdata', data_provider_type='domo-jupyterdata', name='domo_kbs', description=None, row_count=1185, column_count=7, stream_id=825, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5': {'templateId': 2664, 'id': 'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5', 'name': 'rowcount', 'formula': 'sum(1)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False}, 'calculation_38846559-d190-4ab1-809b-bcd361db5670': {'templateId': 2665, 'id': 'calculation_38846559-d190-4ab1-809b-bcd361db5670', 'name': 'max_views', 'formula': 'max(views)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': 'views', 'columnPosition': 4}]}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['developer_documentation', 'hackercore'])),\n DomoDataset(id='a71706b3-36e7-4d00-ba78-cb5728949d39', display_type='DataFlow', data_provider_type=None, name='BeastModesGovernance_02_ChangeReport', description=None, row_count=2477, column_count=11, stream_id=None, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={'calculation_88283a00-ab54-4419-936a-63e0cdb28f6b': {'templateId': 2663, 'id': 'calculation_88283a00-ab54-4419-936a-63e0cdb28f6b', 'name': 'rowcount', 'formula': 'sum(1)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=[]))]\n\n\n\nimport domolibrary.classes.DomoDataset as dmd\n\n\ndef process_ds(\n    domo_dataset: dmd.DomoDataset,\n) -&gt; dict:  # dictionary where each attribute except _id and _ds_name becomes a tag\n    \"\"\"\n    receives DomoDataset object, and then generates an object with attributes that will become tags.\n    every organization will have different naming conventions and therefore must generate different rules for how tags can be exctracted from the Domo Dataset object.\n    \"\"\"\n\n    proj_str = domo_dataset.name.split(\"_\", 1)[0]\n    proj_name = proj_str[:-2]\n    proj_phase = proj_str[-2:]\n\n    _ = domo_dataset.name.split(\"_\", 1)[1]\n\n    ds_type = _.split(\"_\")[-1].replace(\" *\", \"\")\n\n    return {\n        \"_id\": domo_dataset.id,\n        \"_ds_name\": domo_dataset.name,\n        \"provider_type\": domo_dataset.display_type or domo_dataset.data_provider_type,\n        \"proj_name\": proj_name,\n        \"proj_phase\": proj_phase,\n        \"ds_type\": ds_type,\n    }\n\n\nimport pandas as pd\n\n# for this project we assume any dataset that ends with * has been validated as adhering to the naming convention format.\ndataset_tags_to_update = [\n    process_ds(domo_dataset)\n    for domo_dataset in domo_datasets\n    if domo_dataset.name.endswith(\"*\")\n]\n\npd.DataFrame(dataset_tags_to_update)\n\n\n\n\n\n\n\n\n\n_id\n_ds_name\nprovider_type\nproj_name\nproj_phase\nds_type\n\n\n\n\n0\nda552832-c04d-46ac-936a-f982d9d3f2e6\nSalesProject01_hello world_INT *\napi\nSalesProject\n01\nINT\n\n\n1\n063dd227-2a2d-4563-a372-6d08c950e86d\nSalesProject02_summary_by_month_DASH *\napi\nSalesProject\n02\nDASH\n\n\n2\n6114155e-e6a5-4c9c-bec0-5f0b8e807579\nSalesProject01_hello world3_INT *\napi\nSalesProject\n01\nINT\n\n\n3\ne5f44d26-4028-4282-88a9-239a0f909373\nSalesProject02_summary_by_day_DASH *\napi\nSalesProject\n02\nDASH\n\n\n\n\n\n\n\n\n\ndef generate_tags(tag_dict):\n    \"\"\"\n    simple utility function to collapse key/value pairs into a string\n    tags generated by this process will be suffixed with an *\n    \"\"\"\n\n    tag_ls = [\n        f\"{key} : {tag_dict[key]} *\"\n        for key in tag_dict.keys()\n        if not key.startswith(\"_\")\n    ]\n\n    info = {\n        key.replace(\"_\", \"\"): tag_dict[key]\n        for key in tag_dict.keys()\n        if key.startswith(\"_\")\n    }\n\n    return {\"tag_ls\": tag_ls, **info}\n\n\nfrom pprint import pprint\n\n# for each dataset to update, tag_ls contains the list of tags that will be added.\ndataset_tags_for_api = [generate_tags(tag_dict) for tag_dict in dataset_tags_to_update]\n\npprint(dataset_tags_for_api)\n\n[{'dsname': 'SalesProject01_hello world_INT *',\n  'id': 'da552832-c04d-46ac-936a-f982d9d3f2e6',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 01 *',\n             'ds_type : INT *']},\n {'dsname': 'SalesProject02_summary_by_month_DASH *',\n  'id': '063dd227-2a2d-4563-a372-6d08c950e86d',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 02 *',\n             'ds_type : DASH *']},\n {'dsname': 'SalesProject01_hello world3_INT *',\n  'id': '6114155e-e6a5-4c9c-bec0-5f0b8e807579',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 01 *',\n             'ds_type : INT *']},\n {'dsname': 'SalesProject02_summary_by_day_DASH *',\n  'id': 'e5f44d26-4028-4282-88a9-239a0f909373',\n  'tag_ls': ['provider_type : api *',\n             'proj_name : SalesProject *',\n             'proj_phase : 02 *',\n             'ds_type : DASH *']}]\n\n\n\nimport domolibrary.classes.DomoDataset as dmd\nimport asyncio\n\n\nasync def process_dataset_tags(dataset_id, tag_ls: [str], auth: dmda.DomoAuth):\n    \"\"\"\n    function to actually update domo dataset entities.\n    tags previously added by this process (denoted with the * suffix) will be removed\n    \"\"\"\n\n    domo_dataset = await dmd.DomoDataset.get_from_id(dataset_id=dataset_id, auth=auth)\n\n    # remove old tags\n    remove_tag_ls = [tag for tag in domo_dataset.tags.tag_ls if tag.endswith(\" *\")]\n\n    if len(remove_tag_ls) &gt; 0:\n        await domo_dataset.tags.remove(remove_tag_ls=remove_tag_ls)\n\n    # add new tags\n    await domo_dataset.tags.add(add_tag_ls=tag_ls)\n\n    return {\n        \"id\": domo_dataset.id,\n        \"name\": domo_dataset.name,\n        \"tags\": domo_dataset.tags.tag_ls,\n    }\n\n\nimport pandas as pd\n\nres = await asyncio.gather(\n    *[\n        process_dataset_tags(\n            dataset_id=row.get(\"id\"), tag_ls=row.get(\"tag_ls\"), auth=token_auth\n        )\n        for row in dataset_tags_for_api\n    ]\n)\n\npd.DataFrame(res)\n\n\n\n\n\n\n\n\n\nid\nname\ntags\n\n\n\n\n0\nda552832-c04d-46ac-936a-f982d9d3f2e6\nSalesProject01_hello world_INT *\n[provider_type : api *, proj_phase : 01 *, pro...\n\n\n1\n063dd227-2a2d-4563-a372-6d08c950e86d\nSalesProject02_summary_by_month_DASH *\n[provider_type : api *, proj_phase : 02 *, ds_...\n\n\n2\n6114155e-e6a5-4c9c-bec0-5f0b8e807579\nSalesProject01_hello world3_INT *\n[provider_type : api *, proj_phase : 01 *, pro...\n\n\n3\ne5f44d26-4028-4282-88a9-239a0f909373\nSalesProject02_summary_by_day_DASH *\n[provider_type : api *, proj_phase : 02 *, ds_..."
  },
  {
    "objectID": "blog/posts/2023-01-24_DomoVariables/index.html",
    "href": "blog/posts/2023-01-24_DomoVariables/index.html",
    "title": "Domo Variables",
    "section": "",
    "text": "https://domo-community.domo.com/page/1880852133\n\nVariable Types\n\nText,number, date\nControls\n\nVariable Grant\n\nThree new Variable and Beast Mode, Domo STats Datasets\n\nFAQ\nDoes Variables support dynamic formatting – no\nUnknown if supports Optimization by Domo Engineering\nVariable is added as a dataset column\nVariables exist at a Global Scope across Domo and a Card Scope\nThe GRANT does not prevent users from altering variables\n\n\nQuestions from Oct CAB\nVariables for WHAT-IF Analysis\n\nPreviously would have to CROSS JOIN a webform to add a column to the dataset\nSave Variable / Dataset\nTO EXPLORE - column switching\nCASE WHEN VARIABLE = ‘value’ THEN  END\nVariables for switching EXCHANGE RATE\nCASE WHEN VARIABLE = ‘USD’ then  END\nVariables + Publish?\nVariables + Smart Text?\nGrants for separating Global vs. Personal variables?\nImpact when data changes with large datasets?\nWHY IS THERE NO KB?? - because it’s not in GA :)\nBECAUSE THEY DON’T CARE ABOUT DOCUMENTATION - true"
  },
  {
    "objectID": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html",
    "href": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html",
    "title": "DomoPalooza 24 - Intro to Jupyter Workspaces",
    "section": "",
    "text": "Presented by Jae Wilson and Riley Stahura @ Domopalooza 24\n\n\nDomo Data Specialists with Intermediate to advanced Python coding experience\n\n\n\n\nWorking with DataSets in Domo\nTransforming Data in Domo\n\nYou can enroll in these courses at any time though Domo University.\n\n\n\nJupyter Workspaces in Domo is a web-based interactive development environment for Jupyter notebooks, code, and data. In this course, you’ll learn how to integrate Jupyter into your Domo data connection and transformation pipeline.\n\n\n\n\nUpon completing this course learners should be able to:\n\nCreate and run a Jupyter Workspace DataFlow in Domo\nIntegrate input and output DataSets with Jupyter Workspaces\nCreate accounts in Domo for secure programmatic credential access\nSetup scheduling/triggering for Jupyter Workspaces DataFlows\n\n\n\n\n\n\n\nIntroduction\n\nJupyter and Domo\nWhere is Jupyter located in Domo?\n\nJupyter Workspaces Setup\n\nCreating a new Workspace\n▶️ Spin up a Workspace\n▶️ Clone GitHub repo \nWorkspace Configuration\nOptional Configuration Steps\n\nInput Datasets\nOutput Datasets\nAccounts\nFile Share\n\n\n\n\n\n\nAPI request basics\ntoken-based authentication\nnetwork monitoring for API discovery\n\n\n\n\n\nChanging Ownership\nEnabling Sharing and Sharing a Workspace \n▶️ Create a “DomoAccessToken” and “Abstract Credentials Store” account containing userame & password. Share w. JupyerWorkspace\n▶️ Add an Output Dataset - “AccountList” to JupyterWorkspace \nCreating a Jupyter Notebook\nLeft-hand navigation - Files, Input/Output Datasets, Accounts\nDomo Jupyter Library\n\nReading and Writing to a Dataset\nGetting Account Credentials\n\n\n\n\n\n\nRead Account Objects in Jupyter Workspaces\nExport a dataframe to a Domo Dataset\n\n\n\n\n\n\n\n\nTrigger from Dataset\nTrigger on Schedule\n\n\n\n\n\nGet Accounts from DomoAccounts and format as a dataset\nMerging API requests in a dataset\n\n\n\n\n\nupdate an object in Domo\n\n\n\n\n\nCommon Use Cases\nQ&A\nQuiz"
  },
  {
    "objectID": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#learning-objectives",
    "href": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#learning-objectives",
    "title": "DomoPalooza 24 - Intro to Jupyter Workspaces",
    "section": "",
    "text": "Upon completing this course learners should be able to:\n\nCreate and run a Jupyter Workspace DataFlow in Domo\nIntegrate input and output DataSets with Jupyter Workspaces\nCreate accounts in Domo for secure programmatic credential access\nSetup scheduling/triggering for Jupyter Workspaces DataFlows"
  },
  {
    "objectID": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#agenda",
    "href": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#agenda",
    "title": "DomoPalooza 24 - Intro to Jupyter Workspaces",
    "section": "",
    "text": "Introduction\n\nJupyter and Domo\nWhere is Jupyter located in Domo?\n\nJupyter Workspaces Setup\n\nCreating a new Workspace\n▶️ Spin up a Workspace\n▶️ Clone GitHub repo \nWorkspace Configuration\nOptional Configuration Steps\n\nInput Datasets\nOutput Datasets\nAccounts\nFile Share\n\n\n\n\n\n\nAPI request basics\ntoken-based authentication\nnetwork monitoring for API discovery\n\n\n\n\n\nChanging Ownership\nEnabling Sharing and Sharing a Workspace \n▶️ Create a “DomoAccessToken” and “Abstract Credentials Store” account containing userame & password. Share w. JupyerWorkspace\n▶️ Add an Output Dataset - “AccountList” to JupyterWorkspace \nCreating a Jupyter Notebook\nLeft-hand navigation - Files, Input/Output Datasets, Accounts\nDomo Jupyter Library\n\nReading and Writing to a Dataset\nGetting Account Credentials\n\n\n\n\n\n\nRead Account Objects in Jupyter Workspaces\nExport a dataframe to a Domo Dataset"
  },
  {
    "objectID": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#break",
    "href": "blog/posts/2024-03-23_domopalooza24/dp24_intro_to_jupyter.html#break",
    "title": "DomoPalooza 24 - Intro to Jupyter Workspaces",
    "section": "",
    "text": "Trigger from Dataset\nTrigger on Schedule\n\n\n\n\n\nGet Accounts from DomoAccounts and format as a dataset\nMerging API requests in a dataset\n\n\n\n\n\nupdate an object in Domo\n\n\n\n\n\nCommon Use Cases\nQ&A\nQuiz"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "nbdev Blog",
    "section": "",
    "text": "Creating and UPSERTing custom roles with DomoLibrary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomoPalooza 24 - Intro to Jupyter Workspaces\n\n\n\n\n\n\nPython\n\n\nDomoJupyter\n\n\nDomopalooza\n\n\n\n\n\n\n\n\n\nMar 23, 2024\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial Update Users\n\n\n\n\n\n\nPython\n\n\nDomoJupyter\n\n\nDomoUser\n\n\n\n\n\n\n\n\n\nJan 2, 2024\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial Delete Duplicate Groups with Python\n\n\n\n\n\n\nPython\n\n\nDomoJupyter\n\n\nDomoGroup\n\n\n\n\n\n\n\n\n\nDec 18, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial - Generate a DomoStats dataset using DomoLibrary\n\n\n\n\n\n\nDomoStats\n\n\nMagicETL\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial - Generate a DomoStats dataset using DomoLibrary\n\n\n\n\n\n\nDomoStats\n\n\nMagicETL\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial - Generate a DomoStats dataset using DomoLibrary\n\n\n\n\n\n\nDomoStats\n\n\nMagicETL\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nQuery Domo Jupyter with Python\n\n\n\n\n\n\nPython\n\n\nDomoJupyter\n\n\n\n\n\n\n\n\n\nSep 13, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nAutomated Card Backup\n\n\n\n\n\n\nBackup\n\n\nCards\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nAutomated Tagging\n\n\n\n\n\n\nTagging\n\n\nGovernance\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial - Generate your Features list from the Bootstrap API\n\n\n\n\n\n\nInstance Configuration\n\n\nDomo Features\n\n\n\n\n\n\n\n\n\nFeb 2, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial - Extract SQL from a Dataflow\n\n\n\n\n\n\nInstance Configuration\n\n\nDataflow\n\n\n\n\n\n\n\n\n\nFeb 2, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nDomo Distribution and Governance Strategy across Instances\n\n\n\n\n\n\nDomo Everywhere\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nDomo Onboarding\n\n\n\n\n\n\nnew user\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\n\n\n\n\n\n\nDomo Variables\n\n\n\n\n\n\nVariables\n\n\n\n\n\n\n\n\n\nJan 24, 2023\n\n\nJae Wilson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "routes/role.html",
    "href": "routes/role.html",
    "title": "Role Routes",
    "section": "",
    "text": "Get and Search Routes\n\nsource\n\nRole_CRUD_Error\n\n Role_CRUD_Error (domo_instance, function_name, status, message,\n                  role_id=None, parent_class=None)\n\nbase exception\n\nsource\n\n\nRole_NotRetrieved\n\n Role_NotRetrieved (domo_instance, function_name, status, message,\n                    role_id=None, parent_class=None)\n\nbase exception\n\nsource\n\n\nget_roles\n\n get_roles (auth:domolibrary.client.DomoAuth.DomoAuth,\n            session:httpx.AsyncClient=None, debug_api:bool=False,\n            debug_num_stacks_to_drop:int=1, parent_class:str=None)\n\n\nsample implementation of get_roles\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_roles(auth=token_auth)\n\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n\n\n\n\nid\nname\ndescription\nauthorityCount\nuserCount\ncreated\nmodified\n\n\n\n\n0\n1\nAdmin\nFull access to everything\n83\n19\n1580425515000\n1580425515000\n\n\n1\n2\nPrivileged\nFull access except for editing users and setti...\n34\n628\n1580425515000\n1580425515000\n\n\n2\n3\nEditor\nCan edit Cards, Pages, DataSets, and Dataflows\n30\n1\n1580425515000\n1580425515000\n\n\n3\n4\nParticipant\nRead only access to Cards and Pages\n6\n4\n1580425515000\n1580425515000\n\n\n4\n5\nSocial\nAccess limited to social features\n1\n16\n1580425515000\n1580425515000\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nget_role_by_id\n\n get_role_by_id (auth:domolibrary.client.DomoAuth.DomoAuth, role_id:str,\n                 session:httpx.AsyncClient=None, debug_api:bool=False,\n                 debug_num_stacks_to_drop=1, parent_class:str=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_role_by_id(auth=token_auth, role_id=1)\n\nResponseGetData(status=200, response={'id': 1, 'name': 'Admin', 'description': 'Full access to everything', 'authorityCount': 83, 'userCount': 19, 'created': 1580425515000, 'modified': 1580425515000}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\nget_role_grants\n\n get_role_grants (auth:domolibrary.client.DomoAuth.DomoAuth, role_id:str,\n                  session:httpx.AsyncClient=None, debug_api:bool=False,\n                  debug_num_stacks_to_drop=1, parent_class:str=None)\n\n\nsample implementation of get_role_grants\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_role_grants(auth=token_auth, role_id=1)\n\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\nversions.deployment.manage\n\n\n1\nai.model.create\n\n\n2\nbuzz.admin\n\n\n3\ndataflow.admin\n\n\n4\ngoal.admin\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nget_role_membership\n\n get_role_membership (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      role_id:str, session:httpx.AsyncClient=None,\n                      return_raw:bool=False, debug_api:bool=False,\n                      debug_num_stacks_to_drop:int=1,\n                      parent_class:str=None)\n\n\nsample implementation of get_role_membership\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_role_membership(auth=token_auth, role_id=1, return_raw=False)\n\npd.DataFrame(res.response[0:5])\n\n\n\n\n\n\n\n\n\nuserId\nemail\ndisplayName\nroleId\ndepartment\njobTitle\nhireDate\nlocation\n\n\n\n\n0\n1345408759\nDataMaven42@gmail.com\nAlexis Lorenz (DataMaven)\n1\nOwner\nMajor Domo Support Specialist\n1.590156e+12\nNaN\n\n\n1\n1102391116\nandrea.henderson@domo.com\nAndrea Henderson\n1\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1095515127\nandrew@crystalballers.ai\nAndrew Chaffin\n1\nCrystal Ballers\nCofounder\nNaN\n\n\n\n3\n1865099622\nBen.Schein@domo.com\nBen Schein\n1\nNaN\nNaN\nNaN\nNaN\n\n\n4\n587894148\nbryan@bvankampen.net\nBryan Van Kampen\n1\nBT Partners\nExecutive Analytics\n1.588828e+12\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\nCRUD Routes\n\nsource\n\ncreate_role\n\n create_role (auth:domolibrary.client.DomoAuth.DomoAuth, name:str,\n              description:str, session:httpx.AsyncClient=None,\n              debug_api:bool=False, debug_num_stacks_to_drop:int=1,\n              parent_class:str=None)\n\n\nsource\n\n\ndelete_role\n\n delete_role (auth:domolibrary.client.DomoAuth.DomoAuth, role_id:int,\n              session:httpx.AsyncClient=None, debug_api:bool=False,\n              debug_num_stacks_to_drop:int=1, parent_class:str=None)\n\n\nsample implementation of delete_role\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait delete_role(auth=token_auth, role_id=\"2014090557\")\n\nResponseGetData(status=204, response=\"role 2014090557 deleted or doesn't exist\", is_success=True, parent_class=None)\n\n\n\n\n\nDefault Role\n\nsource\n\n\nget_default_role\n\n get_default_role (auth, session:httpx.AsyncClient=None,\n                   debug_api:bool=False, debug_num_stacks_to_drop:int=1,\n                   parent_class:str=None)\n\n\nsample implementation of get_default_role\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_default_role(token_auth)\n\nResponseGetData(status=200, response='2', is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nset_default_role\n\n set_default_role (auth:domolibrary.client.DomoAuth.DomoAuth, role_id:str,\n                   session:httpx.AsyncClient=None, debug_api:bool=False,\n                   debug_num_stacks_to_drop:int=1, parent_class=None)\n\n\n\nMetadata\n\nsource\n\n\nupdate_role_metadata\n\n update_role_metadata (auth:domolibrary.client.DomoAuth.DomoAuth, role_id,\n                       role_name, role_description:str=None,\n                       session:httpx.AsyncClient=None,\n                       debug_api:bool=False,\n                       debug_num_stacks_to_drop:int=1,\n                       parent_class:str=None)\n\n\nsample update_role_metadata\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# get role to update\nrole_ls = await get_roles(auth=token_auth)\nrole = next(\n    (role for role in role_ls.response if role.get(\"name\") == \"super_admin\"), None\n)\n\n\n# update role\nawait update_role_metadata(\n    auth=token_auth,\n    role_id=role[\"id\"],\n    role_name=role[\"name\"],\n    role_description=f\"last updated - {dt.date.today()}\",\n)\n\n# validate role has been updated\nrole_ls = await get_roles(auth=token_auth)\nrole = next(\n    (role for role in role_ls.response if role.get(\"name\") == \"super_admin\"), None\n)\n\nrole\n\n{'id': 810756122,\n 'name': 'super_admin',\n 'description': 'last updated - 2023-12-08',\n 'authorityCount': 90,\n 'userCount': 3,\n 'created': 1678842530000,\n 'modified': 1702046774000}\n\n\n\nsource\n\n\n\nset_role_grants\n\n set_role_grants (auth:domolibrary.client.DomoAuth.DomoAuth, role_id:str,\n                  role_grant_ls:list[str], session:httpx.AsyncClient=None,\n                  debug_api:bool=False, debug_num_stacks_to_drop:int=1,\n                  parent_class:str=None)\n\n\nsource\n\n\nrole_membership_add_users\n\n role_membership_add_users (auth:domolibrary.client.DomoAuth.DomoAuth,\n                            role_id:str, user_list:list[str],\n                            session:httpx.AsyncClient=None,\n                            debug_api:bool=False,\n                            debug_num_stacks_to_drop:int=1,\n                            parent_class:str=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Role Routes"
    ]
  },
  {
    "objectID": "routes/dataflow.html",
    "href": "routes/dataflow.html",
    "title": "Dataflow Routes",
    "section": "",
    "text": "source\n\nget_dataflow_by_id\n\n get_dataflow_by_id (dataflow_id:int,\n                     auth:domolibrary.client.DomoAuth.DomoAuth,\n                     debug_api:bool=False, session:httpx.AsyncClient=None,\n                     parent_class:str=None, debug_num_stacks_to_drop=1)\n\n\nSample implementation of get_dataflow_by_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_dataflow_by_id(dataflow_id=70, auth=token_auth)\n\nres.response.keys()\n\nall_keys = []\nfor action in res.response.get(\"actions\"):\n    pprint(action)\n\nlist(set(all_keys))\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'dataSourceId': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n 'executeFlowWhenUpdated': False,\n 'gui': {'color': None,\n         'colorSource': None,\n         'sampleJson': None,\n         'x': None,\n         'y': None},\n 'id': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n 'onlyLoadNewVersions': False,\n 'pseudoDataSource': False,\n 'targetTableName': 'domostats_people',\n 'truncateRows': False,\n 'truncateTextColumns': False,\n 'type': 'LoadFromVault'}\n{'dependsOn': ['241025d7-3cca-4369-b7c0-b3264277c0e1'],\n 'gui': {'color': None,\n         'colorSource': None,\n         'sampleJson': None,\n         'x': None,\n         'y': None},\n 'id': 'c176aa53-122a-4a2e-8b6f-41ca4a72d67c',\n 'selectStatement': 'SELECT\\n'\n                    '`Display Name`,\\n'\n                    '`User ID`\\n'\n                    ', @row := @row+1 as id\\n'\n                    ', @isReset := case when @iter = @rowCounter then 1 else 0 '\n                    'end isReset\\n'\n                    ', @group := @isReset + @group   as rowGroup\\n'\n                    ', @iter := case when @isReset = 1 then 1 else @iter + 1 '\n                    'end iter\\n'\n                    ', @rowCounter := case when @isReset = 1 then FLOOR( '\n                    'RAND() * (7-3) + 3) else @rowCounter end numChildren\\n'\n                    '\\n'\n                    '\\n'\n                    'from `domostats_people` p\\n'\n                    '\\n'\n                    ', (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset '\n                    ':= 0 , @group := 0) r',\n 'tableName': 't_1',\n 'type': 'GenerateTableAction'}\n{'dependsOn': ['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'],\n 'gui': {'color': None,\n         'colorSource': None,\n         'sampleJson': None,\n         'x': None,\n         'y': None},\n 'id': 'ac9f630d-d865-4925-b955-4316e227229a',\n 'selectStatement': '\\n'\n                    \"select  b.`User ID` as userID , 'reportsTo' as Action , \"\n                    'a.`User ID` as bodyID\\n'\n                    '\\n'\n                    'from t_1 a \\n'\n                    '\\n'\n                    'join t_1 b \\n'\n                    '\\n'\n                    'on a.id = b.`rowGroup`\\n'\n                    'where a.`User ID` &lt;&gt; b.`User ID`\\n'\n                    '\\n'\n                    'UNION\\n'\n                    '\\n'\n                    \"select  b.`User ID` as userID , 'directReports' as Action \"\n                    ', a.`User ID` as bodyID\\n'\n                    '\\n'\n                    'from t_1 a \\n'\n                    '\\n'\n                    'join t_1 b \\n'\n                    '\\n'\n                    'on b.id = a.`rowGroup`\\n'\n                    '\\n'\n                    'where a.`User ID` &lt;&gt; b.`User ID`\\n'\n                    '\\n',\n 'tableName': 'reportsto',\n 'type': 'GenerateTableAction'}\n{'dataSource': {'guid': 'd9257748-c181-496e-8f9a-016ee99b4a14',\n                'name': 'domoStats_people_reports',\n                'type': 'DataFlow'},\n 'dependsOn': ['ac9f630d-d865-4925-b955-4316e227229a'],\n 'gui': {'color': None,\n         'colorSource': None,\n         'sampleJson': None,\n         'x': None,\n         'y': None},\n 'id': '8edc3d78-3586-47a8-9775-c7b146a50d19',\n 'partitioned': False,\n 'query': 'select * from `reportsto`',\n 'schemaSource': 'DATAFLOW',\n 'type': 'PublishToVault',\n 'versionChainType': 'REPLACE'}\n\n\n[]\n\n\n\n\n\nDataflow History\n\nsource\n\nget_dataflow_versions\n\n get_dataflow_versions (dataflow_id:int,\n                        auth:domolibrary.client.DomoAuth.DomoAuth,\n                        parent_class:str=None,\n                        session:httpx.AsyncClient=None,\n                        debug_num_stacks_to_drop=1, debug_api:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_dataflow_versions(dataflow_id=70, auth=token_auth)\nres.response[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[{'id': 262,\n  'onboardFlowId': 70,\n  'timeStamp': 1634058358000,\n  'authorId': 1893952720,\n  'numInputs': 1,\n  'numOutputs': 1,\n  'executionCount': 565,\n  'executionSuccessCount': 565,\n  'versionNumber': 3},\n {'id': 261,\n  'onboardFlowId': 70,\n  'timeStamp': 1634058338000,\n  'authorId': 1893952720,\n  'numInputs': 1,\n  'numOutputs': 1,\n  'executionCount': 0,\n  'executionSuccessCount': 0,\n  'versionNumber': 2},\n {'id': 260,\n  'onboardFlowId': 70,\n  'timeStamp': 1634058178000,\n  'authorId': 1893952720,\n  'numInputs': 1,\n  'numOutputs': 1,\n  'executionCount': 0,\n  'executionSuccessCount': 0,\n  'versionNumber': 1}]\n\n\n\nsource\n\n\nget_dataflow_by_id_and_version\n\n get_dataflow_by_id_and_version (dataflow_id:int, version_id:int,\n                                 auth:domolibrary.client.DomoAuth.DomoAuth\n                                 , parent_class:str=None,\n                                 session:httpx.AsyncClient=None,\n                                 debug_num_stacks_to_drop=1,\n                                 debug_api:bool=False)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_dataflow_by_id_and_version(\n    dataflow_id=70, version_id=262, auth=token_auth, debug_api=False\n)\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'authorId': 1893952720,\n 'dataFlow': {'abandoned': False,\n              'actions': [{'dataSourceId': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n                           'executeFlowWhenUpdated': False,\n                           'gui': {'color': None,\n                                   'colorSource': None,\n                                   'sampleJson': None,\n                                   'x': None,\n                                   'y': None},\n                           'id': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n                           'onlyLoadNewVersions': False,\n                           'pseudoDataSource': False,\n                           'targetTableName': 'domostats_people',\n                           'truncateRows': False,\n                           'truncateTextColumns': False,\n                           'type': 'LoadFromVault'},\n                          {'dependsOn': ['241025d7-3cca-4369-b7c0-b3264277c0e1'],\n                           'gui': {'color': None,\n                                   'colorSource': None,\n                                   'sampleJson': None,\n                                   'x': None,\n                                   'y': None},\n                           'id': 'c176aa53-122a-4a2e-8b6f-41ca4a72d67c',\n                           'selectStatement': 'SELECT\\n'\n                                              '`Display Name`,\\n'\n                                              '`User ID`\\n'\n                                              ', @row := @row+1 as id\\n'\n                                              ', @isReset := case when @iter = '\n                                              '@rowCounter then 1 else 0 end '\n                                              'isReset\\n'\n                                              ', @group := @isReset + @group   '\n                                              'as rowGroup\\n'\n                                              ', @iter := case when @isReset = '\n                                              '1 then 1 else @iter + 1 end '\n                                              'iter\\n'\n                                              ', @rowCounter := case when '\n                                              '@isReset = 1 then FLOOR( RAND() '\n                                              '* (7-3) + 3) else @rowCounter '\n                                              'end numChildren\\n'\n                                              '\\n'\n                                              '\\n'\n                                              'from `domostats_people` p\\n'\n                                              '\\n'\n                                              ', (select @row:= '\n                                              '0,@rowCounter:= 1, @iter := 1, '\n                                              '@isReset := 0 , @group := 0) r',\n                           'tableName': 't_1',\n                           'type': 'GenerateTableAction'},\n                          {'dependsOn': ['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'],\n                           'gui': {'color': None,\n                                   'colorSource': None,\n                                   'sampleJson': None,\n                                   'x': None,\n                                   'y': None},\n                           'id': 'ac9f630d-d865-4925-b955-4316e227229a',\n                           'selectStatement': '\\n'\n                                              'select  b.`User ID` as userID , '\n                                              \"'reportsTo' as Action , a.`User \"\n                                              'ID` as bodyID\\n'\n                                              '\\n'\n                                              'from t_1 a \\n'\n                                              '\\n'\n                                              'join t_1 b \\n'\n                                              '\\n'\n                                              'on a.id = b.`rowGroup`\\n'\n                                              'where a.`User ID` &lt;&gt; b.`User '\n                                              'ID`\\n'\n                                              '\\n'\n                                              'UNION\\n'\n                                              '\\n'\n                                              'select  b.`User ID` as userID , '\n                                              \"'directReports' as Action , \"\n                                              'a.`User ID` as bodyID\\n'\n                                              '\\n'\n                                              'from t_1 a \\n'\n                                              '\\n'\n                                              'join t_1 b \\n'\n                                              '\\n'\n                                              'on b.id = a.`rowGroup`\\n'\n                                              '\\n'\n                                              'where a.`User ID` &lt;&gt; b.`User '\n                                              'ID`\\n'\n                                              '\\n',\n                           'tableName': 'reportsto',\n                           'type': 'GenerateTableAction'},\n                          {'dataSource': {'guid': 'd9257748-c181-496e-8f9a-016ee99b4a14',\n                                          'name': 'domoStats_people_reports',\n                                          'type': 'DataFlow'},\n                           'dependsOn': ['ac9f630d-d865-4925-b955-4316e227229a'],\n                           'gui': {'color': None,\n                                   'colorSource': None,\n                                   'sampleJson': None,\n                                   'x': None,\n                                   'y': None},\n                           'id': '8edc3d78-3586-47a8-9775-c7b146a50d19',\n                           'partitioned': False,\n                           'query': 'select * from `reportsto`',\n                           'schemaSource': 'DATAFLOW',\n                           'type': 'PublishToVault',\n                           'versionChainType': 'REPLACE'}],\n              'container': False,\n              'created': 1634058177000,\n              'dapDataFlowId': '628e6333-586e-461b-bce3-eb8e4262a4d2',\n              'databaseType': 'MYSQL',\n              'deleted': False,\n              'draft': False,\n              'editable': True,\n              'enabled': True,\n              'engineProperties': {'mysql.mode': 'DEFAULT'},\n              'executionCount': 0,\n              'executionSuccessCount': 0,\n              'hydrationState': 'DEHYDRATED',\n              'id': 70,\n              'inputs': [{'dataSourceId': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n                          'executeFlowWhenUpdated': False,\n                          'onboardFlowId': 70,\n                          'onlyLoadNewVersions': False}],\n              'lastExecution': {'dapDataFlowExecutionId': '61874514-a866-477c-a641-68813bfb319e',\n                                'dataFlowVersion': 0,\n                                'id': 97703,\n                                'lastUpdated': 1634058339000,\n                                'onboardFlowId': 70,\n                                'previewRows': 0,\n                                'state': 'CREATED'},\n              'magic': False,\n              'modified': 1634058357196,\n              'name': 'DomoStats - people - reports',\n              'neverAbandon': False,\n              'numInputs': 1,\n              'numOutputs': 1,\n              'onboardFlowVersion': {'executionCount': 0,\n                                     'executionSuccessCount': 0,\n                                     'id': 0,\n                                     'numInputs': 0,\n                                     'numOutputs': 0,\n                                     'onboardFlowId': 70,\n                                     'versionNumber': 0},\n              'outputs': [{'dataSourceId': 'd9257748-c181-496e-8f9a-016ee99b4a14',\n                           'dataSourceName': None,\n                           'onboardFlowId': 70,\n                           'versionChainType': 'REPLACE'}],\n              'passwordProtected': False,\n              'paused': False,\n              'responsibleUserId': 1893952720,\n              'restricted': False,\n              'runState': 'ENABLED',\n              'settings': {},\n              'subsetProcessing': False,\n              'triggeredByInput': False,\n              'useLegacyTriggerBehavior': False},\n 'executionCount': 565,\n 'executionSuccessCount': 565,\n 'id': 262,\n 'numInputs': 1,\n 'numOutputs': 1,\n 'onboardFlowId': 70,\n 'timeStamp': 1634058358000,\n 'versionNumber': 3}\n\n\n\nsource\n\n\nget_dataflow_execution_history\n\n get_dataflow_execution_history (dataflow_id:int,\n                                 auth:domolibrary.client.DomoAuth.DomoAuth\n                                 , maximum:int=None,\n                                 parent_class:str=None,\n                                 session:httpx.AsyncClient=None,\n                                 debug_num_stacks_to_drop=1,\n                                 debug_loop:bool=False,\n                                 debug_api:bool=False)\n\n\nsample implementation of get_dataflow_execution_history\n\n# import pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_dataflow_execution_history(dataflow_id=70, maximum=2, auth=token_auth)\n\nprint(len(res.response))\n\nres.response[0]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n2\n\n\n{'id': 497904,\n 'onboardFlowId': 70,\n 'previewRows': 0,\n 'dapDataFlowExecutionId': 'd5042f0f-a72a-49cc-9340-301bf077ac01',\n 'beginTime': 1711214423000,\n 'lastUpdated': 1711214446000,\n 'state': 'RUNNING_DATA_FLOW',\n 'activationType': 'MANUAL',\n 'dataProcessor': 'MYSQL',\n 'dataFlowVersion': 262}\n\n\n\nsource\n\n\n\nget_dataflow_execution_by_id\n\n get_dataflow_execution_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                               dataflow_id:int, execution_id:int,\n                               debug_api:bool=False,\n                               debug_num_stacks_to_drop=1,\n                               parent_class:str=None,\n                               session:httpx.AsyncClient=None)\n\n\nsample implementation of get_dataflow_execution_by_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_dataflow_execution_by_id(\n    dataflow_id=70, execution_id=433238, auth=token_auth\n)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'id': 433238,\n 'onboardFlowId': 70,\n 'previewRows': 0,\n 'dapDataFlowExecutionId': '88e96b86-0dcd-4a84-a946-bcb22224ea2f',\n 'beginTime': 1701756991000,\n 'endTime': 1701757024000,\n 'lastUpdated': 1701757024000,\n 'failed': False,\n 'state': 'SUCCESS',\n 'activationType': 'MANUAL',\n 'executionEngine': {'platform': 'K8S', 'engine': 'MYSQL_SQL_ENGINE'},\n 'actionResults': [{'actionId': '8edc3d78-3586-47a8-9775-c7b146a50d19',\n   'type': 'PublishToVault',\n   'wasSuccessful': True,\n   'beginTime': 1701757021487,\n   'endTime': 1701757022754,\n   'rowsProcessed': 1816},\n  {'actionId': 'c176aa53-122a-4a2e-8b6f-41ca4a72d67c',\n   'type': 'GenerateTableAction',\n   'wasSuccessful': True,\n   'beginTime': 1701757020983,\n   'endTime': 1701757021100,\n   'rowsProcessed': 909},\n  {'actionId': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n   'type': 'DataHubManifestLoaderAction',\n   'wasSuccessful': True,\n   'beginTime': 1701757015894,\n   'endTime': 1701757020972,\n   'rowsProcessed': 909},\n  {'actionId': 'ac9f630d-d865-4925-b955-4316e227229a',\n   'type': 'GenerateTableAction',\n   'wasSuccessful': True,\n   'beginTime': 1701757021100,\n   'endTime': 1701757021487,\n   'rowsProcessed': 1816}],\n 'dataProcessor': 'MYSQL',\n 'inputDataSources': [{'dataSourceId': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n   'dataVersionId': 1306,\n   'rowsRead': 909,\n   'bytesRead': 291266,\n   'downloadTime': 5078,\n   'onlyLoadNewVersions': False}],\n 'outputDataSources': [{'dataSourceId': 'd9257748-c181-496e-8f9a-016ee99b4a14',\n   'dataVersionId': 495,\n   'rowsWritten': 1816,\n   'bytesWritten': 97986,\n   'partsProcessed': None,\n   'versionChainType': None}],\n 'totalBytesWritten': 97986,\n 'dataFlowVersion': 262,\n 'totalRowsRead': 909,\n 'totalBytesRead': 291266,\n 'meanDownloadRateKbps': 56.014071115596686,\n 'totalRowsWritten': 1816}\n\n\n\nsource\n\n\n\nexecute_dataflow\n\n execute_dataflow (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   dataflow_id:int, debug_api:bool=False,\n                   debug_num_stacks_to_drop=1, parent_class:str=None,\n                   session:httpx.AsyncClient=None)\n\n\nsample execute_dataflow\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait execute_dataflow(dataflow_id=70, auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': 497905, 'onboardFlowId': 70, 'previewRows': 0, 'dapDataFlowExecutionId': 'dae127f7-e7b8-4b9c-a36f-7b6c9a71b605', 'beginTime': 1711214454197, 'lastUpdated': 1711214454732, 'state': 'CREATED', 'activationType': 'MANUAL', 'executionEngine': {'platform': 'K8S', 'engine': 'MYSQL_SQL_ENGINE'}, 'dataProcessor': 'MYSQL', 'dataFlowVersion': 262}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Dataflow Routes"
    ]
  },
  {
    "objectID": "routes/sandbox.html",
    "href": "routes/sandbox.html",
    "title": "Sandbox Routes",
    "section": "",
    "text": "source\n\nget_is_allow_same_instance_promotion_enabled\n\n get_is_allow_same_instance_promotion_enabled\n                                               (auth:domolibrary.client.Do\n                                               moAuth.DomoAuth, session:ht\n                                               tpx.AsyncClient=None,\n                                               return_raw:bool=False, debu\n                                               g_num_stacks_to_drop:int=1,\n                                               debug_api:bool=False,\n                                               parent_class:str=None)\n\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait get_is_allow_same_instance_promotion_enabled(auth=token_auth, debug_api=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'name': 'allow_same_instance_promotion', 'is_enabled': True}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\ntoggle_allow_same_instance_promotion\n\n toggle_allow_same_instance_promotion (is_enabled:bool,\n                                       auth:domolibrary.client.DomoAuth.Do\n                                       moAuth,\n                                       session:httpx.AsyncClient=None,\n                                       debug_num_stacks_to_drop:int=1,\n                                       debug_api:bool=False,\n                                       parent_class:str=None)\n\n\nsource\n\n\nSandbox_ToggleSameInstancePromotion_Error\n\n Sandbox_ToggleSameInstancePromotion_Error (domo_instance, message,\n                                            status, parent_class=None,\n                                            function_name=None)\n\nbase exception\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait toggle_allow_same_instance_promotion(\n    is_enabled=True, auth=token_auth, debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'allowSelfPromotion': True, 'requireApprovals': False, 'domain': 'domo-community.domo.com'}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\nget_shared_repos\n\n get_shared_repos (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   session:httpx.AsyncClient=None, parent_class:str=None,\n                   debug_api:bool=False,\n                   debug_num_stacks_to_drop:bool=False)\n\nSample of getting shared repos\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nres = await get_shared_repos(auth=token_auth)\n\nfrom pprint import pprint\n\npprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n{'pageContext': {'count': 3, 'offSet': 0, 'totalCount': 3},\n 'repositories': [{'accessCount': 1,\n                   'created': '2023-06-15T21:09:00.244Z',\n                   'domain': 'domo-community.domo.com',\n                   'id': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n                   'lastCommit': {'commitName': 'v2',\n                                  'completed': '2023-06-15T21:17:17.188Z',\n                                  'hidden': False,\n                                  'id': 'bc2b2d41-f1b8-4eb8-93f6-ecdf3074c00a',\n                                  'pusherEventId': 'a900d3bb-595a-4f1e-b61f-5cbd9a19b841',\n                                  'repositoryId': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n                                  'started': '2023-06-15T21:17:16.334Z',\n                                  'status': 'COMPLETED',\n                                  'summary': 'uat accepted jira 1234'},\n                   'name': 'Landing Page_PROD',\n                   'permission': 'OWNER',\n                   'repositoryContent': {'cardIds': [],\n                                         'dataflowIds': [226],\n                                         'pageIds': [],\n                                         'streamIds': [],\n                                         'viewIds': []},\n                   'seeded': False,\n                   'type': 'dataflow',\n                   'updated': '2023-06-15T21:09:00.244Z',\n                   'userId': 1893952720},\n                  {'accessCount': 1,\n                   'created': '2023-06-15T21:11:39.941Z',\n                   'domain': 'domo-community.domo.com',\n                   'id': 'bc9b553c-ea02-4fce-ba63-2a4a63b455ef',\n                   'lastCommit': {'commitName': 'v2',\n                                  'completed': '2023-06-15T21:15:56.382Z',\n                                  'hidden': False,\n                                  'id': '7823a38c-55f6-4df8-a068-0ee892e18127',\n                                  'pusherEventId': '7e0665fe-d606-48a9-ab82-a967d4e5c113',\n                                  'repositoryId': 'bc9b553c-ea02-4fce-ba63-2a4a63b455ef',\n                                  'started': '2023-06-15T21:15:55.487Z',\n                                  'status': 'COMPLETED',\n                                  'summary': 'implemented JIRA 1234'},\n                   'name': 'Landing Page_QA',\n                   'permission': 'OWNER',\n                   'repositoryContent': {'cardIds': [],\n                                         'dataflowIds': [226],\n                                         'pageIds': [],\n                                         'streamIds': [],\n                                         'viewIds': []},\n                   'seeded': False,\n                   'type': 'dataflow',\n                   'updated': '2023-06-15T21:11:39.941Z',\n                   'userId': 1893952720},\n                  {'accessCount': 2,\n                   'created': '2022-11-30T22:58:54.099Z',\n                   'domain': 'domo-community.domo.com',\n                   'id': '0c6fd62b-6c27-4397-b487-55d4e0179d69',\n                   'lastCommit': {'commitName': 'v2',\n                                  'completed': '2022-12-01T15:56:21.190Z',\n                                  'hidden': False,\n                                  'id': '55cc1ea3-43e5-4e17-a450-87030287287d',\n                                  'pusherEventId': 'aa4bd37b-f4b4-46b1-95ae-04794182eed8',\n                                  'repositoryId': '0c6fd62b-6c27-4397-b487-55d4e0179d69',\n                                  'started': '2022-12-01T15:55:30.281Z',\n                                  'status': 'COMPLETED',\n                                  'summary': 'Sharing with EMEA'},\n                   'name': 'Domo Variables Use Cases',\n                   'permission': 'OWNER',\n                   'repositoryContent': {'cardIds': [],\n                                         'dataflowIds': [],\n                                         'pageIds': [1880852133],\n                                         'streamIds': [],\n                                         'viewIds': []},\n                   'seeded': False,\n                   'type': 'page',\n                   'updated': '2022-11-30T22:58:54.099Z',\n                   'userId': 805381129}]}\n\n\n\nsource\n\n\nget_repo_from_id\n\n get_repo_from_id (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                   repository_id:str, debug_api:bool=False,\n                   debug_num_stacks_to_drop:int=1, parent_class:str=None,\n                   session:httpx.AsyncClient=None)\n\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nres = await get_shared_repos(auth=token_auth)\n\nres = await get_repo_from_id(\n    auth=token_auth, repository_id=res.response[\"repositories\"][0][\"id\"]\n)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'id': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n 'domain': 'domo-community.domo.com',\n 'name': 'Landing Page_PROD',\n 'accessCount': 1,\n 'type': 'dataflow',\n 'repositoryContent': {'pageIds': [],\n  'viewIds': [],\n  'dataflowIds': [226],\n  'streamIds': [],\n  'cardIds': []},\n 'userId': 1893952720,\n 'created': '2023-06-15T21:09:00.244Z',\n 'updated': '2023-06-15T21:09:00.244Z',\n 'seeded': False,\n 'lastCommit': {'id': 'bc2b2d41-f1b8-4eb8-93f6-ecdf3074c00a',\n  'repositoryId': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n  'commitName': 'v2',\n  'hidden': False,\n  'summary': 'uat accepted jira 1234',\n  'started': '2023-06-15T21:17:16.334Z',\n  'completed': '2023-06-15T21:17:17.188Z',\n  'status': 'COMPLETED',\n  'pusherEventId': 'a900d3bb-595a-4f1e-b61f-5cbd9a19b841'},\n 'deployments': [{'id': 'fda423b7-c53a-4426-a52d-77f8d9a3ff4b',\n   'repositoryId': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n   'domain': 'domo-community.domo.com',\n   'name': 'Landing Page_PROD',\n   'isSource': False,\n   'userId': 1893952720,\n   'created': '2023-06-15T21:09:03.396Z',\n   'updated': '2023-06-15T21:09:03.396Z',\n   'lastPromotion': {'id': '340f77ed-9ddc-4e18-86fd-40beb47b4369',\n    'deploymentId': 'fda423b7-c53a-4426-a52d-77f8d9a3ff4b',\n    'commitId': '963d7485-37ca-4885-9225-0b25f12cbcc5',\n    'repositoryId': 'abd4cb2b-ec72-4373-a471-2a04db500713',\n    'userId': '1893952720',\n    'commitName': 'v2',\n    'repositoryName': 'Landing Page_PROD',\n    'started': '2023-06-15T21:17:39.570Z',\n    'completed': '2023-06-15T21:17:41.391Z',\n    'status': 'COMPLETED',\n    'promotionRequest': {'commitId': '963d7485-37ca-4885-9225-0b25f12cbcc5',\n     'mapping': [{'mappingId': '5b5d7ab2-702c-4677-a4df-ffc38a9174d5',\n       'deployObjectId': '6ddbcb8d-0f38-48ad-bd73-f6b35c4b7daf',\n       'repositoryObjectId': '6ddbcb8d-0f38-48ad-bd73-f6b35c4b7daf',\n       'contentType': 'DATASET',\n       'link': False}],\n     'approvalId': '',\n     'pusherEventId': '6ffe0817-fe18-4fee-b4fc-e574fc7af27a'},\n    'promotionResult': {'totalObjects': 0,\n     'id': '27d1bb04-cfce-4127-8b9d-4226cf5710ed',\n     'percentage': 0,\n     'totalPages': 0,\n     'successfulPages': 0,\n     'abortedPages': 0,\n     'failedPages': 0,\n     'successfulCards': 0,\n     'abortedCards': 0,\n     'totalCards': 0,\n     'failedCards': 0,\n     'totalViews': 0,\n     'successfulViews': 0,\n     'abortedViews': 0,\n     'failedViews': 0,\n     'totalDataFlows': 0,\n     'totalStreams': 0,\n     'failedStreams': 0,\n     'successfulStreams': 0,\n     'abortStreams': 0,\n     'successfulDataFlows': 0,\n     'failedDataFlows': 0,\n     'abortedDataFlows': 0,\n     'totalErrors': 0,\n     'totalAborts': 0,\n     'promotionId': '340f77ed-9ddc-4e18-86fd-40beb47b4369'},\n    'pusherEventId': '6ffe0817-fe18-4fee-b4fc-e574fc7af27a',\n    'approvalId': ''},\n   'permission': 'OWNER'}],\n 'permission': 'OWNER'}",
    "crumbs": [
      "Blog",
      "Routes",
      "Sandbox Routes"
    ]
  },
  {
    "objectID": "routes/stream.html",
    "href": "routes/stream.html",
    "title": "Stream Routes",
    "section": "",
    "text": "source\n\nexecute_stream\n\n execute_stream (auth:domolibrary.client.DomoAuth.DomoAuth, stream_id:str,\n                 session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\nsource\n\n\ncreate_stream\n\n create_stream (auth:domolibrary.client.DomoAuth.DomoAuth, body:dict,\n                session:httpx.AsyncClient=None, debug_api:bool=False)\n\n\nsource\n\n\nupdate_stream\n\n update_stream (auth:domolibrary.client.DomoAuth.DomoAuth, stream_id:str,\n                body:dict, session:httpx.AsyncClient=None,\n                debug_api:bool=False)\n\n\nsource\n\n\nget_stream_by_id\n\n get_stream_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   stream_id:str, session:httpx.AsyncClient=None,\n                   debug_api:bool=False)\n\nSample get stream by id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nstream_id = 814\nres = await get_stream_by_id(stream_id=stream_id, auth=token_auth)\n\nfrom pprint import pprint\n\npprint(res.response)\n\nres = await execute_stream(stream_id=stream_id, auth=token_auth)\nprint(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 32, 'module_index': 28, 'num_stacks_to_drop_passed': 3}\n{'account': {'accountId': 5,\n             'accountTemplateAuthorizationId': None,\n             'accountTemplateId': None,\n             'configurations': None,\n             'createdAt': None,\n             'createdBy': None,\n             'credentialsType': None,\n             'dataProviderType': None,\n             'displayName': None,\n             'id': 5,\n             'modifiedAt': None,\n             'modifiedBy': None,\n             'name': None,\n             'type': None,\n             'userId': None,\n             'valid': False},\n 'accountTemplate': None,\n 'advancedScheduleJson': '{\"type\":\"DAY\",\"at\":\"08:01 PM\",\"timezone\":\"UTC\"}',\n 'configuration': [{'category': 'METADATA',\n                    'name': 'retry.retryNumber',\n                    'streamId': 814,\n                    'type': 'string',\n                    'value': '0'},\n                   {'category': 'METADATA',\n                    'name': 'report',\n                    'streamId': 814,\n                    'type': 'string',\n                    'value': 'Datasets'},\n                   {'category': 'METADATA',\n                    'name': '_description_',\n                    'streamId': 814,\n                    'type': 'string',\n                    'value': ''},\n                   {'category': 'METADATA',\n                    'name': 'updatemode.mode',\n                    'streamId': 814,\n                    'type': 'string',\n                    'value': 'Replace'}],\n 'createdAt': 1667420783.0,\n 'createdBy': 612085674,\n 'currentExecution': None,\n 'currentExecutionState': 'ERROR',\n 'dataProvider': {'authenticationScheme': 'fields',\n                  'authenticationSchemeConfiguration': [{'configField': False,\n                                                         'data': {},\n                                                         'defaultValue': '',\n                                                         'encrypted': True,\n                                                         'id': 5964,\n                                                         'name': 'apikey',\n                                                         'required': True,\n                                                         'restrictions': None,\n                                                         'sortOrder': None,\n                                                         'text': 'apikey',\n                                                         'tooltipText': 'Domo '\n                                                                        'Access '\n                                                                        'Token. '\n                                                                        'See '\n                                                                        'FAQ '\n                                                                        'and '\n                                                                        'http://knowledge.domo.com?cid=accesstokens '\n                                                                        'for '\n                                                                        'details.',\n                                                         'type': 'password'},\n                                                        {'configField': False,\n                                                         'data': {},\n                                                         'defaultValue': '',\n                                                         'encrypted': False,\n                                                         'id': 5963,\n                                                         'name': 'customer',\n                                                         'required': True,\n                                                         'restrictions': None,\n                                                         'sortOrder': None,\n                                                         'text': 'customer',\n                                                         'tooltipText': 'Enter '\n                                                                        'your '\n                                                                        'customer '\n                                                                        'name. '\n                                                                        'Your '\n                                                                        'customer '\n                                                                        'name '\n                                                                        'is '\n                                                                        'the '\n                                                                        'part '\n                                                                        'in '\n                                                                        'the '\n                                                                        'URL '\n                                                                        'that '\n                                                                        'before '\n                                                                        '.domo.com. '\n                                                                        'Ex: '\n                                                                        'If '\n                                                                        'your '\n                                                                        'Domo '\n                                                                        'instance '\n                                                                        'is '\n                                                                        'located '\n                                                                        'at '\n                                                                        'https://some-customer.domo.com, '\n                                                                        'then '\n                                                                        'your '\n                                                                        'customer '\n                                                                        'name '\n                                                                        'is '\n                                                                        'some-customer.',\n                                                         'type': 'string'}],\n                  'connectorValidatorPresent': False,\n                  'customerOAuthConfigurationDataProviderType': None,\n                  'dateCreated': 1542289927000,\n                  'dateUpdated': 1541088102000,\n                  'defaultConnectorId': None,\n                  'defaultConnectorLabel': None,\n                  'iconPicker': False,\n                  'id': 1496,\n                  'key': 'domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600',\n                  'moduleHandler': None,\n                  'name': 'Domo Governance Datasets Third Party',\n                  'producer': 'DOMO',\n                  'resourceBundlePresent': False,\n                  'scope': '0',\n                  'type': 'STANDARD',\n                  'unsafe': False,\n                  'url': 'com.thirdparty.connector.d14c2fef-49a8-4898-8ddd-f64998005600',\n                  'version': '0',\n                  'visibility': 'WITH_CONNECTOR'},\n 'dataSource': {'accountId': 5,\n                'adc': True,\n                'adcExternal': False,\n                'adcSource': 'DIRECT',\n                'cardInfo': {'cardCount': 0, 'cardViewCount': 0},\n                'cloudEngine': 'domo',\n                'cloudId': 'domo',\n                'cloudName': 'Domo',\n                'columnCount': 18,\n                'created': 1667420782000,\n                'dataProviderType': 'domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600',\n                'description': '',\n                'displayType': 'domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600',\n                'hidden': False,\n                'id': '42917df1-fa58-483f-a290-5fe95ccda4ed',\n                'lastTouched': 1700095810000,\n                'lastUpdated': 1700095810118,\n                'name': 'Governance_datasets',\n                'nextUpdate': 1711310459198,\n                'owner': {'group': False,\n                          'id': '612085674',\n                          'name': 'Oleksii Zakrevskyi',\n                          'type': 'USER'},\n                'permissions': 'NONE',\n                'properties': {'formulas': {'formulas': {}}},\n                'rowCount': 1188,\n                'scheduleActive': False,\n                'state': 'ERROR',\n                'status': 'INACTIVE_SCHEDULE',\n                'streamId': 814,\n                'tags': '[\"developer_documentation\",\"Apr-27-2023 '\n                        '21:57\",\"hackercore\"]',\n                'transportType': 'CONNECTOR',\n                'type': 'domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600',\n                'validAccount': True,\n                'validConfiguration': True},\n 'id': 814,\n 'inactiveScheduleCode': None,\n 'invalidExecutionId': None,\n 'lastExecution': {'bytesInserted': 0,\n                   'cancelledBy': None,\n                   'containerManagerId': None,\n                   'createdAt': 1711223541.0,\n                   'currentPhase': None,\n                   'currentState': 'ERROR',\n                   'dataTag': None,\n                   'endedAt': 1711223541.0,\n                   'errors': [{'category': 'USER',\n                               'code': 7002,\n                               'executionId': 868,\n                               'id': 698049,\n                               'invalidatesExecution': False,\n                               'message': \"Domo is ready, but you don't have \"\n                                          'access to the associated account. '\n                                          'Please contact the account owner '\n                                          'and have them share the account '\n                                          'with you.',\n                               'parameters': None,\n                               'streamId': 814}],\n                   'executionId': 868,\n                   'exportable': False,\n                   'index': True,\n                   'indexRequestKey': None,\n                   'latestPhase': None,\n                   'manualIndex': False,\n                   'modifiedAt': 1711223541.0,\n                   'peakMemoryCommittedBytes': None,\n                   'peakMemoryUsedBytes': None,\n                   'removed': False,\n                   'retryCount': 0,\n                   'retryExecution': None,\n                   'rowsInserted': 0,\n                   'runType': 'MANUAL',\n                   'startedAt': 1711223541.0,\n                   'startedBy': '1893952720',\n                   'streamId': 814,\n                   'toe': 'WOUTAKKVZM-USV8T-WQLY7',\n                   'updateMethod': 'REPLACE',\n                   'uploadId': None},\n 'lastSuccessfulExecution': {'bytesInserted': 299832,\n                             'cancelledBy': None,\n                             'containerManagerId': 'cm-3fe4733a-313e-4069-aa15-3ac9aa7f3e2b',\n                             'createdAt': 1700095682.0,\n                             'currentPhase': None,\n                             'currentState': 'SUCCESS',\n                             'dataTag': None,\n                             'endedAt': 1700095809.0,\n                             'errors': [],\n                             'executionId': 609,\n                             'exportable': False,\n                             'index': True,\n                             'indexRequestKey': 20231116005003.05,\n                             'latestPhase': None,\n                             'manualIndex': False,\n                             'modifiedAt': 1700095809.0,\n                             'peakMemoryCommittedBytes': None,\n                             'peakMemoryUsedBytes': None,\n                             'removed': False,\n                             'retryCount': 0,\n                             'retryExecution': None,\n                             'rowsInserted': 1188,\n                             'runType': 'MANUAL',\n                             'startedAt': 1700095682.0,\n                             'startedBy': '1893952720',\n                             'streamId': 814,\n                             'toe': 'XEO01SO4XR-GIM4M-OPW46',\n                             'updateMethod': 'REPLACE',\n                             'uploadId': 557},\n 'modifiedAt': 1711223541.0,\n 'modifiedBy': 1893952720,\n 'scheduleAssertion': False,\n 'scheduleExpression': '0 1 20 * * ?',\n 'scheduleRetryCount': 0,\n 'scheduleRetryExpression': None,\n 'scheduleStartDate': None,\n 'scheduleState': 'INACTIVE',\n 'schemaDefinition': {'columns': [{'id': 'Dataset ID',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Dataset ID',\n                                                'isEncrypted': False},\n                                   'name': 'Dataset ID',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Name',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Name',\n                                                'isEncrypted': False},\n                                   'name': 'Name',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Description',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Description',\n                                                'isEncrypted': False},\n                                   'name': 'Description',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Row Count',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Row Count',\n                                                'isEncrypted': False},\n                                   'name': 'Row Count',\n                                   'type': 'DOUBLE',\n                                   'visible': True},\n                                  {'id': 'Column Count',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Column Count',\n                                                'isEncrypted': False},\n                                   'name': 'Column Count',\n                                   'type': 'DOUBLE',\n                                   'visible': True},\n                                  {'id': 'Owner ID',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Owner ID',\n                                                'isEncrypted': False},\n                                   'name': 'Owner ID',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Owner Name',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Owner Name',\n                                                'isEncrypted': False},\n                                   'name': 'Owner Name',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Dataset Created Date/Time',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Dataset Created '\n                                                            'Date/Time',\n                                                'isEncrypted': False},\n                                   'name': 'Dataset Created Date/Time',\n                                   'type': 'DATETIME',\n                                   'visible': True},\n                                  {'id': 'DataSet Last Touched Date/Time',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'DataSet Last '\n                                                            'Touched Date/Time',\n                                                'isEncrypted': False},\n                                   'name': 'DataSet Last Touched Date/Time',\n                                   'type': 'DATETIME',\n                                   'visible': True},\n                                  {'id': 'DataSet Last Updated Date/Time',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'DataSet Last '\n                                                            'Updated Date/Time',\n                                                'isEncrypted': False},\n                                   'name': 'DataSet Last Updated Date/Time',\n                                   'type': 'DATETIME',\n                                   'visible': True},\n                                  {'id': 'Report Last Run',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Report Last Run',\n                                                'isEncrypted': False},\n                                   'name': 'Report Last Run',\n                                   'type': 'DATETIME',\n                                   'visible': True},\n                                  {'id': 'Type',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Type',\n                                                'isEncrypted': False},\n                                   'name': 'Type',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Display ProcessingType',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Display '\n                                                            'ProcessingType',\n                                                'isEncrypted': False},\n                                   'name': 'Display ProcessingType',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Data Provider ProcessingType',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Data Provider '\n                                                            'ProcessingType',\n                                                'isEncrypted': False},\n                                   'name': 'Data Provider ProcessingType',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'Card Count',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'Card Count',\n                                                'isEncrypted': False},\n                                   'name': 'Card Count',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': 'PDP Enabled',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': 'PDP Enabled',\n                                                'isEncrypted': False},\n                                   'name': 'PDP Enabled',\n                                   'type': 'STRING',\n                                   'visible': True},\n                                  {'id': '_BATCH_ID_',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': '_BATCH_ID_',\n                                                'isEncrypted': False},\n                                   'name': '_BATCH_ID_',\n                                   'type': 'DOUBLE',\n                                   'visible': True},\n                                  {'id': '_BATCH_LAST_RUN_',\n                                   'metadata': {'colFormat': '',\n                                                'colLabel': '_BATCH_LAST_RUN_',\n                                                'isEncrypted': False},\n                                   'name': '_BATCH_LAST_RUN_',\n                                   'type': 'DATETIME',\n                                   'visible': True}]},\n 'transport': {'description': 'com.thirdparty.connector.d14c2fef-49a8-4898-8ddd-f64998005600',\n               'type': 'CONNECTOR',\n               'version': '0'},\n 'updateMethod': 'REPLACE',\n 'valid': True}\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 32, 'module_index': 28, 'num_stacks_to_drop_passed': 3}\n{'streamId': 814, 'executionId': 869, 'toe': 'FFRG4099IZ-R896B-MULUP', 'startedAt': 1711224387.0, 'endedAt': 1711224387.0, 'updateMethod': 'REPLACE', 'index': True, 'retryCount': 0, 'retryExecution': None, 'containerManagerId': None, 'uploadId': None, 'indexRequestKey': None, 'currentState': 'ERROR', 'runType': 'MANUAL', 'createdAt': None, 'modifiedAt': None, 'latestPhase': None, 'currentPhase': None, 'removed': False, 'rowsInserted': 0, 'bytesInserted': 0, 'startedBy': '1893952720', 'cancelledBy': None, 'dataTag': None, 'peakMemoryUsedBytes': None, 'peakMemoryCommittedBytes': None, 'exportable': False, 'manualIndex': False, 'errors': [{'id': None, 'streamId': 814, 'executionId': 869, 'category': 'USER', 'code': 7002, 'message': \"Domo is ready, but you don't have access to the associated account. Please contact the account owner and have them share the account with you.\", 'invalidatesExecution': False, 'parameters': {'stacktrace': 'org.springframework.security.access.AccessDeniedException: Access is denied\\n\\tat org.springframework.security.access.vote.AffirmativeBased.decide(AffirmativeBased.java:77)\\n\\tat org.springframework.security.access.intercept.AbstractSecurityInterceptor.attemptAuthorization(AbstractSecurityInterceptor.java:253)\\n\\tat org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:222)\\n\\tat org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:64)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\n\\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)\\n\\tat jdk.proxy2/jdk.proxy2.$Proxy231.getAccountByUserIdAndIdOLD(Unknown Source)\\n\\tat com.domo.api.data.account.service.AccountService.getAccount(AccountService.java:467)\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor1798.invoke(Unknown Source)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)\\n\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)\\n\\tat com.domo.api.data.account.service.AccountService$$SpringCGLIB$$0.getAccount(&lt;generated&gt;)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.getAccountAuthorization(ContainerManagerService.java:844)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.getAccountAuthorization(ContainerManagerService.java:857)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.buildAccountProperties(ContainerManagerService.java:814)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.buildConnectorMetadata(ContainerManagerService.java:613)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.buildDataImportRequest(ContainerManagerService.java:476)\\n\\tat com.domo.api.data.container.service.ContainerManagerService.launchContainer(ContainerManagerService.java:270)\\n\\tat com.domo.api.data.container.service.ContainerExecutionService.executeStream(ContainerExecutionService.java:144)\\n\\tat com.domo.api.data.streams.service.StreamExecutionService.createExecution(StreamExecutionService.java:370)\\n\\tat com.domo.api.data.streams.service.StreamExecutionService.createExecution(StreamExecutionService.java:311)\\n\\tat com.domo.api.data.streams.service.StreamExecutionService.createExecution(StreamExecutionService.java:224)\\n\\tat com.domo.api.data.streams.resource.StreamExecutionResource.createExecution(StreamExecutionResource.java:129)\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor712.invoke(Unknown Source)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\\n\\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\\n\\tat com.domo.bedrock.service.ratelimit.spring.RateLimitAspect.rateLimit(RateLimitAspect.java:105)\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)\\n\\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)\\n\\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\\n\\tat org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:67)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\\n\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)\\n\\tat com.domo.api.data.streams.resource.StreamExecutionResource$$SpringCGLIB$$0.createExecution(&lt;generated&gt;)\\n\\tat jdk.internal.reflect.GeneratedMethodAccessor712.invoke(Unknown Source)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:547)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\\n\\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:614)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHolder.handle(ServletHolder.java:736)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1614)\\n\\tat org.eclipse.jetty.ee10.websocket.servlet.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:195)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.bedrock.jaxrs.spring.ResponseContextFilter.doFilterInternal(ResponseContextFilter.java:31)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.api.data.inject.DomoEtagHeaderFilter.doFilter(DomoEtagHeaderFilter.java:63)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.github.ziplet.filter.compression.CompressingFilter.doFilter(CompressingFilter.java:263)\\n\\tat com.domo.api.data.inject.DomoCompressingFilter.doFilter(DomoCompressingFilter.java:62)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.bedrock.web.support.RequestPoolPatternFilter.doFilterInternal(RequestPoolPatternFilter.java:79)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.api.data.oauth2.AccessCodeServletFilter.doFilter(AccessCodeServletFilter.java:35)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.bedrock.maestro.web.RequestContextAuthFilter.doFilterInternal(RequestContextAuthFilter.java:46)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.bedrock.maestro.web.ServiceLogFilter.doFilterInternal(ServiceLogFilter.java:192)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.api.identity.lib.util.ThreadLocalCacheFilter.doFilterInternal(ThreadLocalCacheFilter.java:29)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)\\n\\tat org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:117)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)\\n\\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)\\n\\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat com.domo.bedrock.web.security.AuthenticationFilter.doFilterInternal(AuthenticationFilter.java:87)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)\\n\\tat org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)\\n\\tat org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)\\n\\tat org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat com.domo.bedrock.maestro.client.RequestTimeoutFilter.doFilterInternal(RequestTimeoutFilter.java:52)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\\n\\tat org.eclipse.jetty.ee10.servlet.FilterHolder.doFilter(FilterHolder.java:205)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1586)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler$MappedServlet.handle(ServletHandler.java:1547)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletChannel.dispatch(ServletChannel.java:814)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletChannel.handle(ServletChannel.java:431)\\n\\tat org.eclipse.jetty.ee10.servlet.ServletHandler.handle(ServletHandler.java:464)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:571)\\n\\tat org.eclipse.jetty.ee10.servlet.SessionHandler.handle(SessionHandler.java:703)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.handle(ContextHandler.java:765)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:179)\\n\\tat org.eclipse.jetty.server.internal.HttpChannelState$HandlerInvoker.run(HttpChannelState.java:619)\\n\\tat org.eclipse.jetty.server.internal.HttpConnection.onFillable(HttpConnection.java:411)\\n\\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:322)\\n\\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:99)\\n\\tat org.eclipse.jetty.io.SelectableChannelEndPoint$1.run(SelectableChannelEndPoint.java:53)\\n\\tat org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.runTask(AdaptiveExecutionStrategy.java:478)\\n\\tat org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(AdaptiveExecutionStrategy.java:441)\\n\\tat org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:293)\\n\\tat org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.run(AdaptiveExecutionStrategy.java:201)\\n\\tat org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:410)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:971)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.doRunJob(QueuedThreadPool.java:1201)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1156)\\n\\tat java.base/java.lang.Thread.run(Thread.java:840)\\n', 'message': 'Access is denied'}}]}",
    "crumbs": [
      "Blog",
      "Routes",
      "Stream Routes"
    ]
  },
  {
    "objectID": "routes/user_attributes.html",
    "href": "routes/user_attributes.html",
    "title": "User Attribute Routes",
    "section": "",
    "text": "source\n\nUserAttributes_CRUD_Error\n\n UserAttributes_CRUD_Error (status, message, domo_instance,\n                            parent_class:str=None, function_name:str=None)\n\nbase exception\n\nsource\n\n\nUserAttributes_GET_Error\n\n UserAttributes_GET_Error (status, message, domo_instance,\n                           parent_class:str=None, function_name:str=None)\n\nbase exception\n\nsource\n\n\nUserAttributes_IssuerType\n\n UserAttributes_IssuerType (value, names=None, module=None, qualname=None,\n                            type=None, start=1)\n\nAn enumeration.\n\n[{member.name, member.value} for member in UserAttributes_IssuerType]\n\n\nsource\n\n\nget_user_attributes\n\n get_user_attributes (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      issuer_type_ls:List[__main__.UserAttributes_IssuerTy\n                      pe]=None, session:httpx.AsyncClient=None,\n                      debug_api:bool=False, parent_class=None,\n                      debug_num_stacks_to_drop=1)\n\nretrieves user attributes from Domo user attributes can be UserAttributes_IssuerType – idp, domo, or user-generated API does not filter on the issuer type (despite API accepting filter parameter)\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_user_attributes(\n    auth=token_auth, issuer_type_ls=[UserAttributes_IssuerType.CUSTOM], debug_api=False\n)\n\nres.response\n\n\nsource\n\n\nget_user_attribute_by_id\n\n get_user_attribute_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                           attribute_id:str,\n                           session:httpx.AsyncClient=None,\n                           debug_api:bool=False, parent_class=None,\n                           debug_num_stacks_to_drop=1)\n\nretrieves user attributes from Domo user attributes can be UserAttributes_IssuerType – idp, domo, or user-generated API does not filter on the issuer type (despite API accepting filter parameter)\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_user_attribute_by_id(\n    attribute_id=\"DomoLibraryTestFranchise\", auth=token_auth, debug_api=False\n)\n\nres.response\n\n\nsource\n\n\nclean_attribute_id\n\n clean_attribute_id (text)\n\n\nsource\n\n\ncreate_user_attribute\n\n create_user_attribute (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        attribute_id, name=None, description=None,\n                        data_type:str=None, security_voter=None, issuer_ty\n                        pe:__main__.UserAttributes_IssuerType=None,\n                        session:httpx.AsyncClient=None,\n                        debug_api:bool=False, parent_class=None,\n                        debug_num_stacks_to_drop=1)\n\n\nsource\n\n\ngenerate_create_user_attribute_body\n\n generate_create_user_attribute_body (attribute_id:str, name:str=None,\n                                      description:str=None, issuer_type:__\n                                      main__.UserAttributes_IssuerType=Non\n                                      e, security_voter:str=None,\n                                      data_type:str=None)\n\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    res = await create_user_attribute(\n        auth=token_auth,\n        attribute_id=\"Test Library Store\",\n        name=\"test library store\",\n        debug_api=False,\n    )\n\n    print(res)\nexcept UserAttributes_CRUD_Error as e:\n    print(e)\n\n\nsource\n\n\nupdate_user_attribute\n\n update_user_attribute (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        attribute_id, name=None, description=None, issuer_\n                        type:__main__.UserAttributes_IssuerType=&lt;UserAttri\n                        butes_IssuerType.CUSTOM: 'customer-defined'&gt;,\n                        data_type:str=None, security_voter=None,\n                        session:httpx.AsyncClient=None,\n                        debug_api:bool=False, parent_class=None,\n                        debug_num_stacks_to_drop=1)\n\nbody must include all attribute parameters, this route wil use the get_user_attribute_by_id function to retrieve existing values (and throw an error if not found) to construct an update statement\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\ntry:\n    res = await update_user_attribute(\n        auth=token_auth,\n        attribute_id=\"TestLibraryStore\",\n        name=None,\n        description=None,\n        debug_api=False,\n    )\n\n    print(res)\n\nexcept (UserAttributes_GET_Error, UserAttributes_CRUD_Error) as e:\n    print(e)\n\n\nsource\n\n\ndelete_user_attribute\n\n delete_user_attribute (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        attribute_id, session:httpx.AsyncClient=None,\n                        debug_api:bool=False, parent_class=None,\n                        debug_num_stacks_to_drop=1)\n\n\n# import domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    res = await delete_user_attribute(\n        auth=token_auth, attribute_id=\"TestLibraryStore\", debug_api=False\n    )\n    print(res)\n\nexcept UserAttributes_CRUD_Error as e:\n    print(e)",
    "crumbs": [
      "Blog",
      "Routes",
      "User Attribute Routes"
    ]
  },
  {
    "objectID": "routes/group.html",
    "href": "routes/group.html",
    "title": "Group Routes",
    "section": "",
    "text": "source\n\n\n\n search_groups_by_name (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        search_name:str, is_exact_match:bool=True,\n                        debug_api:bool=False,\n                        session:httpx.AsyncClient=None,\n                        debug_num_stacks_to_drop=1, parent_class:str=None)\n\nuses /content/v2/groups/grouplist api – includes user details\n\nsource\n\n\n\n\n SearchGroups_Error (status, message, domo_instance,\n                     function_name='search_groups_by_name',\n                     parent_class:str=None)\n\nbase exception\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\nsearch_name = \"Test Groupie\"\ntry:\n    res = await search_groups_by_name(\n        auth=token_auth, search_name=search_name, debug_api=False\n    )\n    print(res)\nexcept SearchGroups_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  SearchGroups_Error 🛑 - function: search_groups_by_name || status 200 || There is no exact match for Test Groupie at domo-community\n\n\n\nsource\n\n\n\n\n\n get_all_groups (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 session:httpx.AsyncClient=None, debug_api:bool=False,\n                 debug_loop:bool=False, debug_num_stacks_to_drop:int=1,\n                 parent_class:str=None)\n\nuses /content/v2/groups/grouplist api – includes user details\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_all_groups(auth=token_auth)\nres_df = pd.DataFrame(res.response)\n\nprint(f\"{len(res.response)} groups retrieved\")\n\nres_df[0:1]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n120 groups retrieved\n\n\n\n\n\n\n\n\n\n\nname\ngroupId\nowners\ngroupType\ngroupMembers\nmemberCount\ncreated\ndescription\n\n\n\n\n0\nADM | Orientation\n49793884\n[{'type': 'GROUP', 'id': '49793884', 'displayN...\nopen\n[{'type': 'USER', 'id': '908494860'}, {'type':...\n15\n2023-06-08 20:59:05.0\n\n\n\n\n\n\n\n\n\n\nsource\n\n\n\n\n\n get_group_by_id (auth:domolibrary.client.DomoAuth.DomoAuth, group_id:str,\n                  debug_api:bool=False, session:httpx.AsyncClient=None,\n                  parent_class:str=None, debug_num_stacks_to_drop:int=1)\n\nuses /content/v2/groups/ api – does not return details\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_group_by_id(auth=token_auth, group_id=1259653287)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': 1259653287, 'name': 'Test Group 2_deleted_7ece7d46-48ef-11ee-b1a1-12193c00dc43', 'type': 'open', 'userIds': [], 'creatorId': 1893952720, 'memberCount': 0, 'guid': 'aabb6587-ad53-11ed-82c3-0a09ba383c95', 'description': 'update metadata - updated 2023-09-01', 'hidden': False, 'default': False, 'active': False}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\n\n toggle_system_group_visibility (auth, is_hide_system_groups:bool,\n                                 debug_api:bool=False,\n                                 debug_num_stacks_to_drop=1,\n                                 parent_class:str=None,\n                                 session:httpx.AsyncClient=None)\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await toggle_system_group_visibility(auth=token_auth, is_hide_system_groups=True)\n\nres = await get_all_groups(auth=token_auth)\nall_groups = res.response\n\nres = await toggle_system_group_visibility(auth=token_auth, is_hide_system_groups=False)\n\n\nres = await get_all_groups(auth=token_auth)\nall_groups_with_hidden = res.response\n\nprint(\n    f\"there are {len(all_groups)} standard groups, and {len(all_groups_with_hidden)} groups including system groups\"\n)\n\n[\n    group[\"name\"]\n    for group in all_groups_with_hidden\n    if group[\"groupId\"] not in [all_group[\"groupId\"] for all_group in all_groups]\n][0:5]\n\ntoggling group visiblity in domo-community hiding system groups\nwarning this token has not been validated by who_am_i, run get_auth_token first\ntoggling group visiblity in domo-community show system groups\nthere are 47 standard groups, and 120 groups including system groups\n\n\n['Grant: Add new people',\n 'Grant: Assign achievements',\n 'Grant: Assign users to a role',\n 'Grant: Create DDX Apps',\n 'Grant: Create DomoApps']",
    "crumbs": [
      "Blog",
      "Routes",
      "Group Routes"
    ]
  },
  {
    "objectID": "routes/group.html#get-group-ownership",
    "href": "routes/group.html#get-group-ownership",
    "title": "Group Routes",
    "section": "GET Group Ownership",
    "text": "GET Group Ownership\n\nsource\n\nget_group_owners\n\n get_group_owners (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   group_id:str, return_raw:bool=False,\n                   debug_api:bool=False, session:httpx.AsyncClient=None,\n                   parent_class:str=None, debug_num_stacks_to_drop=1)\n\n\nsample implementation of get_ownership\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 1781661643\n\nres = await get_group_owners(\n    auth=token_auth,\n    group_id=group_id,\n)\n\npd.DataFrame(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\ntype\nid\ndisplayName\n\n\n\n\n0\nGROUP\n1781661643\nTestMembership\n\n\n1\nUSER\n1893952720\nJae Wilson1\n\n\n2\nGROUP\n822382906\nGrant: Manage all groups\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nget_group_membership\n\n get_group_membership (auth:domolibrary.client.DomoAuth.DomoAuth,\n                       group_id:str, return_raw:bool=False,\n                       debug_api:bool=False,\n                       session:httpx.AsyncClient=None,\n                       parent_class:str=None,\n                       debug_num_stacks_to_drop:int=1)\n\n\nsample implementation of get_membership\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 1781661643\n\nres = await get_group_membership(\n    auth=token_auth,\n    group_id=group_id,\n)\n\npd.DataFrame(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nuserId\nrole\nroleId\nlastSignIn\nlocation\n\n\n\n\n0\n696468809\nCommunity_Default_Priviliged\n2097317660\n2021-04-19 16:36:26.944\nNaN\n\n\n1\n1345737456\nPrivileged\n2\n2024-02-27 06:18:44.0\n\n\n\n2\n1141078945\nCommunity_Default_Priviliged\n2097317660\n2021-04-28 03:58:56.0\nNaN",
    "crumbs": [
      "Blog",
      "Routes",
      "Group Routes"
    ]
  },
  {
    "objectID": "routes/group.html#crud-group-membership",
    "href": "routes/group.html#crud-group-membership",
    "title": "Group Routes",
    "section": "CRUD Group Membership",
    "text": "CRUD Group Membership\n\nsource\n\ngenerate_body_update_group_membership\n\n generate_body_update_group_membership (group_id:str,\n                                        add_member_arr:list[str]=None,\n                                        remove_member_arr:list[str]=None,\n                                        add_owner_arr:list[str]=None,\n                                        remove_owner_arr:list[str]=None)\n\neach member or owner obj should be an object of shape {“type”, “id”}\n\nsource\n\n\nupdate_group_membership\n\n update_group_membership (auth:domolibrary.client.DomoAuth.DomoAuth,\n                          group_id:str, add_member_arr:list[dict]=None,\n                          remove_member_arr:list[dict]=None,\n                          add_owner_arr:list[dict]=None,\n                          remove_owner_arr:list[dict]=None,\n                          debug_api:bool=False,\n                          session:httpx.AsyncClient=None,\n                          parent_class:str=None,\n                          debug_num_stacks_to_drop:int=1)\n\neach member or owner obj should be an object of shape {“type”, “id”}\n\nSample implementation of generate_body_update_group_membership and update_group_membership\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 250707376\n\nadd_user_obj = {\"id\": os.environ[\"DOMO_DOJO_USER_ID\"], \"type\": \"USER\"}\n\nawait update_group_membership(\n    auth=token_auth,\n    group_id=group_id,\n    add_member_arr=[add_user_obj],\n    add_owner_arr=[add_user_obj],\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=403, response='Forbidden', is_success=False, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Group Routes"
    ]
  },
  {
    "objectID": "routes/auth.html",
    "href": "routes/auth.html",
    "title": "Auth Routes",
    "section": "",
    "text": "source\n\n\n\n NoAccessTokenReturned (function_name:Optional[str]=None,\n                        status:Optional[int]=None, message:str='No\n                        AccessToken returned',\n                        domo_instance:Optional[str]=None,\n                        parent_class:str=None)\n\nbase exception\n\nsource\n\n\n\n\n InvalidInstanceError (function_name:Optional[str]=None,\n                       parent_class:str=None, status:Optional[int]=None,\n                       message='invalid instance',\n                       domo_instance:Optional[str]=None)\n\nreturn if invalid domo_instance sent to API\n\nsource\n\n\n\n\n InvalidAuthTypeError (required_auth_type:dict=None,\n                       required_auth_type_ls:list=None,\n                       function_name:Optional[str]=None,\n                       parent_class:str=None,\n                       domo_instance:Optional[str]=None)\n\nreturn invalid Auth type sent to API\n\nsource\n\n\n\n\n AccountLockedError (function_name:Optional[str]=None,\n                     status:Optional[int]=None, message='invalid\n                     credentials', domo_instance:Optional[str]=None,\n                     parent_class:str=None)\n\nreturn invalid credentials sent to API\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfunction_name\ntyping.Optional[str]\nNone\n\n\n\nstatus\ntyping.Optional[int]\nNone\nAPI request status\n\n\nmessage\nstr\ninvalid credentials\n\n\n\ndomo_instance\ntyping.Optional[str]\nNone\n\n\n\nparent_class\nstr\nNone\n\n\n\n\n\nsource\n\n\n\n\n InvalidCredentialsError (function_name:Optional[str]=None,\n                          parent_class:str=None,\n                          status:Optional[int]=None, message='invalid\n                          credentials', domo_instance:Optional[str]=None)\n\nreturn invalid credentials sent to API\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfunction_name\ntyping.Optional[str]\nNone\n\n\n\nparent_class\nstr\nNone\n\n\n\nstatus\ntyping.Optional[int]\nNone\nAPI request status\n\n\nmessage\nstr\ninvalid credentials\n\n\n\ndomo_instance\ntyping.Optional[str]\nNone",
    "crumbs": [
      "Blog",
      "Routes",
      "Auth Routes"
    ]
  },
  {
    "objectID": "routes/auth.html#full-auth-route---username-and-password-authentication",
    "href": "routes/auth.html#full-auth-route---username-and-password-authentication",
    "title": "Auth Routes",
    "section": "Full Auth Route - username and password authentication",
    "text": "Full Auth Route - username and password authentication\n\nsource\n\nget_full_auth\n\n get_full_auth (domo_instance:str, domo_username:str, domo_password:str,\n                session:Optional[httpx.AsyncClient]=None,\n                debug_api:bool=False, parent_class:str=None)\n\nuses username and password authentication to retrieve a full_auth access token\n\nSample Implementations of get_full_auth\n\nintentional invalid credentials\n\ntry:\n    await get_full_auth(\n        domo_instance=\"domo-community\",\n        domo_username=\"test@test.com\",\n        domo_password=\"fake password\",\n    )\nexcept InvalidCredentialsError as e:\n    print(e)\n\n🛑  InvalidCredentialsError 🛑 - function: get_full_auth || status 200 || INVALID_CREDENTIALS at domo-community\n\n\n\n\ninvalid instance\n\ntry:\n    await get_full_auth(\n        domo_instance=\"test\",\n        domo_username=\"fake@test.com\",\n        domo_password=\"fake password\",\n    )\nexcept InvalidInstanceError as e:\n    print(e)\n\n🛑  InvalidInstanceError 🛑 - function: get_full_auth || status 403 || Forbidden at test\n\n\n\n\nvalid credentials\n\nawait get_full_auth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nResponseGetData(status=200, response={'userId': 1893952720, 'success': True, 'sessionToken': 'eyJjdXN0b21lcklkIjoibW1tbS0wMDEyLTAyMDAiLCJleHBpcmF0aW9uIjoxNzExMjQ2NzM1Nzk4LCJobWFjU2lnbmF0dXJlIjoiMDQxZGE5NGViNGQ3ZDgwMGQ1ZTZkZTRiN2JhMzRiMTgzOWViM2VkMDlhMmQ3ZTcyOTNkYjNkZjRiYjJiYWRjYiIsInNpZCI6IjAxZDgzZDRmLTcxZWEtNDMzNi1hMzFhLTg4MjExOThjMDc1OSIsInRpbWVzdGFtcCI6MTcxMTIxNzkzNTc5OCwidG9lcyI6IlVOS05PV05TSUQiLCJ1c2VySWQiOiIxODkzOTUyNzIwIn0%3D', 'twoFactorInfo': {'token': None, 'key': None, 'status': 'VALID', 'phoneMask': None}}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Auth Routes"
    ]
  },
  {
    "objectID": "routes/auth.html#developer-auth-route---client_id-and-secret-authentication",
    "href": "routes/auth.html#developer-auth-route---client_id-and-secret-authentication",
    "title": "Auth Routes",
    "section": "Developer Auth Route - client_id and secret authentication",
    "text": "Developer Auth Route - client_id and secret authentication\n\nsource\n\nget_developer_auth\n\n get_developer_auth (domo_client_id:str, domo_client_secret:str,\n                     session:Optional[httpx.AsyncClient]=None,\n                     debug_api:bool=False, parent_class:str=None)\n\nonly use for authenticating against apis documented under developer.domo.com\n\nSample Implementations of get_developer_auth\nThe 401 response is expected because we are using invalid credentials\n\ntry:\n    await get_developer_auth(domo_client_id=\"test_id\", domo_client_secret=\"test_secret\")\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\n🛑  InvalidCredentialsError 🛑 - function: get_developer_auth || status 401 || Unauthorized",
    "crumbs": [
      "Blog",
      "Routes",
      "Auth Routes"
    ]
  },
  {
    "objectID": "routes/user.html",
    "href": "routes/user.html",
    "title": "User Routes",
    "section": "",
    "text": "# %pip install httpx --upgrade\n# %pip install domolibrary --upgrade",
    "crumbs": [
      "Blog",
      "Routes",
      "User Routes"
    ]
  },
  {
    "objectID": "routes/user.html#search-users-api",
    "href": "routes/user.html#search-users-api",
    "title": "User Routes",
    "section": "Search Users API",
    "text": "Search Users API\n\nsource\n\nsearch_users\n\n search_users (auth:domolibrary.client.DomoAuth.DomoAuth, body:dict,\n               loop_until_end:bool=True, limit=200, maximum=100,\n               suppress_no_results_error:bool=False, debug_api:bool=False,\n               return_raw:bool=False, debug_loop:bool=False,\n               debug_num_stacks_to_drop=1, parent_class=None,\n               session:httpx.AsyncClient=None)\n\n\nsource\n\n\nsearch_users_by_id\n\n search_users_by_id (user_ids:list[str],\n                     auth:domolibrary.client.DomoAuth.DomoAuth,\n                     debug_api:bool=False, return_raw:bool=False,\n                     suppress_no_results_error:bool=False,\n                     debug_num_stacks_to_drop=2, parent_class=None)\n\nsearch v1_users_search_api\n\nsource\n\n\nsearch_users_by_email\n\n search_users_by_email (user_email_ls:list[str],\n                        auth:domolibrary.client.DomoAuth.DomoAuth,\n                        debug_api:bool=False, return_raw:bool=False,\n                        suppress_no_results_error:bool=False,\n                        debug_num_stacks_to_drop=2, parent_class=None)\n\nsearch v1_users_search_api\n\nsample implementation of search_users_by_email\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await search_users_by_email(\n    user_email_ls=[\"domo.com\"],\n    auth=token_auth,\n    return_raw=False,\n    debug_api=False,\n)\n\npd.DataFrame(res.response[0:5])\n\n# res.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\ndisplayName\nroleId\nuserName\nemailAddress\n\n\n\n\n0\n1216550715\n8:26 - go to sleep\n2\ntest4@domo.com\ntest4@domo.com\n\n\n1\n128618865\n9:02 - no really go to bed\n2\ntest6@domo.com\ntest6@domo.com\n\n\n2\n1833256765\nAaron Schofield\n2097317660\naaron.schofield@domo.com\naaron.schofield@domo.com\n\n\n3\n158618860\nAarzoo Dhillon\n2\naarzoo.dhillon@domo.com\naarzoo.dhillon@domo.com\n\n\n4\n696468809\nAbish Srinath\n2097317660\nabish.srinath@domo.com\nabish.srinath@domo.com",
    "crumbs": [
      "Blog",
      "Routes",
      "User Routes"
    ]
  },
  {
    "objectID": "routes/datacenter.html",
    "href": "routes/datacenter.html",
    "title": "Datacenter Routes",
    "section": "",
    "text": "class Datacenter_Enum(Enum):\n    ACCOUNT = \"ACCOUNT\"\n    CARD = \"CARD\"\n    DATAFLOW = \"DATAFLOW\"\n    DATASET = \"DATASET\"\n    GROUP = \"GROUP\"\n    PAGE = \"PAGE\"\n    USER = \"USER\"\n    CONNECTOR = \"CONNECTOR\"\n\n\nclass Dataflow_Type_Filter_Enum(Enum):\n    ADR = {\n        \"filterType\": \"term\",\n        \"field\": \"data_flow_type\",\n        \"value\": \"ADR\",\n        \"name\": \"ADR\",\n        \"not\": False,\n    }\n\n    MYSQL = {\n        \"filterType\": \"term\",\n        \"field\": \"data_flow_type\",\n        \"value\": \"MYSQL\",\n        \"name\": \"MYSQL\",\n        \"not\": False,\n    }\n\n    REDSHIFT = {\n        \"filterType\": \"term\",\n        \"field\": \"data_flow_type\",\n        \"value\": \"MYSQL\",\n        \"name\": \"MYSQL\",\n        \"not\": False,\n    }\n\n    MAGICV2 = {\n        \"filterType\": \"term\",\n        \"field\": \"data_flow_type\",\n        \"value\": \"MAGIC\",\n        \"name\": \"Magic ETL v2\",\n        \"not\": False,\n    }\n\n    MAGIC = {\n        \"filterType\": \"term\",\n        \"field\": \"data_flow_type\",\n        \"value\": \"ETL\",\n        \"name\": \"Magic ETL\",\n        \"not\": False,\n    }\n\n\nsource\n\nDataflow_Type_Filter_Enum\n\n Dataflow_Type_Filter_Enum (value, names=None, module=None, qualname=None,\n                            type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\nDatacenter_Enum\n\n Datacenter_Enum (value, names=None, module=None, qualname=None,\n                  type=None, start=1)\n\nAn enumeration.\n\nclass Datacenter_Filter_Field_Enum(Enum):\n    DATAPROVIDER = \"dataprovidername_facet\"\n    CERTIFICATION = \"certification.state\"\n\n\nclass Datacenter_Filter_Field_Certification_Enum(Enum):\n    CERTIFIED = \"CERTIFIED\"\n    PENDING = \"PENDING\"\n    REQUESTED = \"REQUESTED\"\n    EXPIRED = \"EXPIRED\"\n\n\ndef generate_search_datacenter_filter(\n    field,  # use Datacenter_Filter_Field_Enum\n    value,\n    is_not: bool = False,  # to handle exclusion\n):\n    return {\n        \"filterType\": \"term\",\n        \"field\": field,\n        \"value\": value,\n        \"not\": is_not,\n    }\n\n\nsource\n\n\ngenerate_search_datacenter_filter\n\n generate_search_datacenter_filter (field, value, is_not:bool=False)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfield\n\n\nuse Datacenter_Filter_Field_Enum\n\n\nvalue\n\n\n\n\n\nis_not\nbool\nFalse\nto handle exclusion\n\n\n\n\nsource\n\n\nDatacenter_Filter_Field_Certification_Enum\n\n Datacenter_Filter_Field_Certification_Enum (value, names=None,\n                                             module=None, qualname=None,\n                                             type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\nDatacenter_Filter_Field_Enum\n\n Datacenter_Filter_Field_Enum (value, names=None, module=None,\n                               qualname=None, type=None, start=1)\n\nAn enumeration.\n\ngenerate_search_datacenter_filter(\n    field=Datacenter_Filter_Field_Enum.CERTIFICATION.value,\n    value=Datacenter_Filter_Field_Certification_Enum.CERTIFIED.value,\n)\n\n{'filterType': 'term',\n 'field': 'certification.state',\n 'value': 'CERTIFIED',\n 'not': False}\n\n\n\nsource\n\n\ngenerate_search_datacenter_filter_search_term\n\n generate_search_datacenter_filter_search_term (search_term)\n\n\nsample implementation of generate_search_datacenter_filter_search_term\n\ngenerate_search_datacenter_filter_search_term(\"hello world*\")\n\n{'field': 'name_sort', 'filterType': 'wildcard', 'query': 'hello world*'}\n\n\n\ndef generate_search_datacenter_body(\n    search_text: str = None,\n    entity_type: Union[\n        str, list\n    ] = \"DATASET\",  # can accept one entity_type or a list of entity_types\n    additional_filters_ls: list[dict] = None,\n    combineResults: bool = True,\n    limit: int = 100,\n    offset: int = 0,\n):\n    filters_ls = (\n        [generate_search_datacenter_filter_search_term(search_text)]\n        if search_text\n        else []\n    )\n\n    if not isinstance(entity_type, list):\n        entity_type = [entity_type]\n\n    if additional_filters_ls:\n        if not isinstance(additional_filters_ls, list):\n            additional_filters_ls = [additional_filters_ls]\n\n        filters_ls += additional_filters_ls\n\n    return {\n        \"entities\": entity_type,\n        \"filters\": filters_ls or [],\n        \"combineResults\": combineResults,\n        \"query\": \"*\",\n        \"count\": limit,\n        \"offset\": offset,\n    }\n\n\nsource\n\n\n\ngenerate_search_datacenter_body\n\n generate_search_datacenter_body (search_text:str=None,\n                                  entity_type:Union[str,list]='DATASET',\n                                  additional_filters_ls:list[dict]=None,\n                                  combineResults:bool=True, limit:int=100,\n                                  offset:int=0)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsearch_text\nstr\nNone\n\n\n\nentity_type\ntyping.Union[str, list]\nDATASET\n\n\n\nadditional_filters_ls\nlist\nNone\ncan accept one entity_type or a list of entity_types\n\n\ncombineResults\nbool\nTrue\n\n\n\nlimit\nint\n100\n\n\n\noffset\nint\n0\n\n\n\n\n\nsample implementation of generate_search_datacenter_body\n\n# from pprint import pprint\n\nsample_search_body = generate_search_datacenter_body(\n    search_text=\"hello world\",\n    entity_type=Datacenter_Enum.DATAFLOW.value,\n    additional_filters_ls=[Dataflow_Type_Filter_Enum.MAGICV2.value],\n)\n\npprint(sample_search_body)\n\n{'combineResults': True,\n 'count': 100,\n 'entities': ['DATAFLOW'],\n 'filters': [{'field': 'name_sort',\n              'filterType': 'wildcard',\n              'query': 'hello world'},\n             {'field': 'data_flow_type',\n              'filterType': 'term',\n              'name': 'Magic ETL v2',\n              'not': False,\n              'value': 'MAGIC'}],\n 'offset': 0,\n 'query': '*'}\n\n\n\nsource\n\n\n\ngenerate_search_datacenter_account_body\n\n generate_search_datacenter_account_body (search_str:str,\n                                          is_exact_match:bool=True)\n\n\nsource\n\n\nsearch_datacenter\n\n search_datacenter (auth:domolibrary.client.DomoAuth.DomoAuth,\n                    maximum:int=None, body:dict=None, search_text=None,\n                    entity_type:Union[str,list]='dataset',\n                    additional_filters_ls=None, arr_fn:&lt;built-\n                    infunctioncallable&gt;=None,\n                    session:httpx.AsyncClient=None, debug_api:bool=False,\n                    debug_loop:bool=False, parent_class:str=None,\n                    debug_num_stacks_to_drop:int=1)\n\n\nsource\n\n\nSearchDatacenter_NoResultsFound\n\n SearchDatacenter_NoResultsFound (body, domo_instance,\n                                  parent_class:str=None,\n                                  function_name:str=None)\n\nbase exception\n\nsample implementation of generate_search body and search datacenter\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nadditional_filters_ls = [\n    generate_search_datacenter_filter(\"dataprovidername_facet\", \"Jupyter Data\")\n]\n\n\nres = await search_datacenter(\n    auth=token_auth,\n    search_text=\"*kb*\",\n    entity_type=Datacenter_Enum.DATASET.value,\n    additional_filters_ls=additional_filters_ls,\n    # debug_api = False,\n    # maximum = 10\n)\n\npd.DataFrame(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nentityType\ndatabaseId\nsearchId\ncreateDate\nlastModified\nlastIndexed\nhighlightedFields\nlanguage\nrequestAccess\nscore\n...\npdpEnabled\nused\nowners\nownersLocalized\ncloudName\ncloudId\nsystemTagFields\nwinnerText\nownedByType\ncustomer\n\n\n\n\n0\ndataset\n04c1574e-c8be-4721-9846-c6ffa491144b\n{'indexName': None, 'databaseId': '04c1574e-c8...\n1668379680000\n1711213033000\n1711214568803\n{}\nEnglish\nFalse\n11.0\n...\nTrue\nFalse\n[{'id': '1893952720', 'type': 'USER', 'display...\n{'localizedMessage': 'Jae Wilson1', 'count': 1}\nDomo\ndomo\n[system_tags]\ndomo_kbs\nUSER\nmmmm-0012-0200\n\n\n\n\n1 rows × 47 columns\n\n\n\n\n\nsource\n\n\n\nget_connectors\n\n get_connectors (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 search_text=None, session:httpx.AsyncClient=None,\n                 debug_api:bool=False, debug_num_stacks_to_drop=1,\n                 parent_class:str=None, additional_filters_ls=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_connectors(\n    search_text=\"Snowflake\",\n    auth=token_auth,\n    # debug_api = True\n)\n\npd.DataFrame(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nentityType\ndatabaseId\nsearchId\ncreateDate\nlastModified\nlastIndexed\nhighlightedFields\nlanguage\nrequestAccess\nscore\n...\ndataSources\nisPublic\nconnectorFAQS\nproducer\nwritebackEnabled\npublisherName\nentitySubType\npopularity\nwinnerText\ncustomer\n\n\n\n\n0\nconnector\ncom.domo.connector.snowflakekeypairauthentication\n{'indexName': None, 'databaseId': 'com.domo.co...\n1678334924000\n1679930031000\n1684445280850\n{}\nEnglish\nFalse\n5.899358\n...\n[Snowflake Key Pair Authentication Connector]\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake Key Pair Authentication Connector\nGlobalSearchCustomer\n\n\n1\nconnector\ncom.domo.connector.snowflake.partition\n{'indexName': None, 'databaseId': 'com.domo.co...\n1697670637000\n1698679611000\n1698679804352\n{}\nEnglish\nFalse\n5.899402\n...\n[Snowflake Partition Connector]\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake Partition Connector\nGlobalSearchCustomer\n\n\n2\nconnector\ncom.domo.connector.snowflakeunload\n{'indexName': None, 'databaseId': 'com.domo.co...\n1675666872000\n1677512937000\n1684445226753\n{}\nEnglish\nFalse\n5.905539\n...\n[Snowflake Unload Connector]\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake Unload Connector\nGlobalSearchCustomer\n\n\n3\nconnector\ncom.domo.connector.snowflake.oauth\n{'indexName': None, 'databaseId': 'com.domo.co...\n1678740065000\n1678807828000\n1684445229683\n{}\nEnglish\nFalse\n5.905539\n...\n[Snowflake OAuth Connector]\nTrue\n[{'connectorQuestion': 'I am receiving an erro...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake OAuth Connector\nGlobalSearchCustomer\n\n\n4\nconnector\ncom.domo.connector.snowflake\n{'indexName': None, 'databaseId': 'com.domo.co...\n1701256649000\n1702565247000\n1702565490869\n{}\nEnglish\nFalse\n5.899315\n...\n[Snowflake Connector]\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake Connector\nGlobalSearchCustomer\n\n\n5\nconnector\ncom.domo.connector.snowflake.internal.unload.a...\n{'indexName': None, 'databaseId': 'com.domo.co...\n1704314707000\n1710366075000\n1710366315122\n{}\nEnglish\nFalse\n5.899402\n...\n[Snowflake High Bandwidth With Advanced Partit...\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake High Bandwidth With Advanced Partiti...\nGlobalSearchCustomer\n\n\n6\nconnector\ncom.domo.connector.snowflakewritebacktile\n{'indexName': None, 'databaseId': 'com.domo.co...\n1596211480000\n1596211490000\n1684445233070\n{}\nEnglish\nFalse\n5.905337\n...\n[Snowflake Writeback Connector]\nTrue\n[{'connectorQuestion': 'When should I use this...\ndomo\nFalse\ndomo\nConnector\n0\nSnowflake Writeback Connector\nGlobalSearchCustomer\n\n\n\n\n7 rows × 29 columns\n\n\n\n\n\nsource\n\n\nget_lineage_upstream\n\n get_lineage_upstream (auth:domolibrary.client.DomoAuth.DomoAuth,\n                       entity_type:str, entity_id:str,\n                       session:httpx.AsyncClient=None,\n                       debug_api:bool=False, parent_class:str=None,\n                       debug_num_stacks_to_drop=1)\n\n\nsample implementation of get_lineage_upstream\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_lineage_upstream(\n    auth=token_auth, entity_type=Datacenter_Enum.DATAFLOW.value, entity_id=4\n)\n\n# pd.DataFrame([obj for obj in res.response.values()])\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'DATA_SOURCE45a7a24e-c738-44f9-9019-00d5a33613ae': {'type': 'DATA_SOURCE',\n  'id': '45a7a24e-c738-44f9-9019-00d5a33613ae',\n  'descendantCounts': {},\n  'ancestorCounts': {'DATA_SOURCE': 2, 'DATAFLOW': 2},\n  'complete': True,\n  'children': [{'type': 'DATAFLOW',\n    'id': '4',\n    'complete': True,\n    'children': [],\n    'parents': []}],\n  'parents': [{'type': 'DATAFLOW',\n    'id': '3',\n    'complete': True,\n    'children': [],\n    'parents': []}]},\n 'DATAFLOW4': {'type': 'DATAFLOW',\n  'id': '4',\n  'descendantCounts': {},\n  'ancestorCounts': {'DATA_SOURCE': 3, 'DATAFLOW': 2},\n  'complete': True,\n  'children': [],\n  'parents': [{'type': 'DATA_SOURCE',\n    'id': '45a7a24e-c738-44f9-9019-00d5a33613ae',\n    'complete': True,\n    'children': [],\n    'parents': []}]},\n 'DATA_SOURCE0647a9ed-1a8e-420e-bd66-34f313a18595': {'type': 'DATA_SOURCE',\n  'id': '0647a9ed-1a8e-420e-bd66-34f313a18595',\n  'descendantCounts': {},\n  'ancestorCounts': {'DATA_SOURCE': 1, 'DATAFLOW': 1},\n  'complete': True,\n  'children': [{'type': 'DATAFLOW',\n    'id': '3',\n    'complete': True,\n    'children': [],\n    'parents': []}],\n  'parents': [{'type': 'DATAFLOW',\n    'id': '2',\n    'complete': True,\n    'children': [],\n    'parents': []}]},\n 'DATAFLOW2': {'type': 'DATAFLOW',\n  'id': '2',\n  'descendantCounts': {},\n  'ancestorCounts': {'DATA_SOURCE': 1},\n  'complete': True,\n  'children': [{'type': 'DATA_SOURCE',\n    'id': '0647a9ed-1a8e-420e-bd66-34f313a18595',\n    'complete': True,\n    'children': [],\n    'parents': []}],\n  'parents': [{'type': 'DATA_SOURCE',\n    'id': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n    'complete': True,\n    'children': [],\n    'parents': []}]},\n 'DATA_SOURCE241025d7-3cca-4369-b7c0-b3264277c0e1': {'type': 'DATA_SOURCE',\n  'id': '241025d7-3cca-4369-b7c0-b3264277c0e1',\n  'descendantCounts': {},\n  'ancestorCounts': {},\n  'complete': True,\n  'children': [{'type': 'DATAFLOW',\n    'id': '2',\n    'complete': True,\n    'children': [],\n    'parents': []}],\n  'parents': []},\n 'DATAFLOW3': {'type': 'DATAFLOW',\n  'id': '3',\n  'descendantCounts': {},\n  'ancestorCounts': {'DATA_SOURCE': 2, 'DATAFLOW': 1},\n  'complete': True,\n  'children': [{'type': 'DATA_SOURCE',\n    'id': '45a7a24e-c738-44f9-9019-00d5a33613ae',\n    'complete': True,\n    'children': [],\n    'parents': []}],\n  'parents': [{'type': 'DATA_SOURCE',\n    'id': '0647a9ed-1a8e-420e-bd66-34f313a18595',\n    'complete': True,\n    'children': [],\n    'parents': []}]}}\n\n\n\nsource\n\n\n\nshare_resource\n\n share_resource (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 resource_ids:list,\n                 resource_type:__main__.ShareResource_Enum,\n                 group_ids:list=None, user_ids:list=None,\n                 message:str=None, debug_api:bool=False,\n                 session:httpx.AsyncClient=None, parent_class:str=None,\n                 debug_num_stacks_to_drop=1)\n\nshares page or card with users or groups\nbody format: { “resources”: [ { “type”: “page”, “id”: {oage_id} } ], “recipients”: [ { “type”: “group”, “id”: “{group_id}” } ], “message”: “I thought you might find this page interesting.” }\n\nsource\n\n\nShareResource_Enum\n\n ShareResource_Enum (value, names=None, module=None, qualname=None,\n                     type=None, start=1)\n\nAn enumeration.\n\nsample implementation of share_content\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait share_resource(\n    auth=token_auth,\n    resource_ids=[1601825647],\n    resource_type=ShareResource_Enum.CARD,\n    group_ids=[1324037627],\n    message=None,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='badge 1601825647 successfully shared with 1324037627', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Datacenter Routes"
    ]
  },
  {
    "objectID": "routes/account.html",
    "href": "routes/account.html",
    "title": "Account Routes",
    "section": "",
    "text": "Account Route Error Types\n\nsource\n\nShareAccount_Error_AlreadyShared\n\n ShareAccount_Error_AlreadyShared (account_id, response, domo_instance,\n                                   function_name, parent_class=None,\n                                   status=None)\n\nbase exception\n\nsource\n\n\nShareAccount_Error\n\n ShareAccount_Error (account_id, response, domo_instance, function_name,\n                     parent_class=None, status=None)\n\nbase exception\n\nsource\n\n\nUpdateAccount_Error\n\n UpdateAccount_Error (status, response, account_id, domo_instance,\n                      info=None, function_name:str=None,\n                      parent_class:str=None)\n\nbase exception\n\nsource\n\n\nCreateAccount_Error\n\n CreateAccount_Error (status, response, account_id, domo_instance,\n                      info=None, function_name:str=None,\n                      parent_class:str=None)\n\nbase exception\n\n\n\nRetrieval Routes\n\nsample implementation of get_accounts\n\nsource\n\n\nget_accounts\n\n get_accounts (auth:domolibrary.client.DomoAuth.DomoAuth,\n               debug_api:bool=False, debug_num_stacks_to_drop=1,\n               parent_class:str=None, session:httpx.AsyncClient=None)\n\nretrieve a list of all the accounts the user has read access to. Note users with “Manage all accounts” will retrieve all account objects\n\n# import pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait get_accounts(auth=token_auth)\n# pd.DataFrame(res.response)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response=[{'id': 1, 'userId': 1893952720, 'name': 'DataSet Copy Account', 'displayName': 'dsa - northshore', 'type': 'data', 'valid': True, 'dataProviderType': 'dataset-copy', 'credentialsType': 'fields', 'createdAt': 1589100087000, 'createdBy': 1893952720, 'modifiedAt': 1698071224000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 1, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 27, 'userId': 1893952720, 'name': 'DataSet Copy Account', 'displayName': 'DataSet Copy Account', 'type': 'data', 'valid': True, 'dataProviderType': 'domo-csv', 'credentialsType': 'fields', 'createdAt': 1619083568000, 'createdBy': 1893952720, 'modifiedAt': 1619083568000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 27, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 45, 'userId': 1893952720, 'name': 'onyxReporting@gmail.com', 'displayName': 'test-goolesheets', 'type': 'data', 'valid': True, 'dataProviderType': 'google-spreadsheets', 'credentialsType': 'oauth', 'createdAt': 1664924354000, 'createdBy': 1893952720, 'modifiedAt': 1682350828000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 45, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 70, 'userId': 1893952720, 'name': 'jaemyong.wilson@sony.com', 'displayName': 'jaemyong.wilson@sony.com', 'type': 'data', 'valid': True, 'dataProviderType': 'google-spreadsheets', 'credentialsType': 'oauth', 'createdAt': 1682511651000, 'createdBy': 1893952720, 'modifiedAt': 1682511651000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 70, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 71, 'userId': 1893952720, 'name': 'domo_creds', 'displayName': 'domolibrary test account - updated 2024-03-23', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1684447092000, 'createdBy': 1893952720, 'modifiedAt': 1711218386000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 71, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 87, 'userId': 1893952720, 'name': 'Abstract Credential Store Account', 'displayName': 'jw_creds', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1701447776000, 'createdBy': 1893952720, 'modifiedAt': 1702658176000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 87, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 88, 'userId': 1893952720, 'name': 'fake_account', 'displayName': 'fake_account', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1701707519000, 'createdBy': 1893952720, 'modifiedAt': 1701707519000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 88, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 91, 'userId': 1893952720, 'name': 'JSON Account', 'displayName': 'JSON Account', 'type': 'data', 'valid': True, 'dataProviderType': 'json5', 'credentialsType': 'fields', 'createdAt': 1707328700000, 'createdBy': 1893952720, 'modifiedAt': 1707328700000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 91, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 92, 'userId': 1893952720, 'name': 'jw_username_password_auth', 'displayName': 'jw_username_password_auth', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1708624824000, 'createdBy': 1893952720, 'modifiedAt': 1708624824000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 92, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 94, 'userId': 1893952720, 'name': 'Abstract Credential Store Account', 'displayName': 'my_domo_community_access_token - updated 2024-02-23', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1708657701000, 'createdBy': 1893952720, 'modifiedAt': 1708657701000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 94, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, {'id': 96, 'userId': 1893952720, 'name': 'Domo Access Token Account', 'displayName': 'Domo Access Token Account', 'type': 'data', 'valid': True, 'dataProviderType': 'domo-access-token', 'credentialsType': 'fields', 'createdAt': 1708992534000, 'createdBy': 1893952720, 'modifiedAt': 1708992534000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 96, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}], is_success=True, parent_class=None)\n\n\n\nsource\n\n\nDeleteAccount_Error\n\n DeleteAccount_Error (entity_id, domo_instance, status, message,\n                      function_name=None, parent_class=None)\n\nbase exception\n\nsource\n\n\nGetAccount_NoConfigRetrieved\n\n GetAccount_NoConfigRetrieved (account_id, domo_instance, status=None,\n                               function_name=None, parent_class=None)\n\nbase exception\n\nsource\n\n\nGetAccount_NoMatch\n\n GetAccount_NoMatch (domo_instance, account_id=None, status=None,\n                     function_name=None, parent_class=None, message=None)\n\nbase exception\n\nsource\n\n\nget_account_from_id\n\n get_account_from_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      account_id:int, debug_api:bool=False,\n                      debug_num_stacks_to_drop:int=1,\n                      parent_class:str=None,\n                      session:httpx.AsyncClient=None)\n\nretrieves metadata about an account\n\nsample implementation of get_account_from_id\n\n# import pandas as pd\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_account_from_id(auth=token_auth, account_id=71)\npd.DataFrame([res.response])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\nuserId\nname\ndisplayName\ntype\nvalid\ndataProviderType\ncredentialsType\ncreatedAt\ncreatedBy\nmodifiedAt\nmodifiedBy\nconfigurations\naccountId\naccountTemplateId\naccountTemplateAuthorizationId\n\n\n\n\n0\n71\n1893952720\ndomo_creds\ndomolibrary test account - updated 2024-03-23\ndata\nTrue\nabstract-credential-store\nfields\n1684447092000\n1893952720\n1711218386000\n1893952720\n{}\n71\nNone\nNone\n\n\n\n\n\n\n\n\n\n\n\n\nAccount Config\n\nsource\n\nget_account_config\n\n get_account_config (auth:domolibrary.client.DomoAuth.DomoAuth,\n                     account_id:int, data_provider_type:str,\n                     return_raw:bool=False, debug_api:bool=False,\n                     debug_num_stacks_to_drop:int=1,\n                     parent_class:str=None,\n                     session:Optional[httpx.AsyncClient]=None)\n\n\nsample implementation of get_account_config\nexample with uses OAuth\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_account_from_id(\n    auth=token_auth,\n    account_id=45,\n    debug_api=False,\n)\n\ndata_provider_type = res.response[\"dataProviderType\"]\n\nres = await get_account_config(\n    auth=token_auth,\n    data_provider_type=data_provider_type,\n    account_id=45,\n    debug_api=False,\n    return_raw=False,\n)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'_search_metadata': {'account_id': 45,\n  'data_provider_type': 'google-spreadsheets'}}\n\n\nstandard config response\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_account_from_id(\n    auth=token_auth,\n    account_id=45,\n    debug_api=False,\n)\n\ndata_provider_type = res.response[\"dataProviderType\"]\n\nawait get_account_config(\n    auth=token_auth,\n    account_id=45,\n    data_provider_type=data_provider_type,\n    debug_api=False,\n    return_raw=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'_search_metadata': {'account_id': 45, 'data_provider_type': 'google-spreadsheets'}}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nget_user_access\n\n get_user_access (auth:domolibrary.client.DomoAuth.DomoAuth,\n                  account_id:int, return_raw:bool=False,\n                  debug_api:bool=False, debug_num_stacks_to_drop:int=1,\n                  parent_class:str=None,\n                  session:Optional[httpx.AsyncClient]=None)\n\n\n\n\nCRUD Routes\n\nsource\n\nupdate_account_config\n\n update_account_config (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        account_id:int, config_body:dict,\n                        debug_api:bool=False,\n                        debug_num_stacks_to_drop:int=1,\n                        parent_class:str=None,\n                        session:httpx.AsyncClient=None)\n\n\nsample implementation of update_account\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    res = await update_account_config(\n        auth=token_auth,\n        account_id=71,\n        config_body={\"credentials\": \"abc123\"},\n        debug_api=False,\n    )\n    print(res)\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nResponseGetData(status=200, response={'id': 71, 'userId': 1893952720, 'name': 'domo_creds', 'displayName': 'domolibrary test account - updated 2024-03-23', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1684447092000, 'createdBy': 1893952720, 'modifiedAt': 1711218386000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 71, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nupdate_account_name\n\n update_account_name (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      account_id:int, account_name:str,\n                      debug_api:bool=False,\n                      debug_num_stacks_to_drop:int=1,\n                      parent_class:str=None,\n                      session:httpx.AsyncClient=None)\n\n\nsample implementation of update_account_name\n\n# import datetime as dt\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    res = await update_account_name(\n        auth=token_auth,\n        account_id=71,\n        account_name=f\"domolibrary test account - updated {dt.date.today()}\",\n        debug_api=False,\n    )\n    print(res)\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nResponseGetData(status=200, response={'id': 71, 'userId': 1893952720, 'name': 'domo_creds', 'displayName': 'domolibrary test account - updated 2024-03-23', 'type': 'data', 'valid': True, 'dataProviderType': 'abstract-credential-store', 'credentialsType': 'fields', 'createdAt': 1684447092000, 'createdBy': 1893952720, 'modifiedAt': 1711220426000, 'modifiedBy': 1893952720, 'configurations': {}, 'accountId': 71, 'accountTemplateId': None, 'accountTemplateAuthorizationId': None}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\ncreate_account\n\n create_account (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 config_body:dict, debug_api:bool=False,\n                 session:httpx.AsyncClient=None, parent_class:str=None,\n                 debug_num_stacks_to_drop=1)\n\n\nsource\n\n\ngenerate_create_body\n\n generate_create_body (account_name, config)\n\n\nsource\n\n\ndelete_account\n\n delete_account (auth:domolibrary.client.DomoAuth.DomoAuth,\n                 account_id:str, debug_api:bool=False,\n                 debug_num_stacks_to_drop=1, parent_class:str=None,\n                 session:httpx.AsyncClient=None)\n\n\n\n\nAccount Sharing\n\nsource\n\ngenerate_share_account_payload_v2\n\n generate_share_account_payload_v2 (access_level:__main__.ShareAccount,\n                                    user_id:int=None, group_id:int=None)\n\n\nsource\n\n\ngenerate_share_account_payload_v1\n\n generate_share_account_payload_v1 (access_level:__main__.ShareAccount,\n                                    user_id:int=None)\n\n\nsource\n\n\nShareAccount_V2_AccessLevel\n\n ShareAccount_V2_AccessLevel (value, names=None, module=None,\n                              qualname=None, type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\nShareAccount_V1_AccessLevel\n\n ShareAccount_V1_AccessLevel (value, names=None, module=None,\n                              qualname=None, type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\nShareAccount\n\n ShareAccount ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nprint(\n    generate_share_account_payload_v1(\n        user_id=1, access_level=ShareAccount_V1_AccessLevel.CAN_VIEW\n    )\n)\nprint(\n    generate_share_account_payload_v2(\n        user_id=1, access_level=ShareAccount_V2_AccessLevel.CAN_VIEW\n    )\n)\n\n{'type': 'USER', 'id': 1, 'permissions': ['READ']}\n{'type': 'USER', 'id': 1, 'accessLevel': 'CAN_VIEW'}\n\n\n\nsource\n\n\nshare_account_v2\n\n share_account_v2 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   account_id:str, share_payload:dict,\n                   debug_api:bool=False, parent_class:str=None,\n                   debug_num_stacks_to_drop=1,\n                   session:httpx.AsyncClient=None)\n\n\nsource\n\n\nget_account_accesslist\n\n get_account_accesslist (auth:domolibrary.client.DomoAuth.DomoAuth,\n                         account_id:str, debug_api:bool=False,\n                         debug_num_stacks_to_drop:int=1,\n                         parent_class:str=None,\n                         session:httpx.AsyncClient=None)\n\n\nsample implementation of get_account_accesslist\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait get_account_accesslist(auth=token_auth, account_id=71)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'list': [{'type': 'USER', 'id': '55874022', 'accessLevel': 'CAN_VIEW', 'name': 'Grant Smith'}, {'type': 'USER', 'id': '1893952720', 'accessLevel': 'OWNER', 'name': 'Jae Wilson1'}], 'totalUserCount': 2}, is_success=True, parent_class=None)\n\n\n\nsource\n\n\n\nshare_account_v1\n\n share_account_v1 (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   account_id:str, share_payload:dict,\n                   debug_api:bool=False, debug_num_stacks_to_drop:int=1,\n                   parent_class:str=None, session:httpx.AsyncClient=None)\n\nV1 API allows sharing with users ONLY, the original implementation does not support sharing with groups and has a more limited set of share rights (owner or read)",
    "crumbs": [
      "Blog",
      "Routes",
      "Account Routes"
    ]
  },
  {
    "objectID": "routes/application.html",
    "href": "routes/application.html",
    "title": "Application Routes",
    "section": "",
    "text": "source\n\nget_applications\n\n get_applications (auth:domolibrary.client.DomoAuth.DomoAuth,\n                   session:Optional[httpx.AsyncClient]=None,\n                   debug_api:bool=False, parent_class:str=None,\n                   debug_num_stacks_to_drop=1)\n\n\nsource\n\n\nApplicationError_NoneRetrieved\n\n ApplicationError_NoneRetrieved (domo_instance, application_id=None,\n                                 application_name=None, parent_class=None,\n                                 function_name=None, job_id=None)\n\nbase exception\n\nsample implementation of get_applications\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await get_applications(auth=token_auth)\npd.DataFrame(res.response)[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\napplicationId\ncustomerId\nname\ndescription\nversion\nexecutionClass\nverifyOwnership\nstrictValidation\nimageLocation\nauthorities\ninternalAuthorities\ncreated\nupdated\nresources\nk8s\n\n\n\n\n0\n25a97e0c-df6b-11eb-ba80-0242ac130004\nmmmm-0012-0200\nToolkit: PDP Automation\nPDP Automation\n1.0.102_1\ncom.domo.executor.pdp.PDPAutomationApplication\nFalse\nTrue\n972900829293.dkr.ecr.us-east-1.amazonaws.com/e...\n[pipeline.executor.job.create, dataset.manage]\n[]\n1665079183000\n1705595224000\n{'requests': {'memory': '3G', 'missingMemoryVa...\nTrue\n\n\n1\n4ddbf5d7-6441-4eb3-b5aa-97707cae2d2b\nmmmm-0012-0200\nToolkit: Schema Management\nSchema Management\n1.0.25_3\ncom.domo.executor.schema.SchemaManagement\nFalse\nTrue\n972900829293.dkr.ecr.us-east-1.amazonaws.com/e...\n[pipeline.executor.job.create, dataset.admin]\n[]\n1665079188000\n1701972110000\n{'requests': {'memory': '2G', 'missingMemoryVa...\nTrue\n\n\n2\ne37a6942-9c0f-485a-8288-4fe95e10b23d\nmmmm-0012-0200\nToolkit: DataSet S3 Backup\nDataSet S3 Backup\n1.0.7_2\ncom.domo.executor.backup.DataSetBackupExecutor\nFalse\nTrue\n972900829293.dkr.ecr.us-east-1.amazonaws.com/e...\n[dataset.admin, search.allentities.query]\n[service.internal]\n1665079176000\n1701972066000\n{'requests': {'memory': '3G', 'missingMemoryVa...\nTrue\n\n\n3\nb52f3c80-2642-4dcb-b874-b327326021b0\nmmmm-0012-0200\nToolkit: User Automation\nToolkit: User Automation\n1.80_1\ncom.domo.executor.userautomation.UserAutomatio...\nFalse\nTrue\n972900829293.dkr.ecr.us-east-1.amazonaws.com/e...\n[pipeline.executor.job.create, dataset.manage,...\n[]\n1665079192000\n1707433871000\n{'requests': {'memory': '3G', 'missingMemoryVa...\nTrue\n\n\n4\n2f6573a5-97d8-4e27-b0fd-3c0f2313a3c8\nmmmm-0012-0200\nToolkit: Group Management\nGroup Management\n1.0.43_2\ncom.domo.executor.automation.GroupAutomationEx...\nFalse\nTrue\n972900829293.dkr.ecr.us-east-1.amazonaws.com/e...\n[pipeline.executor.job.create, dataset.admin, ...\n[]\n1665079181000\n1701972084000\n{'requests': {'memory': '1G', 'missingMemoryVa...\nTrue\n\n\n\n\n\n\n\n\n\nsource\n\n\n\nget_application_by_id\n\n get_application_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        application_id:str,\n                        session:Optional[httpx.AsyncClient]=None,\n                        debug_api:bool=False, parent_class:str=None,\n                        debug_num_stacks_to_drop:int=1)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nres = await get_applications(auth=token_auth)\napplication = next(\n    (app for app in res.response if app[\"name\"] == \"Toolkit: DataSet Tag Automation\")\n)\n\nres = await get_application_by_id(\n    application_id=application[\"applicationId\"], auth=token_auth\n)\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'applicationId': 'a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4',\n 'customerId': 'mmmm-0012-0200',\n 'name': 'Toolkit: DataSet Tag Automation',\n 'description': 'DataSet Tag Automation',\n 'version': '1.0.35_2',\n 'executionClass': 'com.domo.executor.tags.ResourceTagApplication',\n 'verifyOwnership': False,\n 'strictValidation': True,\n 'imageLocation': '972900829293.dkr.ecr.us-east-1.amazonaws.com/executor/resourcetag-automation:1.0.35_master',\n 'authorities': ['dataflow.admin',\n  'dataset.admin',\n  'search.allentities.query'],\n 'internalAuthorities': [],\n 'created': 1665079179000,\n 'updated': 1701972075000,\n 'resources': {'requests': {'memory': '3G', 'missingMemoryValue': False},\n  'limits': {'memory': '3G', 'missingMemoryValue': False},\n  'missingMemoryRequestValue': False,\n  'missingMemoryLimitValue': False},\n 'k8s': True}\n\n\n\n\nJobs\n\nsource\n\nget_application_jobs\n\n get_application_jobs (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                       application_id:str, parent_class:str=None,\n                       debug_api:bool=False, debug_num_stacks_to_drop=2,\n                       session:Optional[httpx.AsyncClient]=None)\n\n\nsource\n\n\nApplicationError_NoJobRetrieved\n\n ApplicationError_NoJobRetrieved (domo_instance, application_id=None,\n                                  parent_class=None, function_name=None)\n\nbase exception\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nres = await get_applications(auth=token_auth)\napplication = next(\n    (app for app in res.response if app[\"name\"] == \"Toolkit: DataSet Tag Automation\")\n)\n\nres = await get_application_jobs(\n    application_id=application[\"applicationId\"], auth=token_auth\n)\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[{'jobId': '743c1c6f-80d5-4b47-b02e-0ea28f6a5683',\n  'applicationId': 'a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4',\n  'customerId': 'mmmm-0012-0200',\n  'jobName': 'tag_inactive_owners',\n  'jobDescription': 't',\n  'userId': 1893952720,\n  'executionTimeout': 1440,\n  'jobStatus': 'idle',\n  'executionPayload': {'emails': ['jae@onyxreporting.com'],\n   'resourceTypes': ['datasource'],\n   'tagFilter': [],\n   'ownerFilter': [],\n   'typeFilter': [],\n   'domain': None,\n   'taggingPolicies': ['ownerInactive'],\n   'metricsDatasetId': '29a3417d-1543-46a3-abd1-cbe84f257fb5'},\n  'executionResponse': {},\n  'shareState': {'sharedEntities': [{'id': '1893952720',\n     'type': 'USER',\n     'accessLevel': 'OWNER'}]},\n  'accounts': [],\n  'executionClass': 'com.domo.executor.tags.ResourceTagApplication',\n  'created': 1708539691000,\n  'updated': 1708980137000,\n  'statusChanged': 1711216210000,\n  'triggers': [],\n  'compressPayload': False}]\n\n\n\nsource\n\n\nget_application_job_by_id\n\n get_application_job_by_id (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                            application_id:str, job_id:str,\n                            parent_class:str=None, debug_api:bool=False,\n                            debug_num_stacks_to_drop=2,\n                            session:Optional[httpx.AsyncClient]=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\napplication_id = \"a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4\"\n\nres = await get_application_jobs(application_id=application_id, auth=token_auth)\n\njob_id = res.response[0][\"jobId\"]\n\nres = await get_application_job_by_id(\n    auth=token_auth, application_id=application_id, job_id=job_id, debug_api=False\n)\n\nres.response\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'jobId': '743c1c6f-80d5-4b47-b02e-0ea28f6a5683',\n 'applicationId': 'a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4',\n 'customerId': 'mmmm-0012-0200',\n 'jobName': 'tag_inactive_owners',\n 'jobDescription': 't',\n 'userId': 1893952720,\n 'executionTimeout': 1440,\n 'jobStatus': 'idle',\n 'executionPayload': {'emails': ['jae@onyxreporting.com'],\n  'resourceTypes': ['datasource'],\n  'tagFilter': [],\n  'ownerFilter': [],\n  'typeFilter': [],\n  'domain': None,\n  'taggingPolicies': ['ownerInactive'],\n  'metricsDatasetId': '29a3417d-1543-46a3-abd1-cbe84f257fb5'},\n 'executionResponse': {},\n 'executionState': {},\n 'shareState': {'sharedEntities': [{'id': '1893952720',\n    'type': 'USER',\n    'accessLevel': 'OWNER'}]},\n 'accounts': [],\n 'executionClass': 'com.domo.executor.tags.ResourceTagApplication',\n 'created': 1708539691000,\n 'updated': 1708980137000,\n 'statusChanged': 1711216210000,\n 'triggers': [],\n 'compressPayload': False}\n\n\n\n\n\nJob Configs for Applications\n\nsource\n\ngenerate_body_watchdog_generic\n\n generate_body_watchdog_generic (job_name:str, notify_user_ids_ls:list,\n                                 notify_group_ids_ls:list,\n                                 notify_emails_ls:list,\n                                 log_dataset_id:str, schedule_ls:list,\n                                 watchdog_parameter_body:dict,\n                                 execution_timeout=1440,\n                                 debug_api:bool=False)\n\n\nsource\n\n\ngenerate_remote_domostats\n\n generate_remote_domostats (target_instance:str, report_dict:dict,\n                            output_dataset_id:str, account_id:str,\n                            schedule_ls:list, execution_timeout:int=1440,\n                            debug_api:bool=False)\n\n\nsource\n\n\nupdate_application_job_trigger\n\n update_application_job_trigger\n                                 (auth:domolibrary.client.DomoAuth.DomoFul\n                                 lAuth, body:dict, job_id:str,\n                                 trigger_id:str, application_id:str,\n                                 debug_num_stacks_to_drop=1,\n                                 parent_class:str=None,\n                                 session:Optional[httpx.AsyncClient]=None,\n                                 debug_api:bool=False)\n\n\nsource\n\n\nupdate_application_job\n\n update_application_job (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                         body:dict, job_id:str, application_id:str,\n                         debug_num_stacks_to_drop=1,\n                         parent_class:str=None,\n                         session:Optional[httpx.AsyncClient]=None,\n                         debug_api:bool=False)\n\n\nsource\n\n\ncreate_application_job\n\n create_application_job (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                         body:dict, application_id:str,\n                         debug_api:bool=False, debug_num_stacks_to_drop=2,\n                         parent_class:str=None,\n                         session:Optional[httpx.AsyncClient]=None)\n\n\nsource\n\n\nCRUD_ApplicationJob_Error\n\n CRUD_ApplicationJob_Error (domo_instance, application_id, message,\n                            parent_class, function_name)\n\nbase exception\n\nsource\n\n\nexecute_application_job\n\n execute_application_job (auth:domolibrary.client.DomoAuth.DomoAuth,\n                          application_id, job_id, debug_api:bool=False,\n                          debug_num_stacks_to_drop=1,\n                          parent_class:str=None,\n                          session:httpx.AsyncClient=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nres = await get_applications(auth=token_auth)\napplication_id = next(\n    (\n        app[\"applicationId\"]\n        for app in res.response\n        if app[\"name\"] == \"Toolkit: DataSet Tag Automation\"\n    )\n)\n\nres = await get_application_jobs(application_id=application_id, auth=token_auth)\njob_id = next((job[\"jobId\"] for job in res.response))\n\njob_id\n\nawait execute_application_job(\n    auth=token_auth, application_id=application_id, job_id=job_id\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'requestedBy': 1893952720, 'queuedJobs': [{'jobId': '743c1c6f-80d5-4b47-b02e-0ea28f6a5683', 'applicationId': 'a99c3fd8-a0f6-4d06-9a1d-74f3d12293d4', 'executionId': '7b8ba4d6-f803-4d98-94d5-570be0c68c68', 'customerId': 'mmmm-0012-0200', 'jobName': 'tag_inactive_owners', 'jobDescription': 't', 'userId': 1893952720, 'executionTimeout': 1440, 'jobStatus': 'idle', 'executionPayload': {'emails': ['jae@onyxreporting.com'], 'resourceTypes': ['datasource'], 'tagFilter': [], 'ownerFilter': [], 'typeFilter': [], 'domain': None, 'taggingPolicies': ['ownerInactive'], 'metricsDatasetId': '29a3417d-1543-46a3-abd1-cbe84f257fb5'}, 'executionResponse': {}, 'accounts': [], 'executionClass': 'com.domo.executor.tags.ResourceTagApplication', 'created': 1708539691000, 'updated': 1708980137000, 'statusChanged': 1711216210000, 'triggers': [], 'compressPayload': False}]}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Routes",
      "Application Routes"
    ]
  },
  {
    "objectID": "classes/domostream.html",
    "href": "classes/domostream.html",
    "title": "Stream",
    "section": "",
    "text": "A stream refers to how data gets into Domo BUT does not necessarily refer to streaming data / low latency data ingest. In this context it is more accurate to think of a stream as a path for data to travel down to get into Domo’s data storage environment Vault (Amazon S3)\n\nsource\n\nDomoStream\n\n DomoStream (id:str, dataset_id:str, transport_description:str,\n             transport_version:int, update_method:str,\n             data_provider_name:str, data_provider_key:str,\n             account_id:str=None, account_display_name:str=None,\n             account_userid:str=None,\n             configuration:list[__main__.StreamConfig]=&lt;factory&gt;,\n             configuration_tables:list[str]=&lt;factory&gt;,\n             configuration_query:str=None)\n\n\nsource\n\n\nStreamConfig\n\n StreamConfig (name:str, type:str, value:str, value_clean:str=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\nres = await dmds.DomoDataset.get_from_id(\n    auth=token_auth, dataset_id=\"6cb4d6fe-c1f1-454d-a947-409b3257c5e9\"\n)\n\nprint(res.stream_id)\n\nres = await DomoStream.get_stream_by_id(auth=token_auth, stream_id=res.stream_id)\nprint(res.configuration)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n1045\n[StreamConfig(name='cloud', type='string', value='domo', value_clean=None), StreamConfig(name='fileName', type='string', value='area_codes.csv', value_clean=None), StreamConfig(name='_description_', type='string', value='', value_clean=None)]",
    "crumbs": [
      "Blog",
      "Classes",
      "Stream"
    ]
  },
  {
    "objectID": "classes/domogroup.html",
    "href": "classes/domogroup.html",
    "title": "Group",
    "section": "",
    "text": "source\n\n\n\n DomoGroup (auth:domolibrary.client.DomoAuth.DomoAuth=None, id:str=None,\n            name:str=None, type:str=None, description:str=None,\n            members_id_ls:list[str]=&lt;factory&gt;,\n            owner_id_ls:list[str]=&lt;factory&gt;,\n            members_ls:list[dict]=&lt;factory&gt;,\n            owner_ls:list[dict]=&lt;factory&gt;,\n            custom_attributes:dict=&lt;factory&gt;)\n\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\n\nres = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id, return_raw=False)\n\nres\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoGroup(id=2146122228, name='test_DO_NOT_DELETE', type='closed', description='updated via upsert_group on 2024-03-23', custom_attributes={})\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_name = \"Test Group 2q32\"\n\ntry:\n    res = await DomoGroup.search_by_name(group_name=group_name, auth=token_auth)\n    print(res)\n\nexcept SearchGroups_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  SearchGroups_Error 🛑 - function: search_groups_by_name || status 200 || There is no exact match for Test Group 2q32 at domo-community\n\n\n\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup = DomoGroup(id=1781661643, auth=token_auth)\n\nawait group.Membership.get_owners()\n\nprint(group.owner_id_ls)  # does not differentiate between users and groups\n\ngroup.owner_ls\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n['1781661643', '822382906', '1893952720']\n\n\n[DomoGroup(id=1781661643, name='TestMembership', type='open', description='group with membership', custom_attributes={}),\n DomoGroup(id=822382906, name='Grant: Manage all groups', type='system', description='Create, edit and delete any groups. Add and remove people from any group.', custom_attributes={}),\n DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup = DomoGroup(id=1781661643, auth=token_auth)\n\nawait group.Membership.get_members()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='696468809', display_name='Abish Srinath', email_address='abish.srinath@domo.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1345737456', display_name='Aditya Jain', email_address='jain_aditya95@yahoo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1141078945', display_name='Justin Pumford', email_address='jpumford@gmail.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nnew_membership = await dmu.DomoUsers.by_id(\n    user_ids=[1141078945, 1833256765], auth=token_auth, only_allow_one=False\n)\nawait domo_group.Membership.add_members(add_user_ls=new_membership, debug_prn=False)\n\nfor user in new_membership:\n    if user in domo_group.members_ls:\n        print(f\"user {user.id} - {user.display_name} successfully added\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094\nuser 1833256765 - Aaron Schofield successfully added\nuser 1141078945 - Justin Pumford successfully added\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nremove_membership = await dmu.DomoUsers.by_id(\n    user_ids=[1542225148], auth=token_auth, only_allow_one=False\n)\nawait domo_group.Membership.remove_members(\n    remove_user_ls=remove_membership, debug_prn=False\n)\n\nfor user in remove_membership:\n    if user not in domo_group.members_ls:\n        print(f\"user {user.id} - {user.display_name} successfully removed\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094, 1833256765\nuser 1542225148 - Adam Landefeld successfully removed\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nset_membership = await dmu.DomoUsers.by_id(\n    user_ids=[\n        1141078945,\n        1542225148,\n        1725780094,\n    ],\n    auth=token_auth,\n    only_allow_one=False,\n)\nawait domo_group.Membership.set_members(user_ls=set_membership, debug_prn=False)\n\ntest_members = set_membership\nfor member in domo_group.members_ls:\n    if member not in test_members:\n        test_members.append(member)\n\nfor user in test_members:\n    if user not in set_membership:\n        print(f\"user {user.id} - {user.display_name} does not belong\")\n\n    if user in set_membership:\n        print(f\"user {user.id} - {user.display_name} belongs\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094, 1833256765\nuser 1542225148 - Adam Landefeld belongs\nuser 1725780094 - Brett Gibson belongs\nuser 1141078945 - Justin Pumford belongs\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\n\nmembership = [\n    dmu.DomoUser(id=1141078945, auth=token_auth),\n    dmu.DomoUser(id=1725780094, auth=token_auth),\n]\n\n\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(f\"validate membership {', '.join([str(id) for id in domo_group.members_id_ls])}\")\n\n# await domo_group.Membership.get_members()\n\nawait domo_group.Membership.set_members(user_ls=membership, debug_prn=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate membership 1141078945, 1542225148, 1725780094\n\n\n[DomoUser(id='1725780094', display_name='Brett Gibson', email_address='Brett.Gibson@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1141078945', display_name='Justin Pumford', email_address='jpumford@gmail.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\nawait domo_group.Membership.get_owners()\n\nprint(f\"validate old ownership {', '.join([str(id) for id in domo_group.owner_id_ls])}\")\n\n\nnew_ownership_user = await dmu.DomoUsers.by_id(\n    user_ids=[1345408759], auth=token_auth, only_allow_one=False\n)\nnew_ownership_group = await DomoGroup.get_by_id(group_id=1028365465, auth=token_auth)\nnew_ownership = new_ownership_user + [new_ownership_group]\n\ntry:\n    await domo_group.Membership.add_owners(add_owner_ls=new_ownership, debug_prn=False)\n\n    for user in new_ownership:\n        if user in domo_group.owner_ls:\n            if isinstance(user, dmu.DomoUser):\n                print(f\"user {user.id} - {user.display_name} successfully added\")\n            if isinstance(user, DomoGroup):\n                print(f\"user {user.id} - {user.name} successfully added\")\n                \nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership 1028365465, 822382906\n🛑  UpdateGroupMembership 🛑 - function: unable to add Team Alpha to test_DO_NOT_DELETE at domo-community\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(f\"validate old ownership {', '.join([str(id) for id in domo_group.owner_id_ls])}\")\n\nremove_owner = await dmu.DomoUsers.by_id(\n    user_ids=[797235532], auth=token_auth, only_allow_one=False\n)\n\nawait domo_group.Membership.remove_owners(remove_owner_ls=remove_owner, debug_prn=False)\n\n\nfor user in remove_owner:\n    if user not in domo_group.owner_ls:\n        print(f\"user {user.id} - {user.display_name} successfully removed\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership \nuser 797235532 - Teddy Murphy successfully removed\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old ownership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nset_ownership_user = await dmu.DomoUsers.by_id(\n    user_ids=[797235532], auth=token_auth, only_allow_one=False\n)\nset_ownership_group = await ce.gather_with_concurrency(\n    n=60,\n    *[\n        DomoGroup.get_by_id(group_id=group_id, auth=token_auth)\n        for group_id in [1028365465, 822382906]\n    ],\n)\nset_ownership = set_ownership_user + set_ownership_group\n\ntry:\n    await domo_group.Membership.set_owners(owner_ls=set_ownership, debug_prn=False)\n\n    test_owners = set_ownership\n    for owner in domo_group.owner_ls:\n        if owner not in test_owners:\n            test_owners.append(owner)\n\n    for owner in test_owners:\n        if owner not in set_ownership:\n            print(\n                f\"{type(owner).__name__} {owner.id} - {getattr(owner, 'display_name', None) or getattr(owner, 'name', None)} does not belong\"\n            )\n\n        if user in set_ownership:\n            print(\n                f\"{type(owner).__name__} {owner.id} - {getattr(owner, 'display_name', None) or getattr(owner, 'name', None)} belongs\"\n            )\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership 1141078945, 1725780094\n🛑  UpdateGroupMembership 🛑 - function: unable to add Team Alpha to test_DO_NOT_DELETE at domo-community",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#get-methods",
    "href": "classes/domogroup.html#get-methods",
    "title": "Group",
    "section": "",
    "text": "token_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\n\nres = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id, return_raw=False)\n\nres\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoGroup(id=2146122228, name='test_DO_NOT_DELETE', type='closed', description='updated via upsert_group on 2024-03-23', custom_attributes={})\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_name = \"Test Group 2q32\"\n\ntry:\n    res = await DomoGroup.search_by_name(group_name=group_name, auth=token_auth)\n    print(res)\n\nexcept SearchGroups_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  SearchGroups_Error 🛑 - function: search_groups_by_name || status 200 || There is no exact match for Test Group 2q32 at domo-community",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#get-methods-1",
    "href": "classes/domogroup.html#get-methods-1",
    "title": "Group",
    "section": "",
    "text": "token_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup = DomoGroup(id=1781661643, auth=token_auth)\n\nawait group.Membership.get_owners()\n\nprint(group.owner_id_ls)  # does not differentiate between users and groups\n\ngroup.owner_ls\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n['1781661643', '822382906', '1893952720']\n\n\n[DomoGroup(id=1781661643, name='TestMembership', type='open', description='group with membership', custom_attributes={}),\n DomoGroup(id=822382906, name='Grant: Manage all groups', type='system', description='Create, edit and delete any groups. Add and remove people from any group.', custom_attributes={}),\n DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup = DomoGroup(id=1781661643, auth=token_auth)\n\nawait group.Membership.get_members()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='696468809', display_name='Abish Srinath', email_address='abish.srinath@domo.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1345737456', display_name='Aditya Jain', email_address='jain_aditya95@yahoo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1141078945', display_name='Justin Pumford', email_address='jpumford@gmail.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#crud-methods",
    "href": "classes/domogroup.html#crud-methods",
    "title": "Group",
    "section": "",
    "text": "token_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nnew_membership = await dmu.DomoUsers.by_id(\n    user_ids=[1141078945, 1833256765], auth=token_auth, only_allow_one=False\n)\nawait domo_group.Membership.add_members(add_user_ls=new_membership, debug_prn=False)\n\nfor user in new_membership:\n    if user in domo_group.members_ls:\n        print(f\"user {user.id} - {user.display_name} successfully added\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094\nuser 1833256765 - Aaron Schofield successfully added\nuser 1141078945 - Justin Pumford successfully added\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nremove_membership = await dmu.DomoUsers.by_id(\n    user_ids=[1542225148], auth=token_auth, only_allow_one=False\n)\nawait domo_group.Membership.remove_members(\n    remove_user_ls=remove_membership, debug_prn=False\n)\n\nfor user in remove_membership:\n    if user not in domo_group.members_ls:\n        print(f\"user {user.id} - {user.display_name} successfully removed\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094, 1833256765\nuser 1542225148 - Adam Landefeld successfully removed\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old membership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nset_membership = await dmu.DomoUsers.by_id(\n    user_ids=[\n        1141078945,\n        1542225148,\n        1725780094,\n    ],\n    auth=token_auth,\n    only_allow_one=False,\n)\nawait domo_group.Membership.set_members(user_ls=set_membership, debug_prn=False)\n\ntest_members = set_membership\nfor member in domo_group.members_ls:\n    if member not in test_members:\n        test_members.append(member)\n\nfor user in test_members:\n    if user not in set_membership:\n        print(f\"user {user.id} - {user.display_name} does not belong\")\n\n    if user in set_membership:\n        print(f\"user {user.id} - {user.display_name} belongs\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old membership 1141078945, 1725780094, 1833256765\nuser 1542225148 - Adam Landefeld belongs\nuser 1725780094 - Brett Gibson belongs\nuser 1141078945 - Justin Pumford belongs\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\n\nmembership = [\n    dmu.DomoUser(id=1141078945, auth=token_auth),\n    dmu.DomoUser(id=1725780094, auth=token_auth),\n]\n\n\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(f\"validate membership {', '.join([str(id) for id in domo_group.members_id_ls])}\")\n\n# await domo_group.Membership.get_members()\n\nawait domo_group.Membership.set_members(user_ls=membership, debug_prn=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate membership 1141078945, 1542225148, 1725780094\n\n\n[DomoUser(id='1725780094', display_name='Brett Gibson', email_address='Brett.Gibson@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1141078945', display_name='Justin Pumford', email_address='jpumford@gmail.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\nawait domo_group.Membership.get_owners()\n\nprint(f\"validate old ownership {', '.join([str(id) for id in domo_group.owner_id_ls])}\")\n\n\nnew_ownership_user = await dmu.DomoUsers.by_id(\n    user_ids=[1345408759], auth=token_auth, only_allow_one=False\n)\nnew_ownership_group = await DomoGroup.get_by_id(group_id=1028365465, auth=token_auth)\nnew_ownership = new_ownership_user + [new_ownership_group]\n\ntry:\n    await domo_group.Membership.add_owners(add_owner_ls=new_ownership, debug_prn=False)\n\n    for user in new_ownership:\n        if user in domo_group.owner_ls:\n            if isinstance(user, dmu.DomoUser):\n                print(f\"user {user.id} - {user.display_name} successfully added\")\n            if isinstance(user, DomoGroup):\n                print(f\"user {user.id} - {user.name} successfully added\")\n                \nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership 1028365465, 822382906\n🛑  UpdateGroupMembership 🛑 - function: unable to add Team Alpha to test_DO_NOT_DELETE at domo-community\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(f\"validate old ownership {', '.join([str(id) for id in domo_group.owner_id_ls])}\")\n\nremove_owner = await dmu.DomoUsers.by_id(\n    user_ids=[797235532], auth=token_auth, only_allow_one=False\n)\n\nawait domo_group.Membership.remove_owners(remove_owner_ls=remove_owner, debug_prn=False)\n\n\nfor user in remove_owner:\n    if user not in domo_group.owner_ls:\n        print(f\"user {user.id} - {user.display_name} successfully removed\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership \nuser 797235532 - Teddy Murphy successfully removed\n\n\n\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ngroup_id = 2146122228\ndomo_group = await DomoGroup.get_by_id(auth=token_auth, group_id=group_id)\n\nprint(\n    f\"validate old ownership {', '.join([str(id) for id in domo_group.members_id_ls])}\"\n)\n\n\nset_ownership_user = await dmu.DomoUsers.by_id(\n    user_ids=[797235532], auth=token_auth, only_allow_one=False\n)\nset_ownership_group = await ce.gather_with_concurrency(\n    n=60,\n    *[\n        DomoGroup.get_by_id(group_id=group_id, auth=token_auth)\n        for group_id in [1028365465, 822382906]\n    ],\n)\nset_ownership = set_ownership_user + set_ownership_group\n\ntry:\n    await domo_group.Membership.set_owners(owner_ls=set_ownership, debug_prn=False)\n\n    test_owners = set_ownership\n    for owner in domo_group.owner_ls:\n        if owner not in test_owners:\n            test_owners.append(owner)\n\n    for owner in test_owners:\n        if owner not in set_ownership:\n            print(\n                f\"{type(owner).__name__} {owner.id} - {getattr(owner, 'display_name', None) or getattr(owner, 'name', None)} does not belong\"\n            )\n\n        if user in set_ownership:\n            print(\n                f\"{type(owner).__name__} {owner.id} - {getattr(owner, 'display_name', None) or getattr(owner, 'name', None)} belongs\"\n            )\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nvalidate old ownership 1141078945, 1725780094\n🛑  UpdateGroupMembership 🛑 - function: unable to add Team Alpha to test_DO_NOT_DELETE at domo-community",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#update-metadata",
    "href": "classes/domogroup.html#update-metadata",
    "title": "Group",
    "section": "update metadata",
    "text": "update metadata\n\nsample update_metadata\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = 2146122228\n\ndescription = f\"update metadata - updated {dt.date.today()}\"\n\ndomo_group = await DomoGroup.get_by_id(group_id=group_id, auth=token_auth)\n\nawait domo_group.update_metadata(description=description, return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoGroup(id=2146122228, name='test_DO_NOT_DELETE', type='closed', description='update metadata - updated 2024-03-23', custom_attributes={})\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_id = \"1513712315\"\n\ndomo_group = await DomoGroup.get_by_id(group_id=group_id, auth=token_auth)\n\ntry:\n    await domo_group.update_metadata(\n        auth=token_auth,\n        # group_name=\"Test Group ABCs\",\n        group_type=\"open\",\n        description=f\"updated via API on {dt.date.today()}\",\n        debug_api=False,\n    )\n\nexcept Group_CRUD_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  Group_CRUD_Error 🛑 - function: DomoGroup.update_group || status 400 || probably cannot change group_type to 'open' from current type 'closed' consider passing `addtional_parameters` at domo-community",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#upsert-groups",
    "href": "classes/domogroup.html#upsert-groups",
    "title": "Group",
    "section": "Upsert Groups",
    "text": "Upsert Groups\n\nsample upsert\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngroup_name = \"test_DO_NOT_DELETE\"\ndescription = f\"updated via upsert_group on {dt.date.today()}\"\n\nawait DomoGroup.upsert(\n    group_name=group_name, auth=token_auth, description=description, debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoGroup(id=2146122228, name='test_DO_NOT_DELETE', type='closed', description='updated via upsert_group on 2024-03-23', custom_attributes={})",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domogroup.html#delete-account",
    "href": "classes/domogroup.html#delete-account",
    "title": "Group",
    "section": "delete account",
    "text": "delete account\n\nsource\n\nDomoGroup.delete\n\n DomoGroup.delete (debug_api:bool=False, debug_num_stacks_to_drop=2,\n                   session:httpx.AsyncClient=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    domo_group = await DomoGroup.upsert(\n        auth=token_auth,\n        group_name=\"hello world\",\n        description=f\"updated via API on {dt.date.today()}\",\n    )\n\n    await domo_group.delete(debug_api=False)\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  SearchGroups_Error 🛑 - function: search_groups_by_name || status 200 || There is no exact match for hello world at domo-community\ntoggling group visiblity in domo-community show system groups",
    "crumbs": [
      "Blog",
      "Classes",
      "Group"
    ]
  },
  {
    "objectID": "classes/domorole.html",
    "href": "classes/domorole.html",
    "title": "Role",
    "section": "",
    "text": "source",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#handle-role-grants",
    "href": "classes/domorole.html#handle-role-grants",
    "title": "Role",
    "section": "Handle Role Grants",
    "text": "Handle Role Grants\n\nsample implementation of get_role_grants\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_role = DomoRole(auth=token_auth, id=1)\n\nres = await domo_role.get_grants(return_raw=False)\nres[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoGrant(id='versions.deployment.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='ai.model.create', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='buzz.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='goal.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='dataflow.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)]\n\n\n\nsource\n\n\nSetRoleGrants_MissingGrants\n\n SetRoleGrants_MissingGrants (role_id, missing_grants:List[str],\n                              domo_instance)\n\nbase exception\n\nsample implementation of set_grants\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_role = DomoRole(id=104295428, auth=token_auth)\n\nrole_grant_ls = [\n    \"cloud.admin\",\n    \"versions.repository.admin\",\n    \"codeengine.package.manage\",\n    \"appstore.admin\",\n    \"datastore.admin\",\n    \"certifiedcontent.admin\",\n]\n\nawait domo_role.set_grants(grant_ls=role_grant_ls)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoGrant(id='cloud.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='versions.repository.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='codeengine.package.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='appstore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='datastore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None),\n DomoGrant(id='certifiedcontent.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)]",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#handle-role-membership",
    "href": "classes/domorole.html#handle-role-membership",
    "title": "Role",
    "section": "Handle Role Membership",
    "text": "Handle Role Membership\n\nsample implementation of get_membership\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_role = DomoRole(id=1, auth=token_auth)\n\n(await domo_role.get_membership(return_raw=False))[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='1345408759', display_name='Alexis Lorenz (DataMaven)', email_address='DataMaven42@gmail.com', role_id=1, department='Owner', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1590156374000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1102391116', display_name='Andrea Henderson', email_address='andrea.henderson@domo.com', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1095515127', display_name='Andrew Chaffin', email_address='andrew@crystalballers.ai', role_id=1, department='Crystal Ballers', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1865099622', display_name='Ben Schein', email_address='Ben.Schein@domo.com', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\nsource\n\n\nAddUser_Error\n\n AddUser_Error (role_id, domo_instance, user_id, user_name=None)\n\nbase exception\n\nsample implementation of add_user\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_user = dmu.DomoUser(id=587894148, auth=token_auth)\ndomo_role = DomoRole(id=1, auth=token_auth)\n\n(await domo_role.add_user(user=domo_user))[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='1345408759', display_name='Alexis Lorenz (DataMaven)', email_address='DataMaven42@gmail.com', role_id=1, department='Owner', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1590156374000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1102391116', display_name='Andrea Henderson', email_address='andrea.henderson@domo.com', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1095515127', display_name='Andrew Chaffin', email_address='andrew@crystalballers.ai', role_id=1, department='Crystal Ballers', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1865099622', display_name='Ben Schein', email_address='Ben.Schein@domo.com', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department='BT Partners', title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1588827600000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#handle-role-metadata",
    "href": "classes/domorole.html#handle-role-metadata",
    "title": "Role",
    "section": "Handle Role Metadata",
    "text": "Handle Role Metadata\n\nsample implementation of update_role_metadata\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# retrieve the super_admin role\nrole_res = await role_routes.get_roles(auth=token_auth)\ndomo_role = next(\n    (\n        DomoRole._from_json(role, auth=token_auth)\n        for role in role_res.response\n        if role.get(\"name\") == \"super_admin\"\n    ),\n    None,\n)\n\nawait domo_role.update_role_metadata(\n    role_description=f\"updated via domolibrary on {dt.date.today()}\", debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoRole(id=810756122, name='super_admin', description='updated via domolibrary on 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[])",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#handle-crud-role",
    "href": "classes/domorole.html#handle-crud-role",
    "title": "Role",
    "section": "handle CRUD Role",
    "text": "handle CRUD Role\n\nsource\n\nDeleteRole_Error\n\n DeleteRole_Error (role_id, domo_instance)\n\nbase exception\n\nsample implementation of delete_role\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    await DomoRole.delete_role(role_id=1019636738, auth=token_auth)\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  DeleteRole_Error 🛑 - function: role: 1019636738 not found at domo-community",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#search-and-get-roles",
    "href": "classes/domorole.html#search-and-get-roles",
    "title": "Role",
    "section": "Search and Get Roles",
    "text": "Search and Get Roles\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoRoles.get_roles(auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=True, grant_ls=[], membership_ls=[]),\n DomoRole(id=3, name='Editor', description='Can edit Cards, Pages, DataSets, and Dataflows', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=4, name='Participant', description='Read only access to Cards and Pages', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=5, name='Social', description='Access limited to social features', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=104295428, name='super_admin_v3', description='upsert via DomoLibrary', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=275763436, name='manual_super_admin', description='Full access to everything - h9', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=810756122, name='super_admin', description='updated via domolibrary on 2024-03-23', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=1563101750, name='dl_department_admin', description='deployed via domo_library script - updated 2024-03-23', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=1662852841, name='dl_test', description='deployed via domo_library script - updated 2024-03-23', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[]),\n DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[])]\n\n\n\nsource\n\nSearchRole_NotFound\n\n SearchRole_NotFound (domo_instance, role_id, message='not found',\n                      function_name='search_role')\n\nbase exception\n\nsample implementation of searhc_role\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoRoles.search_role(auth=token_auth, role_name=\"Admin\")\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[])",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domorole.html#handle-crud-roles",
    "href": "classes/domorole.html#handle-crud-roles",
    "title": "Role",
    "section": "Handle CRUD Roles",
    "text": "Handle CRUD Roles\n\nsource\n\nCreateRole_Error\n\n CreateRole_Error (domo_instance, role_id, message, status,\n                   function_name='create_role')\n\nbase exception\n\nsample implementation of create_role\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntry:\n    await DomoRoles.create_role(\n        auth=token_auth,\n        name=\"super_admin\",\n        description=\"created via DomoLibrary\",\n    )\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n'DomoTokenAuth' object has no attribute 'domo_auth'\n\n\n\n\nsample implementation of upsert_role\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ngrant_ls = [\n    \"cloud.admin\",\n    \"versions.repository.admin\",\n    \"codeengine.package.manage\",\n    \"appstore.admin\",\n    \"datastore.admin\",\n    \"certifiedcontent.admin\",\n]\n\nawait DomoRoles.upsert_role(\n    auth=token_auth,\n    name=\"super_admin_v3\",\n    description=\"upsert via DomoLibrary\",\n    grant_ls=grant_ls,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoRole(id=104295428, name='super_admin_v3', description='upsert via DomoLibrary', is_system_role=0, is_default_role=False, grant_ls=[DomoGrant(id='cloud.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='versions.repository.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='codeengine.package.manage', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='appstore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='datastore.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None), DomoGrant(id='certifiedcontent.admin', display_group=None, title=None, depends_on_ls=None, description=None, role_membership_ls=None)], membership_ls=[])\n\n\n\n# # async def get_default_role(auth, debug_api:bool = False):\n#     url = f\"https://{auth.domo_instance}.domo.com/api/content/v1/customer-states/user.roleid.default\"\n#     params = [ {'defaultValue' :2} , {'ignoreCache': True}]\n\n#     return await role_routes.set_default_role(auth=self.auth,\n#                                                 role_id=self.id,\n#                                                 debug_api=debug_api)",
    "crumbs": [
      "Blog",
      "Classes",
      "Role"
    ]
  },
  {
    "objectID": "classes/domobootstrap.html",
    "href": "classes/domobootstrap.html",
    "title": "Bootstrap",
    "section": "",
    "text": "source\n\nDomoBootstrap_Feature\n\n DomoBootstrap_Feature (id:int, name:str, label:str, type:str,\n                        purchased:bool, enabled:bool)\n\n\nsource\n\n\nDomoBootstrap\n\n DomoBootstrap (auth:domolibrary.client.DomoAuth.DomoAuth,\n                bootstrap:dict=None, customer_id:str=None,\n                page_ls:list[domolibrary.classes.DomoPage.DomoPage]=None,\n                feature_ls:list[__main__.DomoBootstrap_Feature]=None)\n\n\nsource\n\n\nDomoBootstrap.get_all\n\n DomoBootstrap.get_all\n                        (auth:domolibrary.client.DomoAuth.DomoFullAuth=Non\n                        e, debug_api:bool=False, return_raw:bool=False,\n                        debug_num_stacks_to_drop=2)\n\n\nsample implementation of get_all\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbs = DomoBootstrap(auth=full_auth)\n\nres = await bs.get_all(return_raw=True, debug_api=False)\n\nbs.bootstrap[\"data\"].keys()\n\ndict_keys(['landingPageId', 'favorites', 'pages', 'conf', 'analytics', 'brandKit', 'environmentId', 'features', 'authorities', 'customerHash', 'locale', 'isWhitelabeled', 'isCustomerWhitelabeled', 'isFullWhitelabeled', 'trialEndDate', 'trialContactPhone', 'whitelabeledProductName', 'userAnonymous', 'userIsProxied', 'domoappsDomain', 'customerTier', 'companyTimeZone', 'disableAutoRefresh', 'wasTrial', 'buzzSignup', 'authorizedAppDomains', 'isDomoAppDomainWhitelistEnabled', 'configProperties', 'domoPublicUrl', 'advancedColorControls', 'gettingStartedPageEnabled', 'landingEntities', 'isSignupSingleSolutionInstance', 'signupApp', 'cardPageMaxConcurrentRenders', 'version'])\n\n\n\n\nsample implementation of get_customer_id\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbs = DomoBootstrap(auth=full_auth)\n\nawait bs.get_customer_id(debug_api=False, return_raw=False)\n\n'mmmm-0012-0200'\n\n\n\n\nsample implementation of get_pages\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbs = DomoBootstrap(auth=full_auth)\n\npage_ls = await bs.get_pages(return_raw=False, debug_api=False)\n\npage_ls[0:5]\n\n[DomoPage(id=-100000, title='Overview', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[], cards=[], custom_attributes={}, layout={}),\n DomoPage(id=-100003, title='Favorites', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[], cards=[], custom_attributes={}, layout={}),\n DomoPage(id=-100002, title='Shared', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[], cards=[], custom_attributes={}, layout={}),\n DomoPage(id=30507758, title='Welcome', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoGroup(id=1814479647, name='Admin Test', type='closed', description='', custom_attributes={}), DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={}, layout={}),\n DomoPage(id=1267639476, title='Community Solutions', top_page_id=None, parent_page_id=None, is_locked=None, collections=[], owners=[DomoUser(id='587894148', display_name='Bryan Van Kampen', email_address='bryan@bvankampen.net', role_id=1, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)], cards=[], custom_attributes={}, layout={})]\n\n\n\n\nsample implementation of get_features\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbs = DomoBootstrap(auth=full_auth)\n\nfeature_ls = await bs.get_features(return_raw=False, debug_api=False)\n\npd.DataFrame(feature_ls[10:14])\n\n\n\n\n\n\n\n\n\nid\nname\nlabel\ntype\npurchased\nenabled\n\n\n\n\n0\n3436\nconnect-update-data\n\nPREMIUM\nTrue\nTrue\n\n\n1\n3440\nadmin-pages\n\nPREMIUM\nTrue\nTrue\n\n\n2\n3441\nadmin-slideshows\n\nPREMIUM\nTrue\nTrue\n\n\n3\n3442\nadmin-access-rights\n\nPREMIUM\nTrue\nTrue\n\n\n\n\n\n\n\n\n\n\n\nsample implementation of is_group_ownership_beta\n\n# eval: false\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\nbs = DomoBootstrap(auth=full_auth)\n\nawait bs.is_feature_accountsv2_enabled(debug_api=False)\n\nFalse",
    "crumbs": [
      "Blog",
      "Classes",
      "Bootstrap"
    ]
  },
  {
    "objectID": "classes/domocard.html",
    "href": "classes/domocard.html",
    "title": "Card",
    "section": "",
    "text": "source\n\nDomoCard\n\n DomoCard (id:str, auth:domolibrary.client.DomoAuth.DomoAuth,\n           title:str=None, description:str=None, type:str=None,\n           urn:str=None, chart_type:str=None, dataset_id:str=None,\n           certification:dict=None, owners:List[&lt;built-\n           infunctionany&gt;]=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoCard.get_by_id(card_id=1766265020, auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoCard(id=1766265020, title='Vendor Amounts Dates', description='', type='kpi', urn='1766265020', chart_type='badge_vert_stackedbar', dataset_id='fd70d83b-38dc-40a2-9349-357ec4321d3e', certification=DictDot(state='NOT_CERTIFIED', adminCertified=False), owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department='Business Improvement', title=None, avatar_key='c605f478-0cd2-4451-9fd4-d82090b71e66', phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=810756122, name='super_admin', description='updated via domolibrary on 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))])\n\n\n\nsample share_card\n\n# import domolibrary.classes.DomoGroup as dmg\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_group = await dmg.DomoGroup.get_by_id(group_id=1324037627, auth=token_auth)\ndomo_group\n\ndomo_card = DomoCard(id=1766265020, auth=token_auth)\n\nawait domo_card.share(\n    auth=token_auth,\n    domo_groups=[domo_group],\n    message=None,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response='badge 1766265020 successfully shared with 1324037627', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "Card"
    ]
  },
  {
    "objectID": "classes/domodatacenter.html",
    "href": "classes/domodatacenter.html",
    "title": "DataCenter",
    "section": "",
    "text": "source\n\nDomoDatacenter\n\n DomoDatacenter (auth:domolibrary.client.DomoAuth.DomoAuth=None)\n\nclass for quering entities in the datacenter\n\nsample implementation of search_datacenter\n\n\nsample implementation search_datasets\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nadditional_filters_ls = [\n    datacenter_routes.generate_search_datacenter_filter(\n        \"dataprovidername_facet\", \"Jupyter Data\"\n    )\n]\n\nawait DomoDatacenter.search_datasets(\n    auth=token_auth,\n    search_text=\"*kb*\",\n    additional_filters_ls=additional_filters_ls,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataset(id='04c1574e-c8be-4721-9846-c6ffa491144b', display_type='domo-jupyterdata', data_provider_type='domo-jupyterdata', name='domo_kbs', description=None, row_count=1185, column_count=7, stream_id=825, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5': {'templateId': 2664, 'id': 'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5', 'name': 'rowcount', 'formula': 'sum(1)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'variable': False}, 'calculation_38846559-d190-4ab1-809b-bcd361db5670': {'templateId': 2665, 'id': 'calculation_38846559-d190-4ab1-809b-bcd361db5670', 'name': 'max_views', 'formula': 'max(views)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': 'views', 'columnPosition': 4}], 'variable': False}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['developer_documentation', 'hackercore']), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f2b4b12c6d0&gt;)]\n\n\n\n\nsample implementation search_accounts\n\n# import domolibrary.routes.datacenter as datacenter_routes\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nadditional_filters_ls = [\n    datacenter_routes.generate_search_datacenter_filter(\n        datacenter_routes.Datacenter_Filter_Field_Enum.DATAPROVIDER.value,\n        \"Google Sheets\",\n    )\n]\n\n(await DomoDatacenter.get_accounts(\n    auth=auth,\n    # additional_filters_ls=additional_filters_ls,\n    return_raw=False,\n    debug_api=False,\n))[0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoAccount(id='50', name='**ReplicationUtility**:modocorp.domo.com', data_provider_type='dataset-copy', created_dt=datetime.datetime(2022, 10, 6, 13, 20, 34), modified_dt=datetime.datetime(2022, 10, 6, 13, 20, 34), config=None, owners=[DictDot(id='1345102715', type='USER', displayName='McWayne Mumford')], is_admin_summary=True),\n DomoAccount(id='84', name='**ReplicationUtility**:domo-ncv.domo.com', data_provider_type='dataset-copy', created_dt=datetime.datetime(2023, 11, 20, 15, 25, 42), modified_dt=datetime.datetime(2023, 11, 20, 15, 25, 42), config=None, owners=[DictDot(id='152768850', type='USER', displayName='Heath Pulham')], is_admin_summary=True),\n DomoAccount(id='45', name='onyxReporting@gmail.com', data_provider_type='google-spreadsheets', created_dt=datetime.datetime(2022, 10, 4, 16, 59, 14), modified_dt=datetime.datetime(2022, 10, 4, 16, 59, 14), config=None, owners=[DictDot(id='1893952720', type='USER', displayName='Jae Wilson')], is_admin_summary=True),\n DomoAccount(id='5', name='Domo Governance Datasets Third Party Account', data_provider_type='domo-governance-d14c2fef-49a8-4898-8ddd-f64998005600', created_dt=datetime.datetime(2021, 3, 26, 10, 54, 41), modified_dt=datetime.datetime(2021, 3, 26, 10, 54, 41), config=None, owners=[DictDot(id='1893952720', type='USER', displayName='Jae Wilson1')], is_admin_summary=True),\n DomoAccount(id='70', name='jaemyong.wilson@sony.com', data_provider_type='google-spreadsheets', created_dt=datetime.datetime(2023, 4, 26, 6, 20, 51), modified_dt=datetime.datetime(2023, 4, 26, 6, 20, 51), config=None, owners=[DictDot(id='1893952720', type='USER', displayName='Jae Wilson1')], is_admin_summary=True)]\n\n\n\n# import domolibrary.classes.DomoDataset as dmds\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataset = dmds.DomoDataset(id=\"45a7a24e-c738-44f9-9019-00d5a33613ae\")\n\nawait DomoDatacenter.get_lineage_upstream(\n    auth=auth,\n    domo_entity=domo_dataset,\n    # return_raw = True,\n    # debug_api = True\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataset(id='45a7a24e-c738-44f9-9019-00d5a33613ae', display_type='dataflow', data_provider_type='dataflow', name='sys_date', description=None, row_count=7299, column_count=9, stream_id=None, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['s_domostats', 'domoStats', 'domostats', 'c_people']), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f2b4b12d330&gt;),\n DomoDataflow(id=2, name='sys_numbers', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='51e63668-5ccd-46db-8180-554909545f38', type='GenerateTableAction', name='num', datasource_id=None, sql='SELECT\\ncast( p0.n\\n+ p1.n*2\\n+ p2.n * POWER(2,2)\\n+ p3.n * POWER(2,3)\\n+ p4.n * POWER(2,4)\\n+ p5.n * POWER(2,5)\\n+ p6.n * POWER(2,6)\\n+ p7.n * POWER(2,7)\\n+ p8.n * POWER(2,8)\\n+ p9.n * POWER(2,9)\\n+ p10.n * POWER(2,10)\\n+ p11.n * POWER(2,11) as unsigned) num\\nFROM\\n(SELECT 0 as n UNION SELECT 1) p0,\\n(SELECT 0 as n UNION SELECT 1) p1,\\n(SELECT 0 as n UNION SELECT 1) p2,\\n(SELECT 0 as n UNION SELECT 1) p3,\\n(SELECT 0 as n UNION SELECT 1) p4,\\n(SELECT 0 as n UNION SELECT 1) p5,\\n(SELECT 0 as n UNION SELECT 1) p6,\\n(SELECT 0 as n UNION SELECT 1) p7,\\n(SELECT 0 as n UNION SELECT 1) p8,\\n(SELECT 0 as n UNION SELECT 1) p9,\\n(SELECT 0 as n UNION SELECT 1) p10,\\n(SELECT 0 as n UNION SELECT 1) p11', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='fc3375d6-46ae-4ccf-b6a1-3e75f2f7388d', type='PublishToVault', name='sys_numbers', datasource_id='0647a9ed-1a8e-420e-bd66-34f313a18595', sql='select * from num', depends_on=['51e63668-5ccd-46db-8180-554909545f38'], parent_actions=[DomoDataflow_Action(id='51e63668-5ccd-46db-8180-554909545f38', type='GenerateTableAction', name='num', datasource_id=None, sql='SELECT\\ncast( p0.n\\n+ p1.n*2\\n+ p2.n * POWER(2,2)\\n+ p3.n * POWER(2,3)\\n+ p4.n * POWER(2,4)\\n+ p5.n * POWER(2,5)\\n+ p6.n * POWER(2,6)\\n+ p7.n * POWER(2,7)\\n+ p8.n * POWER(2,8)\\n+ p9.n * POWER(2,9)\\n+ p10.n * POWER(2,10)\\n+ p11.n * POWER(2,11) as unsigned) num\\nFROM\\n(SELECT 0 as n UNION SELECT 1) p0,\\n(SELECT 0 as n UNION SELECT 1) p1,\\n(SELECT 0 as n UNION SELECT 1) p2,\\n(SELECT 0 as n UNION SELECT 1) p3,\\n(SELECT 0 as n UNION SELECT 1) p4,\\n(SELECT 0 as n UNION SELECT 1) p5,\\n(SELECT 0 as n UNION SELECT 1) p6,\\n(SELECT 0 as n UNION SELECT 1) p7,\\n(SELECT 0 as n UNION SELECT 1) p8,\\n(SELECT 0 as n UNION SELECT 1) p9,\\n(SELECT 0 as n UNION SELECT 1) p10,\\n(SELECT 0 as n UNION SELECT 1) p11', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='52f1684a-cb14-44b1-8f98-e13f958f3d63', type='PublishToVault', name='sys_num_1M', datasource_id='2640b08d-e2c6-49c3-9bc4-efcb12e0a45d', sql='select \\na.num ,\\nb.num as join_num\\nfrom num a\\njoin num b\\n\\non a.num &lt;= b.`num`', depends_on=['51e63668-5ccd-46db-8180-554909545f38'], parent_actions=[DomoDataflow_Action(id='51e63668-5ccd-46db-8180-554909545f38', type='GenerateTableAction', name='num', datasource_id=None, sql='SELECT\\ncast( p0.n\\n+ p1.n*2\\n+ p2.n * POWER(2,2)\\n+ p3.n * POWER(2,3)\\n+ p4.n * POWER(2,4)\\n+ p5.n * POWER(2,5)\\n+ p6.n * POWER(2,6)\\n+ p7.n * POWER(2,7)\\n+ p8.n * POWER(2,8)\\n+ p9.n * POWER(2,9)\\n+ p10.n * POWER(2,10)\\n+ p11.n * POWER(2,11) as unsigned) num\\nFROM\\n(SELECT 0 as n UNION SELECT 1) p0,\\n(SELECT 0 as n UNION SELECT 1) p1,\\n(SELECT 0 as n UNION SELECT 1) p2,\\n(SELECT 0 as n UNION SELECT 1) p3,\\n(SELECT 0 as n UNION SELECT 1) p4,\\n(SELECT 0 as n UNION SELECT 1) p5,\\n(SELECT 0 as n UNION SELECT 1) p6,\\n(SELECT 0 as n UNION SELECT 1) p7,\\n(SELECT 0 as n UNION SELECT 1) p8,\\n(SELECT 0 as n UNION SELECT 1) p9,\\n(SELECT 0 as n UNION SELECT 1) p10,\\n(SELECT 0 as n UNION SELECT 1) p11', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None)),\n DomoDataset(id='0647a9ed-1a8e-420e-bd66-34f313a18595', display_type='dataflow', data_provider_type='dataflow', name='sys_numbers', description=None, row_count=4096, column_count=1, stream_id=None, owner={'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, formula={}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['s_domostats', 'domoStats', 'domostats', 'c_people']), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f2b48c4d7e0&gt;),\n DomoDataflow(id=3, name='sys_date', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='0647a9ed-1a8e-420e-bd66-34f313a18595', type='LoadFromVault', name='sys_numbers', datasource_id='0647a9ed-1a8e-420e-bd66-34f313a18595', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='a4b32643-76c1-426e-932c-b6adbf66bcce', type='GenerateTableAction', name='sm_date', datasource_id=None, sql='SELECT\\n\\tdate_add( CURRENT_DATE() , interval num day) as db_date\\nfrom `sys_numbers`\\nwhere num &lt; 3650\\nUNION\\nSELECT\\n\\tdate_add( CURRENT_DATE() , interval -num day)\\nfrom `sys_numbers`\\nwhere num &lt; 3650', depends_on=['0647a9ed-1a8e-420e-bd66-34f313a18595'], parent_actions=[DomoDataflow_Action(id='0647a9ed-1a8e-420e-bd66-34f313a18595', type='LoadFromVault', name='sys_numbers', datasource_id='0647a9ed-1a8e-420e-bd66-34f313a18595', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='4d9a5129-a0e6-4a2a-8530-a8ad4ae59746', type='PublishToVault', name='sys_date', datasource_id='45a7a24e-c738-44f9-9019-00d5a33613ae', sql='-- create table sys_date\\nselect\\n\\tdb_date,\\n    dayofweek(db_date) day_of_week,\\n    case when dayofweek(db_date) in (7,1) then 1 else 0 end isWeekend,\\n    date_format(db_date, \"%a\") as day,\\n    \\n    YEAR(`db_date`)*10000+MONTH(`db_date`)*100 + DAY(`db_date`) as DateValue,\\n\\t\\n\\tYEAR(`db_date`) as year,\\n\\tMONTH(`db_date` ) as month,\\n\\tYEAR(`db_date`) *100+ MONTH(`db_date`) as yearmonth,\\n\\tlast_day(`db_date` ) endOfMonth\\n   \\nFROM\\n\\t`sm_date` d', depends_on=['a4b32643-76c1-426e-932c-b6adbf66bcce'], parent_actions=[DomoDataflow_Action(id='a4b32643-76c1-426e-932c-b6adbf66bcce', type='GenerateTableAction', name='sm_date', datasource_id=None, sql='SELECT\\n\\tdate_add( CURRENT_DATE() , interval num day) as db_date\\nfrom `sys_numbers`\\nwhere num &lt; 3650\\nUNION\\nSELECT\\n\\tdate_add( CURRENT_DATE() , interval -num day)\\nfrom `sys_numbers`\\nwhere num &lt; 3650', depends_on=['0647a9ed-1a8e-420e-bd66-34f313a18595'], parent_actions=[DomoDataflow_Action(id='0647a9ed-1a8e-420e-bd66-34f313a18595', type='LoadFromVault', name='sys_numbers', datasource_id='0647a9ed-1a8e-420e-bd66-34f313a18595', sql=None, depends_on=None, parent_actions=None)])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None)),\n DomoDataset(id='241025d7-3cca-4369-b7c0-b3264277c0e1', display_type='domostats', data_provider_type='domostats', name='DomoStats - People', description=None, row_count=955, column_count=26, stream_id=306, owner={'id': '587894148', 'name': 'Bryan Van Kampen', 'type': 'USER', 'group': False}, formula={'calculation_e83e232b-be18-40f9-b5a5-e388ac53ed2d': {'templateId': 1136, 'id': 'calculation_e83e232b-be18-40f9-b5a5-e388ac53ed2d', 'name': 'Department null Handling', 'formula': \"(CASE WHEN `Department` IS NULL THEN 'Unknown' ELSE `Department` END)\", 'status': 'VALID', 'dataType': 'STRING', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Department`', 'columnPosition': 11}, {'columnName': '`Department`', 'columnPosition': 52}], 'variable': False}, 'calculation_74b07cba-f5ef-40db-8e15-6aeb83fb6a9a': {'templateId': 356, 'id': 'calculation_74b07cba-f5ef-40db-8e15-6aeb83fb6a9a', 'name': 'Last Login Greater Than 30 Days', 'formula': '-- Author: Grant Smith\\n-- Created: 2021-04-06\\n-- Last Modified: 2021-04-06\\n-- Description: Count the number of logins greater than 30 days ago\\nSUM((CASE  WHEN (DATEDIFF(CURRENT_DATE,`Last Login`) &gt; 30) THEN 1 ELSE 0 END ))', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Last Login`', 'columnPosition': 182}], 'variable': False}, 'calculation_32905031-5fc1-40ab-8f5d-12e9da088f7c': {'templateId': 1075, 'id': 'calculation_32905031-5fc1-40ab-8f5d-12e9da088f7c', 'name': 'Login Rates Last 14 Days (Merged from datasource: 241025d7-3cca-4369-b7c0-b3264277c0e1)', 'formula': '(CASE WHEN (COUNT(`User ID`) = 0) THEN 0 ELSE ((SUM((CASE WHEN (DATEDIFF(CURRENT_DATE, `Last Login`) &lt;= 14) THEN 1 ELSE 0 END)) / COUNT(`User ID`)) * 100) END)', 'status': 'VALID', 'dataType': 'DECIMAL', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`User ID`', 'columnPosition': 18}, {'columnName': '`Last Login`', 'columnPosition': 87}, {'columnName': '`User ID`', 'columnPosition': 136}], 'variable': False}, 'calculation_80a57e9e-adc2-41a7-a55b-686c144b87df': {'templateId': 1074, 'id': 'calculation_80a57e9e-adc2-41a7-a55b-686c144b87df', 'name': 'Logins Last 14 Days (Merged from datasource: 241025d7-3cca-4369-b7c0-b3264277c0e1)', 'formula': 'SUM((CASE WHEN (DATEDIFF(CURRENT_DATE, DATE(`Last Login`)) &lt;= 14) THEN 1 ELSE 0 END))', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Last Login`', 'columnPosition': 44}], 'variable': False}, 'calculation_7cb5313b-5818-4af3-b236-19298a5fa2c1': {'templateId': 1076, 'id': 'calculation_7cb5313b-5818-4af3-b236-19298a5fa2c1', 'name': 'Last Login Greater Than 30 Days (Merged from datasource: 241025d7-3cca-4369-b7c0-b3264277c0e1)', 'formula': 'SUM((CASE WHEN (DATEDIFF(CURRENT_DATE, `Last Login`) &gt; 30) THEN 1 ELSE 0 END))', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Last Login`', 'columnPosition': 39}], 'variable': False}, 'calculation_e9fd6ca3-8384-4f5c-9047-f06dfb59225b': {'templateId': 364, 'id': 'calculation_e9fd6ca3-8384-4f5c-9047-f06dfb59225b', 'name': 'Distinct Users', 'formula': '-- Author: Grant Smith\\n-- Created: 2021-04-06\\n-- Last Modified: 2021-04-06\\n-- Description: Count the unique number of users\\nCOUNT(DISTINCT `User ID`)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`User ID`', 'columnPosition': 139}], 'variable': False}, 'calculation_a5592105-4c5b-4540-83eb-b0453be17694': {'templateId': 1135, 'id': 'calculation_a5592105-4c5b-4540-83eb-b0453be17694', 'name': 'AVG Users per Department', 'formula': \"(CASE WHEN (COUNT(DISTINCT (CASE WHEN `Department` IS NULL THEN 'Unknown' ELSE `Department` END)) = 0) THEN 0 ELSE (COUNT(`User ID`) / COUNT(DISTINCT (CASE WHEN `Department` IS NULL THEN 'Unknown' ELSE `Department` END))) END)\", 'status': 'VALID', 'dataType': 'DECIMAL', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Department`', 'columnPosition': 38}, {'columnName': '`Department`', 'columnPosition': 79}, {'columnName': '`User ID`', 'columnPosition': 122}, {'columnName': '`Department`', 'columnPosition': 161}, {'columnName': '`Department`', 'columnPosition': 202}], 'variable': False}, 'calculation_df9deb86-0c9b-4044-ad87-66fc089404f4': {'templateId': 354, 'id': 'calculation_df9deb86-0c9b-4044-ad87-66fc089404f4', 'name': 'Login Rates Last 14 Days', 'formula': '-- Author: Grant Smith\\n-- Created: 2021-04-06\\n-- Last Modified: 2021-04-06\\n-- Description: Determine the percentage of users who logged in over the past 14 days\\n(CASE  WHEN (COUNT(`User ID`) = 0) THEN 0 ELSE ((SUM((CASE  WHEN (DATEDIFF(CURRENT_DATE,`Last Login`) &lt;= 14) THEN 1 ELSE 0 END )) / COUNT(`User ID`)) * 100) END )', 'status': 'VALID', 'dataType': 'DECIMAL', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`User ID`', 'columnPosition': 180}, {'columnName': '`Last Login`', 'columnPosition': 249}, {'columnName': '`User ID`', 'columnPosition': 299}], 'variable': False}, 'calculation_96f39efa-d108-4ab8-a4a6-07e826c05484': {'templateId': 355, 'id': 'calculation_96f39efa-d108-4ab8-a4a6-07e826c05484', 'name': 'Logins Last 14 Days', 'formula': '-- Author: Grant Smith\\n-- Created: 2021-04-06\\n-- Last Modified: 2021-04-06\\n-- Description: Count the number of logins over the last 14 days\\nSUM((CASE  WHEN (DATEDIFF(CURRENT_DATE,DATE(`Last Login`)) &lt;= 14) THEN 1 ELSE 0 END ))', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': '`Last Login`', 'columnPosition': 184}], 'variable': False}, 'calculation_910a2e31-a188-4a7d-a11c-c7d89595194c': {'templateId': 1134, 'id': 'calculation_910a2e31-a188-4a7d-a11c-c7d89595194c', 'name': 'Last Login Date', 'formula': 'DATE(`Last Login`)', 'status': 'VALID', 'dataType': 'DATE', 'persistedOnDataSource': True, 'isAggregatable': False, 'bignumber': False, 'columnPositions': [{'columnName': '`Last Login`', 'columnPosition': 5}], 'variable': False}}, schema=DomoDataset_Schema(dataset=..., columns=[]), tags=DomoDataset_Tags(dataset=..., tag_ls=['s_domostats', 'domoStats', 'um_REPLACE', 'udt_DAY at 4:55 PM', 'domostats', 'c_people']), certification=None, PDP=&lt;domolibrary.classes.DomoPDP.Dataset_PDP_Policies object at 0x7f2b4b12dc30&gt;)]\n\n\n\n# from domolibrary.routes.datacenter import (\n#     generate_search_datacenter_filter,\n#     Datacenter_Filter_Field_Enum,\n#     Datacenter_Filter_Field_Certification_Enum,\n# )\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nadditional_filters_ls = [\n    generate_search_datacenter_filter(\n        field=Datacenter_Filter_Field_Enum.CERTIFICATION.value,\n        value=Datacenter_Filter_Field_Certification_Enum.CERTIFIED.value,\n    )\n]\n\nprint(additional_filters_ls)\n\nawait DomoDatacenter.search_cards(\n    auth=auth,\n    additional_filters_ls=additional_filters_ls,\n    maximum=5,\n    # return_raw = True,\n    # debug_api = True\n)\n\n[{'filterType': 'term', 'field': 'certification.state', 'value': 'CERTIFIED', 'not': False}]\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoCard(id=1036070144, title='Salesforce', description=None, type='kpi', urn='1036070144', chart_type='badge_pie', dataset_id='fff33fa8-bc96-4754-92ad-5a2f8789717f', certification=DictDot(state='CERTIFIED', lastUpdated=1705541792599, userId='1734948150', processType='DEPARTMENT', approvalRequestId='37bb5013-8939-4cc7-9e46-ad2299832040', processName='MajorDomo - TB', adminCertified=False), owners=[DomoUser(id='1734948150', display_name='Thomas Bruno', email_address='Thomas.Bruno@elevancehealth.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1693394557, title='gov_datasetEfficiency', description='', type='kpi', urn='1693394557', chart_type='badge_basic_table', dataset_id='4fc29727-43a4-47ad-94a0-d0021dad8f40', certification=DictDot(state='CERTIFIED', lastUpdated=1690401760016, userId='1893952720', processType='COMPANY', approvalRequestId='80573acf-7877-44b1-b995-2e9b869a936d', processName='Company', adminCertified=False), owners=[DomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department='Business Improvement', title=None, avatar_key='c605f478-0cd2-4451-9fd4-d82090b71e66', phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=810756122, name='super_admin', description='updated via domolibrary on 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))])]\n\n\n\nauth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoDatacenter.get_cards_admin_summary(\n    auth=auth,\n    # return_raw = True,\n    maximum=5,\n    # debug_api = True\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoCard(id=332819959, title=' Forecast-Sales_MG', description=None, type='kpi', urn=None, chart_type=None, dataset_id=None, certification=None, owners=[DomoUser(id='722128535', display_name='Miguel Guedes', email_address='Miguel.guedes@cgi.com', role_id=2, department=None, title=None, avatar_key='ef7c051e-2b2f-4ad4-844b-bf348853beb6', phone_number='+351913017621', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1582016299, title=\" Incorrect Append - Forecast Column Header Names Don't Match\", description=None, type='document', urn=None, chart_type=None, dataset_id=None, certification=None, owners=[DomoUser(id='583215149', display_name='John Jarnagin', email_address='John.Jarnagin@domo.com', role_id=1, department='Domo Customer EX Group', title='Sr. Customer Experience Eng.', avatar_key='e49e4908-c99e-47b5-a337-7f2e5a0b58d7', phone_number='', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=1680757200000, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1, name='Admin', description='Full access to everything', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=231472916, title='# Active Users', description=None, type='kpi', urn=None, chart_type=None, dataset_id=None, certification=None, owners=[DomoUser(id='1251168784', display_name='Andre Wieczorkiewicz', email_address='andre@clearinsight.fr', role_id=2, department='', title='', avatar_key='6a279915-a5ed-40b9-a1cb-13841f82e885', phone_number='+33663472589', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=1025952623, title='# Active Users', description=None, type='kpi', urn=None, chart_type=None, dataset_id=None, certification=None, owners=[DomoUser(id='1251168784', display_name='Andre Wieczorkiewicz', email_address='andre@clearinsight.fr', role_id=2, department='', title='', avatar_key='6a279915-a5ed-40b9-a1cb-13841f82e885', phone_number='+33663472589', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))]),\n DomoCard(id=391084879, title='# Active Users Today', description=None, type='kpi', urn=None, chart_type=None, dataset_id=None, certification=None, owners=[DomoUser(id='1251168784', display_name='Andre Wieczorkiewicz', email_address='andre@clearinsight.fr', role_id=2, department='', title='', avatar_key='6a279915-a5ed-40b9-a1cb-13841f82e885', phone_number='+33663472589', web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2, name='Privileged', description='Full access except for editing users and settings owners', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))])]",
    "crumbs": [
      "Blog",
      "Classes",
      "DataCenter"
    ]
  },
  {
    "objectID": "classes/domopdp.html",
    "href": "classes/domopdp.html",
    "title": "PDP",
    "section": "",
    "text": "The PDP class is an example of how domolibrary uses composition. PDP is a feature of Datasets; however to segment classes, PDP was written as a separate class. In a future sprint the naming of this class may be modified for clarity.\n\nPDP Policy Parameter\n\nsource\n\n\nPDP_Parameter\n\n PDP_Parameter (column_name:str, column_values_ls:list,\n                operator:str='EQUALS', ignore_case:bool=True,\n                type:str='COLUMN')\n\n\nsource\n\n\nPDP_Parameter.generate_body_from_parameter\n\n PDP_Parameter.generate_body_from_parameter ()\n\n\nsource\n\n\nPDP_Parameter.generate_parameter_simple\n\n PDP_Parameter.generate_parameter_simple (obj)\n\n\nparam = PDP_Parameter(column_name=\"instance\", column_values_ls=[\"domo-community\"])\n\nPDP_Parameter.generate_body_from_parameter(param)\n\n{'type': 'COLUMN',\n 'name': 'instance',\n 'values': ['domo-community'],\n 'operator': 'EQUALS',\n 'ignoreCase': True}\n\n\n\n\nPDP Policy\n\nsource\n\n\nPDP_Policy\n\n PDP_Policy (dataset_id:str, filter_group_id:str, name:str,\n             parameters_ls:list[dict], user_ls:list[str],\n             group_ls:list[str], virtual_user_ls:list[str])\n\n\n# #| export\n# @patch_to(PDP_Policy)\n# def add_parameter(self: PDP_Policy, parameter_obj):\n#     self.parameters.concat(parameter_obj)\n\n\n\nDataset PDP Policies\n\nsource\n\n\nDataset_PDP_Policies\n\n Dataset_PDP_Policies (dataset)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nGet PDP Policies from dataset\n\n\nsample implementation of get_policies\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n# instantiate dataset class\ndataset = dmd.DomoDataset(auth=token_auth, id=os.environ[\"DOJO_DATASET_ID\"])\n# instantiate dataset_pdp_policies\ndataset_pdp_policies = Dataset_PDP_Policies(dataset=dataset)\n# get policies\nawait dataset_pdp_policies.get_policies(return_raw=False)\n\n\n# print(dataset.id)\n# for res in res.response:\n#     print(res['resources'])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[PDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=797, name='All Rows', parameters_ls=None, user_ls=None, group_ls=None, virtual_user_ls=['vu:0ed4455a-35df-4049-8d6d-80341083b2f4', 'vu:566d15dc-9600-48af-b5ad-89cd0ea00cb7', 'vu:a8841f70-909a-438e-9853-49783846bf22', 'vu:ed6853bb-d8c7-4777-be41-0af475fde7ba', 'vu:20e30033-edb3-44f0-a121-5ccf5f8161bc']),\n PDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=1149, name='Test Update Policy Name', parameters_ls=[DictDot(name='objectID', value='000003007', values=['000003007'], type='COLUMN', operator='EQUALS', not=False, ignoreCase=True)], user_ls=[DomoUser(id='308783524', display_name='test1', email_address='test1@test.com', role_id=1563101750, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=1563101750, name='dl_department_admin', description='deployed via domo_library script - updated 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))], group_ls=None, virtual_user_ls=['fc:e3ce6205-6717-42b4-ba1c-16b5e40eca98']),\n PDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=1224, name='t2', parameters_ls=[DictDot(name='Title', value='AWS Cost and Usage Dashboard', values=['AWS Cost and Usage Dashboard'], type='COLUMN', operator='EQUALS', not=False, ignoreCase=False)], user_ls=[DomoUser(id='663516735', display_name='test 3', email_address='test33@test.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=810756122, name='super_admin', description='last updated - 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[])), DomoUser(id='1681443709', display_name='test 3 - updated 2024-03-23', email_address='test3@test.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=810756122, name='super_admin', description='last updated - 2024-03-23', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))], group_ls=[DomoGroup(id=1513712315, name='Test Group', type='closed', description='updated via API on 2024-01-02', custom_attributes={})], virtual_user_ls=None),\n PDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=1225, name='t3s', parameters_ls=[DictDot(name='Title', value='Accessing Goals Data', values=['Accessing Goals Data'], type='COLUMN', operator='EQUALS', not=False, ignoreCase=False)], user_ls=[DomoUser(id='987822803', display_name='test_pdp2@sony.com - via dl 2023-05-05', email_address='test_pdp2@sony.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[])), DomoUser(id='838842812', display_name='test_pdp3@sony.com - via dl 2023-05-05', email_address='test_pdp3@sony.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[])), DomoUser(id='1186995515', display_name='test_pdp1@sony.com - via dl 2023-05-05', email_address='test_pdp1@sony.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))], group_ls=None, virtual_user_ls=None),\n PDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=1226, name='sds', parameters_ls=[DictDot(name='Title', value='Adding Scale Markers to Your Charts', values=['Adding Scale Markers to Your Charts'], type='COLUMN', operator='EQUALS', not=False, ignoreCase=False)], user_ls=[DomoUser(id='838842812', display_name='test_pdp3@sony.com - via dl 2023-05-05', email_address='test_pdp3@sony.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=2097317660, name='Community_Default_Priviliged', description='Full access except for editing users and settings owners', is_system_role=0, is_default_role=None, grant_ls=[], membership_ls=[]))], group_ls=None, virtual_user_ls=None)]\n\n\n\n\nsample implementation of generate_body_from_policy\n\ntry:\n    token_auth = dmda.DomoTokenAuth(\n        domo_instance=\"domo-community\",\n        domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n    )\n\n    # instantiate dataset class\n    dataset = dmd.DomoDataset(auth=token_auth, id=os.environ[\"DOJO_DATASET_ID\"])\n\n    # instantiate dataset_pdp_policies\n    dataset_pdp_policies = Dataset_PDP_Policies(dataset=dataset)\n    # get policies\n    await dataset_pdp_policies.get_policies(return_raw=False)\n\n    selected_policy = dataset_pdp_policies.policies[0]\n\n    print(selected_policy)\n\n    # selected_policy.generate_body_from_policy()\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nPDP_Policy(dataset_id='04c1574e-c8be-4721-9846-c6ffa491144b', filter_group_id=797, name='All Rows', parameters_ls=None, user_ls=None, group_ls=None, virtual_user_ls=['vu:a8841f70-909a-438e-9853-49783846bf22', 'vu:0ed4455a-35df-4049-8d6d-80341083b2f4', 'vu:566d15dc-9600-48af-b5ad-89cd0ea00cb7', 'vu:ed6853bb-d8c7-4777-be41-0af475fde7ba', 'vu:20e30033-edb3-44f0-a121-5ccf5f8161bc'])\n\n\n\n\nsample implementation of upsert_policy\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# instantiate dataset class\ndataset = dmd.DomoDataset(auth=token_auth, id=os.environ[\"DOJO_DATASET_ID\"])\n\n# instantiate dataset_pdp_policies\ndataset_pdp_policies = Dataset_PDP_Policies(dataset=dataset)\n\n# Updating existing policy\nnew_param = {\n    \"type\": \"COLUMN\",\n    \"name\": \"Country\",\n    \"values\": [\"Japan\", \"United States\"],\n    \"operator\": \"EQUALS\",\n    \"ignoreCase\": True,\n}\n\ntry:\n    await dataset_pdp_policies.get_policies(return_raw=False)\n\n    selected_policy = dataset_pdp_policies.policies[0]\n    \n    body = selected_policy.generate_body_from_policy()\n\n    body[\"parameters\"].append(new_param)\n\n    await PDP_Policy.upsert_policy(\n        auth=token_auth,\n        dataset_id=dataset.id,\n        policy_definition=body,\n        debug_api=False,\n        debug_prn=True,\n    )\n\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\ngenerate_body_from_policy: no parameters\n\n\n\n# upsert_policy, no policy exists so creates new policy\n\n# instantiate dataset class\ntry:\n    dataset = dmd.DomoDataset(auth=token_auth, id=os.environ[\"DOJO_DATASET_ID\"])\n\n    param = {\n        \"type\": \"COLUMN\",\n        \"name\": \"Country\",\n        \"values\": [\"Philippines\"],\n        \"operator\": \"EQUALS\",\n        \"ignoreCase\": True,\n    }\n\n    print(param[\"name\"])\n    new_pdp_policy = PDP_Policy(\n        dataset_id=dataset.id,\n        filter_group_id=None,\n        name=\"New PDP Policy\",\n        parameters_ls=[util_dd.DictDot(param)],\n        user_ls=[\"612085674\"],\n        group_ls=[\"1259653287\"],\n        virtual_user_ls=[],\n    )\n    body = new_pdp_policy.generate_body_from_policy()\n    print((await PDP_Policy.upsert_policy(\n        auth=dataset.auth, dataset_id=dataset.id, policy_definition=body\n    )))\n\nexcept Exception as e:\n    print(e)\n\nCountry\nCreating policy...\nResponseGetData(status=400, response='Bad Request', is_success=False, parent_class=None)\n\n\n\n\nSearch PDP Policies by name and ID\n\nsource\n\n\nDataset_PDP_Policies.search_pdp_policies\n\n Dataset_PDP_Policies.search_pdp_policies\n                                           (auth:domolibrary.client.DomoAu\n                                           th.DomoAuth, search:str,\n                                           dataset_id:str=None,\n                                           search_method:str='id',\n                                           is_exact_match:bool=True,\n                                           return_raw:bool=False,\n                                           debug_api:bool=False,\n                                           session:httpx.AsyncClient=None)\n\n\nsource\n\n\nSearchPDP_NotFound\n\n SearchPDP_NotFound (domo_instance, dataset_id, message='not found',\n                     function_name='search_pdp')\n\nbase exception\n\n\nsample implementation of search_pdp_policies\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\n# authenticate into instance\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# instance of dataset class\ndataset = dmd.DomoDataset(auth=token_auth, id=dataset_id)\n\n# instance of pdp_policies for the dataset\ndpp = Dataset_PDP_Policies(dataset=dataset)\n\n# pull all policies for that dataset\nawait dpp.get_policies()\n\n# search policies based on name\ntry:\n    policy = await dpp.search_pdp_policies(\n        auth=token_auth,\n        dataset_id=dataset.id,\n        search=\"Test 94\",\n        search_method=\"name\",\n        is_exact_match=True,\n        debug_api=False,\n    )\n    print(policy)\n\nexcept SearchPDP_NotFound as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nNameError: name 'SearchPDP_NotFound' is not defined\n\n\n\n\nDelete PDP Policy\n\nsource\n\n\nPDP_Policy.delete_policy\n\n PDP_Policy.delete_policy (auth:domolibrary.client.DomoAuth.DomoAuth,\n                           policy_id:str=None, dataset_id:str=None,\n                           debug_api:bool=False)\n\n\nSample implementation of delete_policy\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\n# authenticate into instance\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# instance of dataset class\ndataset = dmd.DomoDataset(auth=token_auth, id=dataset_id)\n\n# instance of pdp_policies for the dataset\ndpp = Dataset_PDP_Policies(dataset=dataset)\n\n# search policies based on name\npolicy = None\ntry:\n    policy = await dpp.search_pdp_policies(\n        auth=token_auth,\n        dataset_id=dataset.id,\n        search=\"Test Policy Name Employee 123\",\n        search_method=\"name\",\n        is_exact_match=True,\n        debug_api=False,\n    )\n    print(policy)\n\nexcept SearchPDP_NotFound as e:\n    print(e)\n\n# delete the policy based on filtergroup id\ntry:\n    await policy.delete_policy(\n        auth=token_auth, debug_api=False\n    )  # don't need to include policy or dataset since those are already tied with policy class\nexcept Exception as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  SearchPDP_NotFound 🛑 - function: search_pdp || 04c1574e-c8be-4721-9846-c6ffa491144b || There is no policy named \"Test Policy Name Employee 123\" on dataset_id 04c1574e-c8be-4721-9846-c6ffa491144b at domo-community\nname 'policy' is not defined\n\n\n\n\n\nEnable/Disable PDP on dataset\n\nsource\n\n\nDataset_PDP_Policies.toggle_dataset_pdp\n\n Dataset_PDP_Policies.toggle_dataset_pdp\n                                          (auth:domolibrary.client.DomoAut\n                                          h.DomoAuth=None,\n                                          dataset_id:str=None,\n                                          is_enable:bool=True,\n                                          debug_api:bool=False,\n                                          session:httpx.AsyncClient=None)\n\n\n\nsample implementation of toggle_dataset_pdp\n\ndataset_id = os.environ[\"DOJO_DATASET_ID\"]\n\n# authenticate into instancedataset_id\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# instance of dataset class\ndataset = dmd.DomoDataset(auth=token_auth, id=dataset_id)\n\n# instance of pdp_policies for the dataset\ndpp = Dataset_PDP_Policies(dataset=dataset)\n\n# toggle pdp on dataset\nawait dpp.toggle_dataset_pdp(\n    auth=token_auth, dataset_id=dataset.id, is_enable=False, debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'enabled': False, 'secured': False, 'external': False, 'enabledColumn': False}, is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "PDP"
    ]
  },
  {
    "objectID": "classes/domodataflow_action.html",
    "href": "classes/domodataflow_action.html",
    "title": "Dataflow_Action",
    "section": "",
    "text": "source\n\nDomoDataflow_Action\n\n DomoDataflow_Action (id:str, type:str=None, name:str=None,\n                      datasource_id:str=None, sql:str=None,\n                      depends_on:List[str]=None,\n                      parent_actions:List[dict]=None)\n\n\nsource\n\n\nDomoAction\n\n DomoAction (id:str, type:str=None, name:str=None)\n\n\nsource\n\n\nDomoDataflow_Action_Type\n\n DomoDataflow_Action_Type (value, names=None, module=None, qualname=None,\n                           type=None, start=1)\n\nAn enumeration.\n\nsample implementation of DataFlow_Action\nNote: this list of properties that can be attached to DomoDataflow_Action is by no means comprehensive. To capture more data from the API, simply add properties to the class and extend the DomoDataflow_Action._from_json private method.\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndataflow_id = 70\ndataflow_id = 185\n\nres = await dataflow_routes.get_dataflow_by_id(dataflow_id=dataflow_id, auth=token_auth)\nactions_ls = res.response.get(\"actions\")\n\n[DomoDataflow_Action._from_json(action) for action in actions_ls][0:5]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow_Action(id='b9bb0f01-2517-4595-a077-c9778e5ffc48', type='LoadFromVault', name='monit_user_accesslist', datasource_id='6ddbcb8d-0f38-48ad-bd73-f6b35c4b7daf', sql=None, depends_on=None, parent_actions=None),\n DomoDataflow_Action(id='52f47029-06e0-4599-9ed8-21c4b9386c89', type='WindowAction', name='Rank & Window', datasource_id=None, sql=None, depends_on=['b9bb0f01-2517-4595-a077-c9778e5ffc48'], parent_actions=None),\n DomoDataflow_Action(id='623883e9-bdc1-44cd-9fb4-6277d0e123de', type='ExpressionEvaluator', name='Add Formula', datasource_id=None, sql=None, depends_on=['52f47029-06e0-4599-9ed8-21c4b9386c89'], parent_actions=None),\n DomoDataflow_Action(id='99ad5978-9a19-41e1-99d7-3d0ce58f7467', type='Metadata', name='Alter Columns', datasource_id=None, sql=None, depends_on=['623883e9-bdc1-44cd-9fb4-6277d0e123de'], parent_actions=None),\n DomoDataflow_Action(id='4cf42103-c52d-4b92-b26f-63832ead11ee', type='SelectValues', name='Select Columns', datasource_id=None, sql=None, depends_on=['99ad5978-9a19-41e1-99d7-3d0ce58f7467'], parent_actions=None)]\n\n\n\nsource\n\n\n\nDomoDataflow_ActionResult\n\n DomoDataflow_ActionResult (id:str, type:str=None, name:str=None,\n                            is_success:bool=None, rows_processed:int=None,\n                            begin_time:dt.datetime=None,\n                            end_time:dt.datetime=None,\n                            duration_in_sec:int=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await dataflow_routes.get_dataflow_execution_by_id(\n    dataflow_id=70, execution_id=433238, auth=token_auth\n)\n\naction_ls = res.response[\"actionResults\"]\n\n[DomoDataflow_ActionResult._from_json(action_obj) for action_obj in action_ls]\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 4, 23, 17, 1, 487000), end_time=datetime.datetime(2023, 12, 4, 23, 17, 2, 754000), duration_in_sec=1.267),\n DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 4, 23, 17, 0, 983000), end_time=datetime.datetime(2023, 12, 4, 23, 17, 1, 100000), duration_in_sec=0.117),\n DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=909, begin_time=datetime.datetime(2023, 12, 4, 23, 16, 55, 894000), end_time=datetime.datetime(2023, 12, 4, 23, 17, 0, 972000), duration_in_sec=5.078),\n DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1816, begin_time=datetime.datetime(2023, 12, 4, 23, 17, 1, 100000), end_time=datetime.datetime(2023, 12, 4, 23, 17, 1, 487000), duration_in_sec=0.387)]",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataflow_Action"
    ]
  },
  {
    "objectID": "classes/domoactivitylog.html",
    "href": "classes/domoactivitylog.html",
    "title": "Activity Log",
    "section": "",
    "text": "class ActivityLog_ObjectType(Enum):\n    \"\"\"enumerates valid object types to pass to activity log api\"\"\"\n\n    ACCESS_TOKEN = \"ACCESS_TOKEN\"\n    ACCOUNT = \"ACCOUNT\"\n    ACTIVITY_LOG = \"ACTIVITY_LOG\"\n    ALERT = \"ALERT\"\n    APP = \"APP\"\n    APPDB_COLLECTION = \"MAGNUM_COLLECTION\"\n    APPDB_DATASTORE = \"MAGNUM_DATASTORE\"\n    AUTHORITY = \"AUTHORITY\"\n    BEAST_MODE_FORMULA = \"BEAST_MODE_FORMULA\"\n    BUZZ_CHANNEL = \"CHANNEL\"\n    BUZZ_GROUP_CHAT = \"GROUP_CHAT\"\n    BUZZ_THREAD = \"HUDDLE\"\n    CARD = \"CARD\"\n    CHART_COLOR_PALETTE = \"CHART_COLOR_PALETTE\"\n    COLLECTION = \"COLLECTION\"\n    CUSTOMER = \"CUSTOMER\"\n    CUSTOMER_STATE = \"CUSTOMER_STATE\"\n    CUSTOMER_TIER = \"CUSTOMER_TIER\"\n    DATA_SCIENCE_NOTEBOOK = \"DATA_SCIENCE_NOTEBOOK\"\n    DATAFLOW = \"DATAFLOW_TYPE\"\n    DATASET = \"DATA_SOURCE\"\n    DATASOURCE = \"DATASOURCE\"\n    DEPLOYMENT = \"DEPLOYMENT\"\n    DRILL_VIEW = \"DRILL_VIEW\"\n    EASY_INVITE_LINK = \"EASY_INVITE_LINK\"\n    ENABLED = \"ENABLED\"\n    FILE = \"FILE\"\n    FILE_VERSION = \"FILE_REVISION\"\n    GROUP = \"GROUP\"\n    LICENSE_PAGE = \"LICENSE_PAGE\"\n    LOGIN_SETTINGS = \"LOGIN_SETTINGS\"\n    NAME = \"NAME\"\n    PDP_FILTER = \"ADC_FILTER\"\n    PDP_POLICY = \"ADC_POLICY\"\n    PAGE = \"PAGE\"\n    PAGE_ANALYZER = \"PAGE_ANALYZER\"\n    PAGE_COLLECTION = \"PAGE_COLLECTION\"\n    PROJECT = \"PROJECT\"\n    PROJECT_LIST = \"PROJECT_LIST\"\n    PROJECT_TASK = \"PROJECT_TASK\"\n    PROJECT_TASK_ATTACHMENT = \"PROJECT_TASK_ATTACHMENT\"\n    PROJECT_TASK_OWNER = \"PROJECT_TASK_OWNER\"\n    PROXIER_EMAIL = \"PROXIER_EMAIL\"\n    PUBLIC_EMBED_URL = \"PUBLIC_URL\"\n    PUBLICATION = \"PUBLICATION\"\n    REPOSITORY = \"REPOSITORY\"\n    REPOSITORY_AUTHORIZATION = \"REPOSITORY_AUTHORIZATION\"\n    ROLE = \"ROLE\"\n    SEGMENT = \"SEGMENT\"\n    SSO_PAGE = \"SSO_PAGE\"\n    SUBSCRIBER = \"PROXY_USER\"\n    USER = \"USER\"\n    USER_STATE = \"USER_STATE\"\n    VARIABLE = \"VARIABLE\"\n    VARIABLE_CONTROL = \"VARIABLE_CONTROL\"\n    NOTEBOOK_VIEW = \"CONTAINER_VIEW\"\n    VIEW = \"VIEW\"\n    VIRTUAL_USER = \"VIRTUAL_USER\"\n    WORKBENCH_AGENT = \"Workbench_AGENT\"\n    WORKBENCH_JOB = \"Workbench_JOB\"\n    WORKBENCH_SCHEDULE = \"Workbench_SCHEDULE\"\n\n\nsource\n\nActivityLog_ObjectType\n\n ActivityLog_ObjectType (value, names=None, module=None, qualname=None,\n                         type=None, start=1)\n\nenumerates valid object types to pass to activity log api\nTo get an updated list of objectTypes run the get_activity_log_object_types function.\nNote: in the ActivityLog_ObjectType enum, some of the entries have been renamed for clarity.\n\nsource\n\n\nDomoActivityLog\n\n DomoActivityLog ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nimport os\nimport pandas as pd\nimport datetime as dt\n\nend_datetime = dt.datetime.today()\nstart_datetime = end_datetime - dt.timedelta(days=100)\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nal_res = await DomoActivityLog.get_activity_log(\n    auth=token_auth,\n    start_time=start_datetime,\n    end_time=end_datetime,\n    object_type=ActivityLog_ObjectType.ACTIVITY_LOG,\n    maximum=5,\n)\n\npd.DataFrame(al_res)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nuserName\nuserId\nuserType\nactorName\nactorId\nactionType\nobjectName\nobjectId\nobjectType\nadditionalComment\ntime\neventText\nclientId\nauthenticationMethod\ntime_dt\ndate\n\n\n\n\n0\nJae Wilson1\n1893952720\nUSER\n\n0\nMANUALLY_RUN\nGovernance_datasets\n42917df1-fa58-483f-a290-5fe95ccda4ed\nDATA_SOURCE\nJae Wilson1 manually ran DataSet Governance_da...\n1711224387575\nManually ran DataSet\nNone\nDEV_TOKEN\n2024-03-23 20:06:27.575\n2024-03-23\n\n\n1\nJae Wilson1\n1893952720\nUSER\n\n0\nVIEWED\ndelete me\n1761849366\nPAGE\nJae Wilson1 viewed page delete me.\n1711224387259\nViewed page\nNone\nDEV_TOKEN\n2024-03-23 20:06:27.259\n2024-03-23\n\n\n2\nBryan Van Kampen\n587894148\nUSER\n\n0\nVIEWED\nWorkbench Monitoring\n1416746303\nPAGE\nBryan Van Kampen viewed page Workbench Monitor...\n1711224335821\nViewed page\nNone\nDEV_TOKEN\n2024-03-23 20:05:35.821\n2024-03-23\n\n\n3\nBryan Van Kampen\n587894148\nUSER\n\n0\nVIEWED\nWelcome\n30507758\nPAGE\nBryan Van Kampen viewed page Welcome.\n1711224335431\nViewed page\nNone\nDEV_TOKEN\n2024-03-23 20:05:35.431\n2024-03-23\n\n\n4\nBryan Van Kampen\n587894148\nUSER\n\n0\nVIEWED\nVirtual User Group\n138471350\nPAGE\nBryan Van Kampen viewed page Virtual User Group.\n1711224333299\nViewed page\nNone\nDEV_TOKEN\n2024-03-23 20:05:33.299\n2024-03-23",
    "crumbs": [
      "Blog",
      "Classes",
      "Activity Log"
    ]
  },
  {
    "objectID": "classes/domoapplication.html",
    "href": "classes/domoapplication.html",
    "title": "Application",
    "section": "",
    "text": "What are applications?\nApplications tend to be tooling that domo implemented on the executor framework or extensions to domo products that originated as custom apps that have been fully integrated into the UI.\nFor example Publish started out as a 3rd party app that was later integrated into domo as an App, and then later received dedicated API paths.\nSimilarly Remote DomoStats / Observability metrics started out as 3rd party scripting, which was later integrated into Domo’s “Executor Framework” an internal framework for managing java / lambda functions, now defined under the application APIs.\nNote, pieces of the executor framework has slowly been morphed and adapted into CodeEngine and exposed to end users.\n\nfrom enum import Enum\nimport domolibrary.utils.convert as cc\n\n\nclass DomoJob_Types(Enum):\n    REMOTE_DOMO_STATS = dmdj.DomoJob_RemoteDomoStats\n    DATA_WATCHDOG = dmdj.DomoJob_Watchdog\n\n    default = dmdj.DomoJob\n\n    @staticmethod\n    def _convert_api_name_to_member_name(api_name):\n        return (\n            cc.convert_str_to_snake_case(api_name, is_only_alphanumeric=True)\n            .upper()\n            .replace(\"TOOLKIT_\", \"\")\n        )\n\n    @classmethod\n    def get_from_api_name(cls, api_name):\n        member_name = cls._convert_api_name_to_member_name(api_name)\n\n        if member_name not in cls.__members__:\n            return cls[\"default\"].value\n\n        return cls[member_name].value\n\n\nDomoJob_Types.get_from_api_name(\"Toolkit: Remote Domo Stat\")\n\ndomolibrary.classes.DomoApplication_Job.DomoJob\n\n\n\n# token_auth = dmda.DomoTokenAuth(\n#     domo_instance=\"domo-community\",\n#     domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n# )\n\n# res = await application_routes.get_applications(auth = token_auth)\n\n# [app.get('name') for app in res.response]\n\n\n@dataclass\nclass DomoApplication:\n    auth: dmda.DomoAuth = field(repr=False)\n    id: str\n    version: str = None\n    name: str = None\n    customer_id: str = None\n    description: str = None\n    execution_class: str = None\n    grants: List[str] = None\n    jobs: List[dmdj.DomoJob] = field(default=None)\n    jobs_schedule: List[dmdj.DomoTrigger_Schedule] = field(default=None, repr=False)\n\n    @classmethod\n    def _from_json(cls, obj, auth: dmda.DomoFullAuth = None):\n        dd = util_dd.DictDot(obj)\n\n        return cls(\n            id=dd.applicationId,\n            customer_id=dd.customerId,\n            name=dd.name,\n            description=dd.description,\n            version=dd.version,\n            execution_class=dd.executionClass,\n            grants=dd.authorities,\n            auth=auth,\n        )\n\n    def _get_job_class(self):\n        return DomoJob_Types.get_from_api_name(self.name)\n\n\nsource\n\nDomoApplication\n\n DomoApplication (auth:domolibrary.client.DomoAuth.DomoAuth, id:str,\n                  version:str=None, name:str=None, customer_id:str=None,\n                  description:str=None, execution_class:str=None,\n                  grants:List[str]=None, jobs:List[domolibrary.classes.Dom\n                  oApplication_Job.DomoJob]=None, jobs_schedule:List[domol\n                  ibrary.classes.DomoApplication_Job.DomoTrigger_Schedule]\n                  =None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-alpha\",\n    domo_access_token=os.environ[\"ALPHA_ACCESS_TOKEN\"],\n)\ntest_application = await DomoApplication.get_from_id(\n    auth=token_auth,\n    application_id=\"33aab8f0-3397-45e1-933c-755abd0f5b3a\",\n    return_raw=False,\n)\n\npprint(test_application)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoApplication(id='33aab8f0-3397-45e1-933c-755abd0f5b3a',\n                version='1.0.46_2',\n                name='Toolkit: Data Watchdog',\n                customer_id='domo-alpha',\n                description='Monitors DataSets and DataFlows for execution '\n                            'errors or execution duration outliers.',\n                execution_class='com.domo.executor.datawatchdog.DataWatchdogExecutor',\n                grants=['dataflow.manage',\n                        'pipeline.executor.job.create',\n                        'dataset.manage'],\n                jobs=None)\n\n\n\n@patch_to(DomoApplication)\nasync def get_jobs(\n    self,\n    debug_api: bool = False,\n    session: Optional[httpx.AsyncClient] = None,\n    return_raw: bool = False,\n):\n\n    res = await application_routes.get_application_jobs(\n        auth=self.auth,\n        application_id=self.id,\n        debug_api=debug_api,\n        session=session,\n        parent_class=self.__class__.__name__,\n    )\n\n    if return_raw:\n        return res\n\n    job_cls = self._get_job_class()\n\n    self.jobs = [job_cls._from_json(job, auth=self.auth) for job in res.response]\n    return self.jobs\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ntest_application = await DomoApplication.get_from_id(\n    auth=token_auth, application_id=\"50e7230f-d2f2-42e2-a208-d94c8ae9f64c\"\n)\n\npprint(await test_application.get_jobs())\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n[DomoJob_RemoteDomoStats(name='domo-community',\n                         application_id='50e7230f-d2f2-42e2-a208-d94c8ae9f64c',\n                         logs_dataset_id='da68b3ea-088f-4493-ae69-ee5094feaa29',\n                         id='f7a1b31f-f774-4eeb-ba85-d56d29b1dedc',\n                         user_id=1893952720,\n                         execution_timeout=1440,\n                         is_enabled=True,\n                         customer_id='mmmm-0012-0200',\n                         created_dt=datetime.datetime(2024, 2, 26, 17, 10, 31),\n                         updated_dt=datetime.datetime(2024, 2, 27, 11, 13, 31),\n                         description='updated on 2024-02-27',\n                         execution_payload={'metricsDatasetId': 'da68b3ea-088f-4493-ae69-ee5094feaa29',\n                                            'policies': {'AccountPermissions': 'b156bfe4-d0e5-4410-8354-b3062973a99c'},\n                                            'remoteInstance': 'domo-community',\n                                            'subscriberJobId': 'd29c4551-5ec9-4eb8-8a93-b89e7a4ec300'},\n                         share_state={'sharedEntities': [{'accessLevel': 'OWNER',\n                                                          'id': '1893952720',\n                                                          'type': 'USER'}]},\n                         accounts=[96],\n                         triggers=[DomoTrigger(id='38524a92-05bd-459a-946c-33da00f77fa2',\n                                               job_id='f7a1b31f-f774-4eeb-ba85-d56d29b1dedc',\n                                               schedule=DomoTrigger_Schedule(schedule_text='0 '\n                                                                                           '29 '\n                                                                                           '1 '\n                                                                                           '? '\n                                                                                           '* '\n                                                                                           'MON-SUN '\n                                                                                           '*',\n                                                                             schedule_type='scheduleTriggered',\n                                                                             minute=29,\n                                                                             hour=1,\n                                                                             minute_str=None,\n                                                                             hour_str=None))],\n                         remote_instance='domo-community',\n                         subscriber_job_id='d29c4551-5ec9-4eb8-8a93-b89e7a4ec300',\n                         config=RemoteDomoStats_Config(policies=[RemoteDomoStats_Config_Policy(type='AccountPermissions',\n                                                                                               dataset_id='b156bfe4-d0e5-4410-8354-b3062973a99c')]))]\n\n\n\n@patch_to(DomoApplication)\nasync def get_schedules(self) -&gt; pd.DataFrame:\n    if not self.jobs:\n        await self.get_jobs()\n\n    # return self.jobs\n\n    schedules = pd.DataFrame(\n        [\n            {\n                **trigger.schedule.to_obj(),\n                \"job_name\": job.name,\n                \"job_id\": job.id,\n                \"description\": job.description,\n                \"remote_instance\": job.remote_instance,\n                \"application\": self.name,\n            }\n            for job in self.jobs\n            for trigger in job.triggers\n        ]\n    )\n\n    # return schedules\n\n    self.jobs_schedule = schedules.sort_values(\n        [\"hour\", \"minute\"], ascending=True\n    ).reset_index(drop=True)\n    return self.jobs_schedule\n\n\ntest_application = await DomoApplication.get_from_id(\n    auth=token_auth, application_id=\"50e7230f-d2f2-42e2-a208-d94c8ae9f64c\"\n)\n\nawait test_application.get_schedules()\n\n\n\n\n\n\n\n\n\nhour\nminute\njob_name\njob_id\ndescription\nremote_instance\napplication\n\n\n\n\n0\n1\n29\ndomo-community\nf7a1b31f-f774-4eeb-ba85-d56d29b1dedc\nupdated on 2024-02-27\ndomo-community\nToolkit: Remote Domo Stats\n\n\n\n\n\n\n\n\n\ntest_application = await DomoApplication.get_from_id(\n    auth=token_auth, application_id=\"50e7230f-d2f2-42e2-a208-d94c8ae9f64c\"\n)\nawait test_application.find_next_job_schedule(return_raw=False)\n\nDomoTrigger_Schedule(schedule_text=None, schedule_type='scheduleTriggered', minute=0, hour=0, minute_str=None, hour_str=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "Application"
    ]
  },
  {
    "objectID": "classes/domoapplication_job.html",
    "href": "classes/domoapplication_job.html",
    "title": "Job",
    "section": "",
    "text": "A job refers to a scheduled task in an application.\nFor the purposes of this beta class, the only Job type implemented has been Watchdog. This class will be heavily revised in a future development sprint.\nAn additional Job type might be PDP Automation Toolkit.\nsource",
    "crumbs": [
      "Blog",
      "Classes",
      "Job"
    ]
  },
  {
    "objectID": "classes/domoapplication_job.html#domojob_remotedomostats",
    "href": "classes/domoapplication_job.html#domojob_remotedomostats",
    "title": "Job",
    "section": "DomoJob_RemoteDomoStats",
    "text": "DomoJob_RemoteDomoStats\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nres = await application_routes.get_applications(auth=token_auth)\n\napplication_id = next(\n    (\n        app[\"applicationId\"]\n        for app in res.response\n        if app[\"name\"] == \"Toolkit: Remote Domo Stats\"\n    )\n)\n\nres = await application_routes.get_application_jobs(\n    application_id=application_id, auth=token_auth\n)\njob_id = res.response[0][\"jobId\"]\n\ntest_job = await DomoJob_RemoteDomoStats.get_by_id(\n    job_id=job_id, application_id=application_id, auth=token_auth, return_raw=False\n)\n\n# pprint(test_job.response)\npprint(test_job)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoJob_RemoteDomoStats(name='domo-community',\n                        application_id='50e7230f-d2f2-42e2-a208-d94c8ae9f64c',\n                        logs_dataset_id='da68b3ea-088f-4493-ae69-ee5094feaa29',\n                        id='f7a1b31f-f774-4eeb-ba85-d56d29b1dedc',\n                        user_id=1893952720,\n                        execution_timeout=1440,\n                        is_enabled=True,\n                        customer_id='mmmm-0012-0200',\n                        created_dt=datetime.datetime(2024, 2, 26, 17, 10, 31),\n                        updated_dt=datetime.datetime(2024, 2, 27, 11, 13, 31),\n                        description='updated on 2024-02-27',\n                        execution_payload={'metricsDatasetId': 'da68b3ea-088f-4493-ae69-ee5094feaa29',\n                                           'policies': {'AccountPermissions': 'b156bfe4-d0e5-4410-8354-b3062973a99c'},\n                                           'remoteInstance': 'domo-community',\n                                           'subscriberJobId': 'd29c4551-5ec9-4eb8-8a93-b89e7a4ec300'},\n                        share_state={'sharedEntities': [{'accessLevel': 'OWNER',\n                                                         'id': '1893952720',\n                                                         'type': 'USER'}]},\n                        accounts=[96],\n                        triggers=[DomoTrigger(id='38524a92-05bd-459a-946c-33da00f77fa2',\n                                              job_id='f7a1b31f-f774-4eeb-ba85-d56d29b1dedc',\n                                              schedule=DomoTrigger_Schedule(schedule_text='0 '\n                                                                                          '29 '\n                                                                                          '1 '\n                                                                                          '? '\n                                                                                          '* '\n                                                                                          'MON-SUN '\n                                                                                          '*',\n                                                                            schedule_type='scheduleTriggered',\n                                                                            minute=29,\n                                                                            hour=1,\n                                                                            minute_str=None,\n                                                                            hour_str=None))],\n                        remote_instance='domo-community',\n                        subscriber_job_id='d29c4551-5ec9-4eb8-8a93-b89e7a4ec300',\n                        config=RemoteDomoStats_Config(policies=[RemoteDomoStats_Config_Policy(type='AccountPermissions',\n                                                                                              dataset_id='b156bfe4-d0e5-4410-8354-b3062973a99c')]))\n\n\n\npprint(test_job.to_json())\n\n{'accounts': [96],\n 'applicationId': '50e7230f-d2f2-42e2-a208-d94c8ae9f64c',\n 'customerId': 'mmmm-0012-0200',\n 'executionPayload': {'metricsDatasetId': 'da68b3ea-088f-4493-ae69-ee5094feaa29',\n                      'policies': {'AccountPermissions': 'b156bfe4-d0e5-4410-8354-b3062973a99c'},\n                      'remoteInstance': 'domo-community',\n                      'subscriberJobId': 'd29c4551-5ec9-4eb8-8a93-b89e7a4ec300'},\n 'executionTimeout': 1440,\n 'jobDescription': 'updated on 2024-02-27',\n 'jobId': 'f7a1b31f-f774-4eeb-ba85-d56d29b1dedc',\n 'jobName': 'domo-community',\n 'shareState': {'sharedEntities': [{'accessLevel': 'OWNER',\n                                    'id': '1893952720',\n                                    'type': 'USER'}]},\n 'triggers': [{'eventEntity': '0 29 1 ? * *',\n               'eventType': 'scheduleTriggered'}],\n 'userId': 1893952720}\n\n\n\nRemoteDomoStats CRUD\n\n@patch_to(DomoJob_RemoteDomoStats, cls_method=True)\nasync def create(\n    cls,\n    auth: dmda.DomoAuth,\n    name: str,\n    config: RemoteDomoStats_Config,\n    application_id: str,\n    logs_dataset_id: str,\n    description: str = f\"created via domolibrary f{dt.date.today()}\",\n    remote_instance: str = None,\n    accounts: List[int] = None,\n    triggers: List[DomoTrigger_Schedule] = None,\n    execution_timeout: int = 1440,\n    return_raw: bool = False,\n    debug_api: bool = False,\n    debug_num_stacks_to_drop=2,\n    session: Optional[httpx.AsyncClient] = None,\n):\n    domo_job = cls(\n        application_id=application_id,\n        auth=auth,\n        name=name,\n        logs_dataset_id=logs_dataset_id,\n        accounts=accounts,\n        description=description,\n        remote_instance=remote_instance,\n        config=config,\n        triggers=triggers or [],\n        execution_timeout=execution_timeout,\n    )\n\n    body = domo_job.to_json()\n\n    res = await application_routes.create_application_job(\n        auth=auth,\n        application_id=application_id,\n        body=body,\n        parent_class=cls.__name__,\n        session=session,\n        debug_api=debug_api,\n        debug_num_stacks_to_drop=debug_num_stacks_to_drop,\n    )\n\n    if return_raw:\n        return res\n\n    return cls._from_json(res.response, auth=auth)\n\n\nsource\n\n\nDomoJob_RemoteDomoStats.create\n\n DomoJob_RemoteDomoStats.create\n                                 (auth:domolibrary.client.DomoAuth.DomoAut\n                                 h, name:str,\n                                 config:__main__.RemoteDomoStats_Config,\n                                 application_id:str, logs_dataset_id:str,\n                                 description:str='created via domolibrary\n                                 f2024-03-23', remote_instance:str=None,\n                                 accounts:List[int]=None, triggers:List[__\n                                 main__.DomoTrigger_Schedule]=None,\n                                 execution_timeout:int=1440,\n                                 return_raw:bool=False,\n                                 debug_api:bool=False,\n                                 debug_num_stacks_to_drop=2,\n                                 session:Optional[httpx.AsyncClient]=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nconfig = RemoteDomoStats_Config._from_json(\n    {\"AccountPermissions\": \"b156bfe4-d0e5-4410-8354-b3062973a99c\"}\n)\n\n\n# await DomoJob_RemoteDomoStats.create(\n#     auth = token_auth,\n#     application_id=\"50e7230f-d2f2-42e2-a208-d94c8ae9f64c\",\n#     logs_dataset_id = 'da68b3ea-088f-4493-ae69-ee5094feaa29' ,\n#     name=\"domo-community v3\",\n#     accounts=[96],\n#     remote_instance=\"domo-community\",\n#     config=config,\n#     return_raw = True\n# )",
    "crumbs": [
      "Blog",
      "Classes",
      "Job"
    ]
  },
  {
    "objectID": "classes/domodataflow.html",
    "href": "classes/domodataflow.html",
    "title": "Dataflow",
    "section": "",
    "text": "source\n\nDomoDataflow\n\n DomoDataflow (id:str, name:str=None, auth:dmda.DomoAuth=None,\n               owner:str=None, description:str=None, tags:list[str]=None,\n               actions:list[DomoDataflow_Action]=None,\n               version_id:int=None, version_number:int=None,\n               versions:List[dict]=None,\n               history:DomoDataflow_History=None)\n\n\nsample implementation of get_from_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoDataflow.get_from_id(dataflow_id=70, auth=token_auth)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoDataflow(id=70, name='DomoStats - people - reports', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name='domoStats_people_reports', datasource_id='d9257748-c181-496e-8f9a-016ee99b4a14', sql='select * from `reportsto`', depends_on=['ac9f630d-d865-4925-b955-4316e227229a'], parent_actions=[DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])], version_id=None, version_number=None, versions=None, history=DomoDataflow_History(execution_history=None))\n\n\n\n\nsample retrieval that also interacts with dataflow history from DomoDataflow_History\nnote will return actions history\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataflow = await DomoDataflow.get_from_id(dataflow_id=70, auth=token_auth)\nawait domo_dataflow.history.get_execution_history(maximum=5)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow_History_Execution(id=497905, dataflow_id=70, dataflow_execution_id='dae127f7-e7b8-4b9c-a36f-7b6c9a71b605', dataflow_version=262, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 54), end_time=datetime.datetime(2024, 3, 23, 11, 21, 25), last_updated=datetime.datetime(2024, 3, 23, 11, 21, 25), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 102918, 'total_rows_read': 955, 'total_bytes_read': 360657, 'mean_download_rate_kbps': 71.42650609663355, 'total_rows_written': 1908}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 11, 21, 23, 215000), end_time=datetime.datetime(2024, 3, 23, 11, 21, 24, 225000), duration_in_sec=1.01), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 11, 21, 22, 485000), end_time=datetime.datetime(2024, 3, 23, 11, 21, 22, 521000), duration_in_sec=0.036), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 11, 21, 17, 486000), end_time=datetime.datetime(2024, 3, 23, 11, 21, 22, 417000), duration_in_sec=4.931), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 11, 21, 22, 521000), end_time=datetime.datetime(2024, 3, 23, 11, 21, 23, 215000), duration_in_sec=0.694)]),\n DomoDataflow_History_Execution(id=497904, dataflow_id=70, dataflow_execution_id='d5042f0f-a72a-49cc-9340-301bf077ac01', dataflow_version=262, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 23), end_time=datetime.datetime(2024, 3, 23, 11, 20, 52), last_updated=datetime.datetime(2024, 3, 23, 11, 20, 52), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 102950, 'total_rows_read': 955, 'total_bytes_read': 360657, 'mean_download_rate_kbps': 81.96511556027461, 'total_rows_written': 1908}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 878000), end_time=datetime.datetime(2024, 3, 23, 11, 20, 51, 734000), duration_in_sec=0.856), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 288000), end_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 472000), duration_in_sec=0.184), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 45, 979000), end_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 276000), duration_in_sec=4.297), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 482000), end_time=datetime.datetime(2024, 3, 23, 11, 20, 50, 878000), duration_in_sec=0.396)]),\n DomoDataflow_History_Execution(id=497888, dataflow_id=70, dataflow_execution_id='35a0e7aa-c93d-40ff-a3b9-f513bf3bd16d', dataflow_version=262, begin_time=datetime.datetime(2024, 3, 23, 10, 57, 13), end_time=datetime.datetime(2024, 3, 23, 10, 57, 45), last_updated=datetime.datetime(2024, 3, 23, 10, 57, 45), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 102920, 'total_rows_read': 955, 'total_bytes_read': 360657, 'mean_download_rate_kbps': 73.498351745096, 'total_rows_written': 1908}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 10, 57, 43, 375000), end_time=datetime.datetime(2024, 3, 23, 10, 57, 44, 293000), duration_in_sec=0.918), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 10, 57, 42, 680000), end_time=datetime.datetime(2024, 3, 23, 10, 57, 42, 787000), duration_in_sec=0.107), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 10, 57, 37, 801000), end_time=datetime.datetime(2024, 3, 23, 10, 57, 42, 593000), duration_in_sec=4.792), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 10, 57, 42, 787000), end_time=datetime.datetime(2024, 3, 23, 10, 57, 43, 375000), duration_in_sec=0.588)]),\n DomoDataflow_History_Execution(id=497884, dataflow_id=70, dataflow_execution_id='b7b18cf7-eb36-4252-9b67-aff280921f1b', dataflow_version=262, begin_time=datetime.datetime(2024, 3, 23, 10, 55, 43), end_time=datetime.datetime(2024, 3, 23, 10, 56, 14), last_updated=datetime.datetime(2024, 3, 23, 10, 56, 14), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 102934, 'total_rows_read': 955, 'total_bytes_read': 360657, 'mean_download_rate_kbps': 82.09885817307692, 'total_rows_written': 1908}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 10, 56, 12, 183000), end_time=datetime.datetime(2024, 3, 23, 10, 56, 13, 103000), duration_in_sec=0.92), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 10, 56, 11, 478000), end_time=datetime.datetime(2024, 3, 23, 10, 56, 11, 678000), duration_in_sec=0.2), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=955, begin_time=datetime.datetime(2024, 3, 23, 10, 56, 7, 179000), end_time=datetime.datetime(2024, 3, 23, 10, 56, 11, 469000), duration_in_sec=4.29), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1908, begin_time=datetime.datetime(2024, 3, 23, 10, 56, 11, 678000), end_time=datetime.datetime(2024, 3, 23, 10, 56, 12, 183000), duration_in_sec=0.505)]),\n DomoDataflow_History_Execution(id=497857, dataflow_id=70, dataflow_execution_id='34d56c91-d107-4d7c-b5bd-8023f3c37816', dataflow_version=262, begin_time=datetime.datetime(2024, 3, 23, 9, 56, 42), end_time=datetime.datetime(2024, 3, 23, 9, 57, 12), last_updated=datetime.datetime(2024, 3, 23, 9, 57, 12), is_failed=False, state='SUCCESS', activation_type='MANUAL', data_processor='MYSQL', telemetry=None, execution_stats={'total_bytes_written': 102832, 'total_rows_read': 954, 'total_bytes_read': 360293, 'mean_download_rate_kbps': 73.31707289279016, 'total_rows_written': 1906}, action_results=[DomoDataflow_ActionResult(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name=None, is_success=True, rows_processed=1906, begin_time=datetime.datetime(2024, 3, 23, 9, 57, 10, 322000), end_time=datetime.datetime(2024, 3, 23, 9, 57, 11, 171000), duration_in_sec=0.849), DomoDataflow_ActionResult(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name=None, is_success=True, rows_processed=954, begin_time=datetime.datetime(2024, 3, 23, 9, 57, 9, 707000), end_time=datetime.datetime(2024, 3, 23, 9, 57, 9, 737000), duration_in_sec=0.03), DomoDataflow_ActionResult(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='DataHubManifestLoaderAction', name=None, is_success=True, rows_processed=954, begin_time=datetime.datetime(2024, 3, 23, 9, 57, 4, 825000), end_time=datetime.datetime(2024, 3, 23, 9, 57, 9, 624000), duration_in_sec=4.799), DomoDataflow_ActionResult(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name=None, is_success=True, rows_processed=1906, begin_time=datetime.datetime(2024, 3, 23, 9, 57, 9, 737000), end_time=datetime.datetime(2024, 3, 23, 9, 57, 10, 312000), duration_in_sec=0.575)])]\n\n\n\n\nsample execute_dataflow\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataflow = DomoDataflow(id=70, auth=token_auth)\n\nawait domo_dataflow.execute()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': 497906, 'onboardFlowId': 70, 'previewRows': 0, 'dapDataFlowExecutionId': 'f88408f6-2550-4eed-9ac8-73f3e181d740', 'beginTime': 1711214526048, 'lastUpdated': 1711214526582, 'state': 'CREATED', 'activationType': 'MANUAL', 'executionEngine': {'platform': 'K8S', 'engine': 'MYSQL_SQL_ENGINE'}, 'dataProcessor': 'MYSQL', 'dataFlowVersion': 262}, is_success=True, parent_class=None)\n\n\n\n\n\nDataflow Versions\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoDataflow.get_by_version_id(\n    dataflow_id=70, version_id=262, auth=token_auth, return_raw=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoDataflow(id=70, name='DomoStats - people - reports', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name='domoStats_people_reports', datasource_id='d9257748-c181-496e-8f9a-016ee99b4a14', sql='select * from `reportsto`', depends_on=['ac9f630d-d865-4925-b955-4316e227229a'], parent_actions=[DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])], version_id=262, version_number=3, versions=None, history=DomoDataflow_History(execution_history=None))\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_dataflow = DomoDataflow(id=70, auth=token_auth)\n\nawait domo_dataflow.get_versions(return_raw=False)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoDataflow(id=70, name='DomoStats - people - reports', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name='domoStats_people_reports', datasource_id='d9257748-c181-496e-8f9a-016ee99b4a14', sql='select * from `reportsto`', depends_on=['ac9f630d-d865-4925-b955-4316e227229a'], parent_actions=[DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])], version_id=262, version_number=3, versions=None, history=DomoDataflow_History(execution_history=None)),\n DomoDataflow(id=70, name='sel', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name='domoStats_people_reports', datasource_id='d9257748-c181-496e-8f9a-016ee99b4a14', sql='select * from `reportsto`', depends_on=['ac9f630d-d865-4925-b955-4316e227229a'], parent_actions=[DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"\\nselect  b.`User ID` as userID , 'reportsTo' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\nUNION\\n\\nselect  b.`User ID` as userID , 'directReports' as Action , a.`User ID` as bodyID\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non b.id = a.`rowGroup`\\n\\nwhere a.`User ID` &lt;&gt; b.`User ID`\\n\\n\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])], version_id=261, version_number=2, versions=None, history=DomoDataflow_History(execution_history=None)),\n DomoDataflow(id=70, name='sel', owner=None, description=None, tags=None, actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None), DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)]), DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"select  a.`User ID` as parent, b.`User ID` , 'reportsTo' as Action\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])]), DomoDataflow_Action(id='8edc3d78-3586-47a8-9775-c7b146a50d19', type='PublishToVault', name='output_dataset_1', datasource_id='d9257748-c181-496e-8f9a-016ee99b4a14', sql='select 1', depends_on=['ac9f630d-d865-4925-b955-4316e227229a'], parent_actions=[DomoDataflow_Action(id='ac9f630d-d865-4925-b955-4316e227229a', type='GenerateTableAction', name='reportsto', datasource_id=None, sql=\"select  a.`User ID` as parent, b.`User ID` , 'reportsTo' as Action\\n\\nfrom t_1 a \\n\\njoin t_1 b \\n\\non a.id = b.`rowGroup`\", depends_on=['c176aa53-122a-4a2e-8b6f-41ca4a72d67c'], parent_actions=[DomoDataflow_Action(id='c176aa53-122a-4a2e-8b6f-41ca4a72d67c', type='GenerateTableAction', name='t_1', datasource_id=None, sql='SELECT\\n`Display Name`,\\n`User ID`\\n, @row := @row+1 as id\\n, @isReset := case when @iter = @rowCounter then 1 else 0 end isReset\\n, @group := @isReset + @group   as rowGroup\\n, @iter := case when @isReset = 1 then 1 else @iter + 1 end iter\\n, @rowCounter := case when @isReset = 1 then FLOOR( RAND() * (7-3) + 3) else @rowCounter end numChildren\\n\\n\\nfrom `domostats_people` p\\n\\n, (select @row:= 0,@rowCounter:= 1, @iter := 1, @isReset := 0 , @group := 0) r', depends_on=['241025d7-3cca-4369-b7c0-b3264277c0e1'], parent_actions=[DomoDataflow_Action(id='241025d7-3cca-4369-b7c0-b3264277c0e1', type='LoadFromVault', name='domostats_people', datasource_id='241025d7-3cca-4369-b7c0-b3264277c0e1', sql=None, depends_on=None, parent_actions=None)])])])], version_id=260, version_number=1, versions=None, history=DomoDataflow_History(execution_history=None))]",
    "crumbs": [
      "Blog",
      "Classes",
      "Dataflow"
    ]
  },
  {
    "objectID": "classes/domouser.html",
    "href": "classes/domouser.html",
    "title": "User",
    "section": "",
    "text": "source\n\n\n\n DownloadAvatar_NoAvatarKey (domo_instance, user_id)\n\nbase exception\n\nsource\n\n\n\n\n DeleteUser_Error (domo_instance, email_address)\n\nbase exception\n\nsource\n\n\n\n\n CreateUser_MissingRole (domo_instance, email_address)\n\nbase exception",
    "crumbs": [
      "Blog",
      "Classes",
      "User"
    ]
  },
  {
    "objectID": "classes/domouser.html#search-and-get-users",
    "href": "classes/domouser.html#search-and-get-users",
    "title": "User",
    "section": "Search and GET Users",
    "text": "Search and GET Users\n\nsource\n\nDomoUsers.all_users\n\n DomoUsers.all_users (auth:domolibrary.client.DomoAuth.DomoAuth,\n                      return_raw:bool=False, debug_api:bool=False,\n                      debug_num_stacks_to_drop=2, logger:Optional[domolibr\n                      ary.client.Logger.Logger]=None)\n\nretrieves all users from Domo\n\nsample implementation of get all_users\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_users = await DomoUsers.all_users(\n    auth=token_auth, debug_api=False, return_raw=False\n)\n\npd.DataFrame(domo_users[0:3])\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n\n\n\n\n\n\n\n\nid\ndisplay_name\nemail_address\nrole_id\ndepartment\ntitle\navatar_key\nphone_number\nweb_landing_page\nweb_mobile_landing_page\nemployee_id\nemployee_number\nhire_date\nreports_to\npublisher_domain\nsubscriber_domain\nvirtual_user_id\ncustom_attributes\nrole\nauth\n\n\n\n\n0\nNone\nmonitor\nmonitor@domo.com\n1\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n{}\nNone\n{'domo_instance': 'domo-community', 'domo_acce...\n\n\n1\n1003855998\nChristine Hsieh\nchristine.hsieh@hellofresh.com\n2\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n{}\nNone\n{'domo_instance': 'domo-community', 'domo_acce...\n\n\n2\n1005321923\nMatthew Lambourne\nmatthew.lambourne@frankandoak.com\n2\nNone\nFinancial Controller\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n{}\nNone\n{'domo_instance': 'domo-community', 'domo_acce...\n\n\n\n\n\n\n\n\n\n\nsample implementation of searching users by_id\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoUsers.by_id(\n    auth=token_auth,\n    user_ids=[\"1006847540\", \"1012895591\"],\n    only_allow_one=False,\n    return_raw=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='1012895591', display_name='JeMiller', email_address='JeMiller@marketaxess.com', role_id=2097317660, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None),\n DomoUser(id='1006847540', display_name='Marc-Anton Clavel', email_address='marcanton.clavel@domo.com', role_id=2, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)]\n\n\n\nsource\n\n\n\nDomoUsers.by_email\n\n DomoUsers.by_email (email_ls:list[str],\n                     auth:domolibrary.client.DomoAuth.DomoAuth,\n                     only_allow_one:bool=True, debug_api:bool=False,\n                     debug_num_stacks_to_drop=2, return_raw:bool=False)\n\n\nsample implementation of searching for a user by email\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait DomoUsers.by_email(\n    auth=token_auth,\n    email_ls=[\"jae@onyxreporting.com\"],\n    only_allow_one=True,\n    return_raw=False,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoUser(id='1893952720', display_name='Jae Wilson1', email_address='jae@onyxreporting.com', role_id=810756122, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)\n\n\n\nsource\n\n\n\nDomoUsers.virtual_user_by_subscriber_instance\n\n DomoUsers.virtual_user_by_subscriber_instance\n                                                (subscriber_instance_ls:st\n                                                r, auth:domolibrary.client\n                                                .DomoAuth.DomoAuth,\n                                                debug_api:bool=False,\n                                                return_raw:bool=False)\n\n\nsample implementation of retrieving virtual users for a subscriber instance\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait DomoUsers.virtual_user_by_subscriber_instance(\n    auth=token_auth,\n    subscriber_instance_ls=[\"domo-community\", \"test\"],\n    # return_raw=True,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n[DomoUser(id='44a56146-f422-4175-9c3b-a194f339f9b6', display_name=None, email_address=None, role_id=None, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain='domo-community.domo.com', subscriber_domain='domo-community.domo.com', virtual_user_id='fc:f230ba95-bc49-4875-a0db-3c7cd58ed3cc', custom_attributes={}, role=None),\n DomoUser(id='8b5c26e0-db3a-40f8-855f-6189ac3cf5c8', display_name=None, email_address=None, role_id=None, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain='domo-community.domo.com', subscriber_domain='test.domo.com', virtual_user_id='fc:e3ce6205-6717-42b4-ba1c-16b5e40eca98', custom_attributes={}, role=None)]",
    "crumbs": [
      "Blog",
      "Classes",
      "User"
    ]
  },
  {
    "objectID": "classes/domouser.html#crud-users",
    "href": "classes/domouser.html#crud-users",
    "title": "User",
    "section": "CRUD Users",
    "text": "CRUD Users\n\nsource\n\nDomoUsers.create_user\n\n DomoUsers.create_user (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        display_name, email_address, role_id,\n                        password:str=None,\n                        send_password_reset_email:bool=False,\n                        debug_api:bool=False,\n                        session:httpx.AsyncClient=None)\n\nclass method that creates a new Domo user\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\ntry:\n    await DomoUsers.create_user(\n        auth=token_auth,\n        display_name=\"test_and_delete\",\n        email_address=\"test26@test.com\",\n        role_id=5,\n    )\nexcept User_CrudError as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  User_CrudError 🛑 - function: create_user || status 400 || Bad Request - does this user (email) already exist? at domo-community\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoUsers.upsert_user(\n    email_address=\"test4@test.com\",\n    display_name=f\"test - updated via dl {dt.date.today()}\",\n    role_id=3,\n    auth=token_auth,\n    debug_prn=True,\n    debug_api=False,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoUser(id='1793882853', display_name='test - updated via dl 2024-03-23', email_address='test4@test.com', role_id=3, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=DomoRole(id=3, name='Editor', description='Can edit Cards, Pages, DataSets, and Dataflows', is_system_role=True, is_default_role=None, grant_ls=[], membership_ls=[]))\n\n\n\nsource\n\n\nDomoUser.delete_user\n\n DomoUser.delete_user (auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                       debug_api:bool=False,\n                       session:httpx.AsyncClient=None,\n                       debug_num_stacks_to_drop=2, parent_class=None)\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndmuser = await DomoUsers.by_email(\n    auth=token_auth,\n    email_ls=[\"test4@test.com\"],\n    only_allow_one=True,\n    return_raw=False,\n    debug_api=False,\n)\nprint(dmuser)\n\nawait dmuser.delete_user()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nDomoUser(id='1793882853', display_name='test - updated via dl 2024-03-23', email_address='test4@test.com', role_id=3, department=None, title=None, avatar_key=None, phone_number=None, web_landing_page=None, web_mobile_landing_page=None, employee_id=None, employee_number=None, hire_date=None, reports_to=None, publisher_domain=None, subscriber_domain=None, virtual_user_id=None, custom_attributes={}, role=None)\n\n\nResponseGetData(status=200, response='', is_success=True, parent_class=None)",
    "crumbs": [
      "Blog",
      "Classes",
      "User"
    ]
  },
  {
    "objectID": "classes/domoaccount.html",
    "href": "classes/domoaccount.html",
    "title": "Account",
    "section": "",
    "text": "source",
    "crumbs": [
      "Blog",
      "Classes",
      "Account"
    ]
  },
  {
    "objectID": "classes/domoaccount.html#domoaccount-get-methods",
    "href": "classes/domoaccount.html#domoaccount-get-methods",
    "title": "Account",
    "section": "DomoAccount GET methods",
    "text": "DomoAccount GET methods\n\nsource\n\nDomoAccounConfig_MissingFields\n\n DomoAccounConfig_MissingFields (domo_instance, missing_keys, account_id)\n\nbase exception\n\nsample of hidden function _get_config\ncalled by DomoAccount.get_by_id()\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_account = DomoAccount(\n    auth=token_auth,\n    id=45,\n)\n\ntry:\n    res = await domo_account._get_config(\n        debug_api=False, return_raw=False, is_suppress_no_config=False\n    )\n    print(res)\n\nexcept AccountConfig_UsesOauth as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\ndata provider type google-spreadsheets uses OAuth and therefore wouldn't return a Config object\ndata provider type google-spreadsheets uses OAuth and therefore wouldn't return a Config object\n\n\n\nsource\n\n\n\nDomoAccount.get_by_id\n\n DomoAccount.get_by_id (auth:domolibrary.client.DomoAuth.DomoAuth,\n                        account_id:int, is_suppress_no_config:bool=True,\n                        session:httpx.AsyncClient=None,\n                        return_raw:bool=False, debug_api:bool=False,\n                        debug_num_stacks_to_drop=2)\n\nretrieves account metadata and attempts to retrieve config\n\nsample implementation of get_by_id\nthis implementation returns a result because accoun_id 5 is linked to a data_provider (domo_governance) that has been defined in the DomoAccount_Config.AccountConfig enum\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait DomoAccount.get_by_id(\n    auth=token_auth,\n    account_id=71,\n    return_raw=False,\n    debug_api=False,\n    is_suppress_no_config=True,\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccount(id=71, name='domolibrary test account - updated 2024-03-23', data_provider_type='abstract-credential-store', created_dt=datetime.datetime(2023, 5, 18, 15, 58, 12), modified_dt=datetime.datetime(2024, 3, 23, 13, 0, 26), config=DomoAccount_Config_AbstractCredential(credentials='********'), owners=None, is_admin_summary=False)\n\n\nThis implementation fails because the data_provider_type has not been defined in DomoAccount_Config.AccountConfig\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\nawait DomoAccount.get_by_id(\n    auth=token_auth, account_id=45, return_raw=False, debug_api=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\ndata provider type google-spreadsheets uses OAuth and therefore wouldn't return a Config object\n\n\nDomoAccount(id=45, name='test-goolesheets', data_provider_type='google-spreadsheets', created_dt=datetime.datetime(2022, 10, 4, 16, 59, 14), modified_dt=datetime.datetime(2023, 4, 24, 9, 40, 28), config=DomoAccount_NoConfig_OAuth(is_oauth=True, is_defined_config=False), owners=None, is_admin_summary=False)",
    "crumbs": [
      "Blog",
      "Classes",
      "Account"
    ]
  },
  {
    "objectID": "classes/domoaccount.html#domoaccount-crud-methods",
    "href": "classes/domoaccount.html#domoaccount-crud-methods",
    "title": "Account",
    "section": "DomoAccount CRUD Methods",
    "text": "DomoAccount CRUD Methods\n\nCreate Account\n\nsource\n\n\nDomoAccount.create_account\n\n DomoAccount.create_account (account_name:str,\n                             config:domolibrary.classes.DomoAccount_Config\n                             .DomoAccount_Config,\n                             auth:domolibrary.client.DomoAuth.DomoAuth,\n                             debug_api:bool=False, return_raw:bool=False,\n                             session:httpx.AsyncClient=None)\n\n\n\nUpdate DomoAccount\n\nsource\n\n\nDomoAccount.update_config\n\n DomoAccount.update_config\n                            (auth:domolibrary.client.DomoAuth.DomoAuth=Non\n                            e, debug_api:bool=False, config:domolibrary.cl\n                            asses.DomoAccount_Config.DomoAccount_Config=No\n                            ne, is_suppress_no_config=False,\n                            debug_num_stacks_to_drop=2,\n                            session:httpx.AsyncClient=None,\n                            return_raw:bool=False)\n\n\nSample implementation of update_config\nto update the account config,\n\nassign DomoAccount class instance domo_account.config a DomoAccount class.\n\nthe AccountConfig enumerates all of the DomoAccounts currently available. issue a pull request to add a new one\neach member of AccountConfig uses the camel_case spelling of the data-provider-type\n\n\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n# creates a DomoAccount object\ndomo_account = await DomoAccount.get_by_id(auth=token_auth, account_id=71)\n\n\n# update domo Account API without passing explicit config object\n# adjust configuration information for that object\ndomo_account.config.domo_instance = \"any_new_value_goes_here\"\nawait domo_account.update_config()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccount(id=71, name='domolibrary test account - updated 2024-03-23', data_provider_type='abstract-credential-store', created_dt=datetime.datetime(2023, 5, 18, 15, 58, 12), modified_dt=datetime.datetime(2024, 3, 23, 13, 0, 26), config=DomoAccount_Config_AbstractCredential(credentials='********'), owners=None, is_admin_summary=False)\n\n\nThe config can be updated by passing a new AccountConfig object\n\n# import json\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_account = await DomoAccount.get_by_id(auth=token_auth, account_id=71)\n\n# update domo Account API by passing new config object\nconfig = AccountConfig.abstract_credential_store.value(\n    credentials=json.dumps({\"domo_instance\": token_auth.domo_instance})\n)\nawait domo_account.update_config(config=config)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccount(id=71, name='domolibrary test account - updated 2024-03-23', data_provider_type='abstract-credential-store', created_dt=datetime.datetime(2023, 5, 18, 15, 58, 12), modified_dt=datetime.datetime(2024, 3, 23, 13, 0, 26), config=DomoAccount_Config_AbstractCredential(credentials='********'), owners=None, is_admin_summary=False)\n\n\n\nsource\n\n\n\nDomoAccount.update_name\n\n DomoAccount.update_name (account_name:str=None,\n                          auth:domolibrary.client.DomoAuth.DomoAuth=None,\n                          debug_api:bool=False,\n                          session:httpx.AsyncClient=None,\n                          return_raw:bool=False)\n\n\nsample implementation of update_name\nDomoAccount can be updated by altering properties and then calling DomoAccount.update_name() or by passing the account_name parameter\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_account = await DomoAccount.get_by_id(auth=token_auth, account_id=71)\ndomo_account.name = f\"DomoLibrary - update {dt.datetime.now()}\"\nawait domo_account.update_name()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccount(id=71, name='DomoLibrary - update 2024-03-23 13:03:16.085252', data_provider_type='abstract-credential-store', created_dt=datetime.datetime(2023, 5, 18, 15, 58, 12), modified_dt=datetime.datetime(2024, 3, 23, 13, 0, 26), config=DomoAccount_Config_AbstractCredential(credentials='********'), owners=None, is_admin_summary=False)\n\n\n\n# import datetime as dt\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_account = await DomoAccount.get_by_id(auth=token_auth, account_id=71)\n\nawait domo_account.update_name(\n    account_name=f\"DomoLibrary - testrename {dt.date.today()}\", return_raw=False\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nDomoAccount(id=71, name='DomoLibrary - update 2024-03-23 13:03:16.085252', data_provider_type='abstract-credential-store', created_dt=datetime.datetime(2023, 5, 18, 15, 58, 12), modified_dt=datetime.datetime(2024, 3, 23, 13, 3, 15), config=DomoAccount_Config_AbstractCredential(credentials='********'), owners=None, is_admin_summary=False)\n\n\n\n\n\nDelete Account\n\nsource\n\n\nDomoAccount.delete_account\n\n DomoAccount.delete_account\n                             (auth:domolibrary.client.DomoAuth.DomoAuth=No\n                             ne, debug_api:bool=False,\n                             session:httpx.AsyncClient=None,\n                             debug_num_stacks_to_drop=2,\n                             parent_class=None)\n\n\n\nShare DomoAccount\n\nsource\n\n\nDomoAccount.is_feature_accountsv2_enabled\n\n DomoAccount.is_feature_accountsv2_enabled\n                                            (auth:domolibrary.client.DomoA\n                                            uth.DomoFullAuth=None,\n                                            return_raw:bool=False)\n\nuses bootstrap class to test if the auth object refers to an instancce that has the account-v2 feature switch enabled\n\nsample implementation of is_veature_accountsv2_enabled\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=\"jae@onyxreporting.com\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\ncommunity_account = await DomoAccount.get_by_id(account_id=71, auth=full_auth)\nassert community_account\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-alpha\",\n    domo_username=\"jae@onyxreporting.com\",\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\nalpha_account = await DomoAccount.get_by_id(account_id=5, auth=full_auth)\nassert alpha_account\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-alpha\",\n    domo_access_token=os.environ[\"ALPHA_ACCESS_TOKEN\"],\n)\nalpha_account_token = await DomoAccount.get_by_id(account_id=5, auth=token_auth)\nassert alpha_account_token\n\n{\n    \"domo-community-full_auth\": await community_account.is_feature_accountsv2_enabled(\n        return_raw=False\n    ),\n    \"domo-alpha-full_auth\": await alpha_account.is_feature_accountsv2_enabled(\n        return_raw=False\n    ),\n    \"domo-alpha-token_auth\": await alpha_account_token.is_feature_accountsv2_enabled(\n        return_raw=False\n    ),\n}\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nWarning - unable to test if accounts_v2 feature is enabled in domo-alpha, recommend pass FullAuth\n\n\n{'domo-community-full_auth': 0,\n 'domo-alpha-full_auth': 1,\n 'domo-alpha-token_auth': -1}\n\n\n\n\nsample implementation of share_account_v2\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-alpha\",\n    domo_access_token=os.environ[\"ALPHA_ACCESS_TOKEN\"],\n)\n\ndomo_account = await DomoAccount.get_by_id(account_id=5, auth=token_auth)\ntry:\n    print(\n        await domo_account._share_v2(\n            access_level=ShareAccount_V2_AccessLevel.CAN_VIEW,\n            group_id=1814479647,\n            auth=token_auth,\n            debug_api=False,\n            is_suppress_already_shared=True,\n        )\n    )\n\nexcept ShareAccount_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\nWarning - unable to test if accounts_v2 feature is enabled in domo-alpha, recommend pass FullAuth\nalready shared 5 - Abstract Credential Store Account with 1814479647\n\n\n\n\nsample implementation of share_account_v1\n\n# import domolibrary.classes.DomoGroup as dmg\n# import domolibrary.utils.chunk_execution as ce\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndomo_account = await DomoAccount.get_by_id(account_id=45, auth=token_auth)\ndomo_group = await dmg.DomoGroup.get_by_id(group_id=1814479647, auth=token_auth)\n\ndomo_users = await domo_group.Membership.get_members()\ndomo_user_ids = [domo_user.id for domo_user in domo_users]\n\ntry:\n    print(\n        await ce.gather_with_concurrency(\n            *[\n                domo_account._share_v1(\n                    access_level=ShareAccount_V1_AccessLevel.CAN_EDIT,\n                    user_id=user_id,\n                    auth=token_auth,\n                    debug_api=False,\n                )\n                for user_id in domo_user_ids\n            ],\n            n=10,\n        )\n    )\n\nexcept ShareAccount_Error as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\ndata provider type google-spreadsheets uses OAuth and therefore wouldn't return a Config object\nWarning - unable to test if accounts_v2 feature is enabled in domo-community, recommend pass FullAuth\nWarning - unable to test if accounts_v2 feature is enabled in domo-community, recommend pass FullAuth\n['shared 45 - test-goolesheets with 55874022', 'already shared 45 - test-goolesheets with 1893952720']\n\n\n\n\nsample implementation of domo_account.share\n\n# import domolibrary.client.DomoAuth as dmda\n# import domolibrary.classes.DomoGroup as dmg\n\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\naccount_id = 71\ndomo_account = await DomoAccount.get_by_id(account_id=account_id, auth=full_auth)\nassert domo_account\n\ndomo_group = await dmg.DomoGroup.get_by_id(group_id=1814479647, auth=token_auth)\nassert domo_group\n\ndomo_users = await domo_group.Membership.get_members()\nassert domo_users\n\nawait domo_account.share(\n    domo_group=domo_group,\n    access_level=ShareAccount_V1_AccessLevel.CAN_VIEW,\n    auth=full_auth,\n    debug_prn=True,\n    debug_api=False,\n)\n\n{'is_accounts_v2': 0, 'group_id': 1814479647, 'user_ids': ['55874022', '1893952720']}\n\n\n['shared 71 - DomoLibrary - testrename 2024-03-23 with 55874022',\n 'already shared 71 - DomoLibrary - testrename 2024-03-23 with 1893952720']",
    "crumbs": [
      "Blog",
      "Classes",
      "Account"
    ]
  },
  {
    "objectID": "integrations/rolehierarchy.html",
    "href": "integrations/rolehierarchy.html",
    "title": "RoleHierarchy",
    "section": "",
    "text": "source\n\nextract_role_hierarchy\n\n extract_role_hierarchy (role:domolibrary.classes.DomoRole.DomoRole,\n                         hierarchy_delimiter, debug_prn:bool=False)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrole\nDomoRole\n\n\n\n\nhierarchy_delimiter\n\n\n\n\n\ndebug_prn\nbool\nFalse\n\n\n\nReturns\nDomoRole\n\naugments the domo role with a hierarchy INT attribute\n\n\n\n\nsource\n\n\nget_roles_w_hierarchy\n\n get_roles_w_hierarchy (auth, hierarchy_delimiter=' - h',\n                        debug_prn:bool=False, debug_api:bool=False)\n\ngets instance roles and adds an attribute hierarchy\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\ndomo_roles = await get_roles_w_hierarchy(auth=token_auth)\n\n\npd.DataFrame(\n    [\n        {\n            \"role_name\": role.name,\n            \"role_id\": role.id,\n            \"description\": role.description,\n            \"hierarchy\": role.hierarchy,\n        }\n        for role in sorted(domo_roles, key=lambda x: x.hierarchy, reverse=True)\n    ]\n)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nConnectTimeout: \n\n\n\nsource\n\n\ncalc_role\n\n calc_role (current_role_id, new_role_name, auth, hierarchy_delimiter=' -\n            h', is_alter_system_roles:bool=False, debug_prn:bool=False)\n\ncompares current role to new role hierarchy and returns the higher one. will not adjust system roles\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nprint(await calc_role(3, \"manual_super_admin\", auth=token_auth, debug_prn=True))\nprint(\"\\n\")\nprint(\n    await calc_role(\n        3,\n        \"manual_super_admin\",\n        is_alter_system_roles=True,\n        auth=token_auth,\n        debug_prn=True,\n    )\n)\nprint(\"\\n\")\ntry:\n    print(\n        await calc_role(\n            3, \"social\", is_alter_system_roles=True, auth=token_auth, debug_prn=True\n        )\n    )\nexcept Exception as e:\n    print(e)\nprint(\"\\n\")\nprint(\n    await calc_role(\n        3, \"Social\", is_alter_system_roles=True, auth=token_auth, debug_prn=True\n    )\n)\n\nEditor is a system role -- no changes\nDomoRole(id=3, name='Editor', description='Can edit Cards, Pages, DataSets, and Dataflows', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[])\n\n\nupgrade role: Editor - 5 to a manual_super_admin - 9\nDomoRole(id=275763436, name='manual_super_admin', description='Full access to everything - h9', is_system_role=0, is_default_role=False, grant_ls=[], membership_ls=[])\n\n\nsocial not found in domo-community\n\n\ndo nothing:  Editor - 5 exceeds or equals Social - 1\nDomoRole(id=3, name='Editor', description='Can edit Cards, Pages, DataSets, and Dataflows', is_system_role=True, is_default_role=False, grant_ls=[], membership_ls=[])",
    "crumbs": [
      "Blog",
      "Integrations",
      "RoleHierarchy"
    ]
  },
  {
    "objectID": "integrations/Automation.html",
    "href": "integrations/Automation.html",
    "title": "domolibrary",
    "section": "",
    "text": "source\n\nremove_partition_by_x_days\n\n remove_partition_by_x_days\n                             (auth:domolibrary.client.DomoAuth.DomoFullAut\n                             h, dataset_id:str, x_last_days:int=0,\n                             separator:str=None, date_index:int=0,\n                             date_format:str='%Y-%m-%d')\n\n\n# export\n@dataclass\nclass LogError:\n    def __init__(self):\n        pass\n\n    function_str: str\n    message_str: str\n    domo_instance: str\n\n\ndef write_error(file_path, log_err: LogError):\n    file_exists = os.path.isfile(file_path)\n\n    with open(file_path, \"a+\") as log_file:\n        headers = list(log_err.__dict__.keys())\n        writer = csv.DictWriter(log_file, fieldnames=headers)\n\n        if not file_exists:\n            writer.writeheader()\n\n        writer.writerows([log_err.__dict__])\n\n\nsource\n\n\nget_company_domains\n\n get_company_domains (auth:domolibrary.client.DomoAuth.DomoFullAuth,\n                      dataset_id:str, handle_err_fn:&lt;built-\n                      infunctioncallable&gt;, sql:str='select domain from\n                      table', global_admin_username:str=None,\n                      global_admin_password:str=None,\n                      execution_env:str=None, debug_api:bool=False)",
    "crumbs": [
      "Blog",
      "Integrations",
      "Automation"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "",
    "text": "use_snake_case for everything except class names is_bool - prefix any boolean parameters with is_bool"
  },
  {
    "objectID": "index.html#formatting",
    "href": "index.html#formatting",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "",
    "text": "use_snake_case for everything except class names is_bool - prefix any boolean parameters with is_bool"
  },
  {
    "objectID": "index.html#patterns-to-recycle",
    "href": "index.html#patterns-to-recycle",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "Patterns to recycle",
    "text": "Patterns to recycle\n\nUPSERT\ndomolibrary.classes.DomoUser upsert_user\n\n\nsearch entity\nuser_routes.SearchUser_NoResults()"
  },
  {
    "objectID": "index.html#what-is-it",
    "href": "index.html#what-is-it",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "What is it?",
    "text": "What is it?\ndomolibrary is a Python package that provides a OOP (class-based) and a functional approach to interacting with Domo’s API framework.\nAll accessed APIs are documented under DataCrew’s Domo Documentation page.\nThis library was created by DataCrew contributor Jae Wilson."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "Install",
    "text": "Install\nThe DataCrew team is hard at work expanding the list of available classes and routes. We have a ton of work completed, it’s just a matter of migrating and documenting the code into this library.\npip install domolibrary"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "domolibrary: a powerful pydomo alternative",
    "section": "How to use",
    "text": "How to use\n\nAuthentication\nFor each task, consider the appropriate DomoAuth mechanism. In most cases DomoFullAuth or DomoTokenAuth will be appropriate as this library predominately accesses private APIs.\nAny Public routes or methods will be labeled appropriately in which case you should use DomoDeveloperAuth. Public routes are APIs enumerated and documented under Developer.Domo.com.\nTypically each project will begin with configuring an auth object. If you are accessing multiple Domo instances, you’ll probably need multiple auth objects.\n\n# configure an auth method\nimport os\nimport domolibrary.client.DomoAuth as dmda\n\ntoken_auth = dmda.DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\n\n\nOption 1: class based programming\nIn this project domo entities, DomoActivityLog, DomoDataset are all prefixed ‘Domo’ and can be found in the classes folder. Each class method will call one or more routes. Each route will interact with one and only one API.\nAlthough most methods will be standard methods that will be called after creating an instance of the class, some methods will be classmethods which return an instance of the class.\nIn the example below, DomoDataset.get_from_id is a classmethod.\nNote: DomoLibrary uses the asynchronous aiohttp requests library to offer users the ability to write concurrently executing code.\n\n# import domolibrary.classes.DomoDataset as dmds\n\n# # this is a class method\n# domo_ds = await dmds.DomoDataset.get_from_id(auth=token_auth, dataset_id=os.environ['DOJO_DATASET_ID'])\n# domo_ds\n\nOnce instantiated, you can call methods to interact with that object. You typically won’t have to pass auth creds again because they are saved to the object.\nIn the example below we are retrieving the DomoDataset_Schema which consists of subclass DomoDataset_Schema_Column using the DomoDataset_Schema.get method.\nWe take the approach of where possible converting dictionaries from Domo APIs into classes because it provides greater predictability when users are creating integrations between platforms (ex. Domo to Trello).\n\n# await domo_ds.schema.get()\n\nTypically all information about an entity is saved in the object\n\n# domo_ds.__dict__\n\n\n\nOption 2 functional programming\nAlthough classes add a pretty wrapper for interacting with Domo APIs, users can opt to interact directly with APIs by way of routes.\nAll route functions will exclusively call one API and will always return a ResponseGetData object OR raise an Exception if appropriate.\nFor example we can implement similar functionality as the Option 1 example by calling the get_dataset_by_id function.\n\nimport domolibrary.routes.dataset as dataset_routes\n\nds_res = await dataset_routes.get_dataset_by_id(\n    auth=token_auth, dataset_id=os.environ[\"DOJO_DATASET_ID\"]\n)\nds_res\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\nResponseGetData(status=200, response={'id': '04c1574e-c8be-4721-9846-c6ffa491144b', 'displayType': 'domo-jupyterdata', 'dataProviderType': 'domo-jupyterdata', 'type': 'Jupyter', 'name': 'domo_kbs', 'owner': {'id': '1893952720', 'name': 'Jae Wilson1', 'type': 'USER', 'group': False}, 'status': 'SUCCESS', 'created': 1668379680000, 'lastTouched': 1711222468000, 'lastUpdated': 1668385822045, 'rowCount': 1185, 'columnCount': 7, 'cardInfo': {'cardCount': 2, 'cardViewCount': 0}, 'properties': {'formulas': {'formulas': {'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5': {'templateId': 2664, 'id': 'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5', 'name': 'rowcount', 'formula': 'sum(1)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'variable': False}, 'calculation_38846559-d190-4ab1-809b-bcd361db5670': {'templateId': 2665, 'id': 'calculation_38846559-d190-4ab1-809b-bcd361db5670', 'name': 'max_views', 'formula': 'max(views)', 'status': 'VALID', 'dataType': 'LONG', 'persistedOnDataSource': True, 'isAggregatable': True, 'bignumber': False, 'columnPositions': [{'columnName': 'views', 'columnPosition': 4}], 'variable': False}}}}, 'state': 'SUCCESS', 'validConfiguration': True, 'validAccount': True, 'streamId': 825, 'transportType': 'API', 'adc': True, 'adcExternal': False, 'adcSource': 'DIRECT', 'cloudId': 'domo', 'cloudName': 'Domo', 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN', 'hidden': False, 'tags': '[\"Mar-23-2024 13:34\",\"developer_documentation\",\"hackercore\"]', 'scheduleActive': True, 'cardCount': 2, 'cryoStatus': 'ADRENALINE', 'cloudEngine': 'domo'}, is_success=True, parent_class=None)\n\n\nResponseGetData will always include a boolean is_success, the API status, and raw API response.\nTypically the route methods will not alter the response unless the API does not include a descriptive response (ex, routes.dataset.set_dataset_tags does not return a response so we artificially alter the response in the function.)\n\n[\n    (prop, type(getattr(ds_res, prop)))\n    for prop in dir(ds_res)\n    if not prop.startswith(\"_\")\n]\n\n[('auth', domolibrary.client.DomoAuth.DomoTokenAuth),\n ('is_success', bool),\n ('parent_class', NoneType),\n ('response', dict),\n ('set_response', method),\n ('status', int),\n ('traceback_details', domolibrary.client.Logger.TracebackDetails)]\n\n\n\nds_res.response\n\n{'id': '04c1574e-c8be-4721-9846-c6ffa491144b',\n 'displayType': 'domo-jupyterdata',\n 'dataProviderType': 'domo-jupyterdata',\n 'type': 'Jupyter',\n 'name': 'domo_kbs',\n 'owner': {'id': '1893952720',\n  'name': 'Jae Wilson1',\n  'type': 'USER',\n  'group': False},\n 'status': 'SUCCESS',\n 'created': 1668379680000,\n 'lastTouched': 1711222468000,\n 'lastUpdated': 1668385822045,\n 'rowCount': 1185,\n 'columnCount': 7,\n 'cardInfo': {'cardCount': 2, 'cardViewCount': 0},\n 'properties': {'formulas': {'formulas': {'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5': {'templateId': 2664,\n     'id': 'calculation_ca9d4b1c-f73a-4f76-9f94-d3c4ca6871c5',\n     'name': 'rowcount',\n     'formula': 'sum(1)',\n     'status': 'VALID',\n     'dataType': 'LONG',\n     'persistedOnDataSource': True,\n     'isAggregatable': True,\n     'bignumber': False,\n     'variable': False},\n    'calculation_38846559-d190-4ab1-809b-bcd361db5670': {'templateId': 2665,\n     'id': 'calculation_38846559-d190-4ab1-809b-bcd361db5670',\n     'name': 'max_views',\n     'formula': 'max(views)',\n     'status': 'VALID',\n     'dataType': 'LONG',\n     'persistedOnDataSource': True,\n     'isAggregatable': True,\n     'bignumber': False,\n     'columnPositions': [{'columnName': 'views', 'columnPosition': 4}],\n     'variable': False}}}},\n 'state': 'SUCCESS',\n 'validConfiguration': True,\n 'validAccount': True,\n 'streamId': 825,\n 'transportType': 'API',\n 'adc': True,\n 'adcExternal': False,\n 'adcSource': 'DIRECT',\n 'cloudId': 'domo',\n 'cloudName': 'Domo',\n 'permissions': 'READ_WRITE_DELETE_SHARE_ADMIN',\n 'hidden': False,\n 'tags': '[\"Mar-23-2024 13:34\",\"developer_documentation\",\"hackercore\"]',\n 'scheduleActive': True,\n 'cardCount': 2,\n 'cryoStatus': 'ADRENALINE',\n 'cloudEngine': 'domo'}\n\n\n\n\nAccess Paginated APIs using the Looper\nA hidden advantage of using the DomoLibrary is that paginated API requests are baked into the route’s definition.\nConsider query_dataset_private from the routes.dataset.\nInside this function we are using looper from client.get_data to paginate over the API response."
  },
  {
    "objectID": "utils/dictdot.html",
    "href": "utils/dictdot.html",
    "title": "DictDot",
    "section": "",
    "text": "source\n\nDictDot\n\n DictDot (dictionary:dict, **kwargs)\n\na utility class that converts json into an object that supports data retrieval with dot notation\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\ndict\ndictionary to convert\n\n\nkwargs\n\n\n\n\n\n\nsample implementation of DictDot\n\nfoo = {\n    \"name\": \"my object\",\n    \"description\": \"please convert me\",\n    \"type\": \"a good old fashioned dictionary\",\n}\n\ndd = DictDot(foo)\n\nprint(dd)\n\ndd.type\n\nDictDot(name='my object', description='please convert me', type='a good old fashioned dictionary')\n\n\n'a good old fashioned dictionary'\n\n\n\nsource\n\n\n\nsplit_str_to_obj\n\n split_str_to_obj (piped_str:str, key_ls:list[str])\n\nsplit a pipe separated list into an object with keys defined by the list of keys ex. “test_instance|myemail|sample_password”, [“domo_instance”, “domo_username”, “domo_password”] = {“domo_instance” : “test_intance” , “domo_username” : “myemail”, “domo_password”:“sample_password”}\n\n\nsample implementation of split_str_to_obj\n\ndd = split_str_to_obj(\n    piped_str=\"test_instance|myemail|sample_password\",\n    key_ls=[\"domo_instance\", \"domo_username\", \"domo_password\"],\n)\n\ndd.domo_instance\n\n'test_instance'",
    "crumbs": [
      "Blog",
      "Utils",
      "DictDot"
    ]
  },
  {
    "objectID": "utils/convert.html",
    "href": "utils/convert.html",
    "title": "Conversion utility functions",
    "section": "",
    "text": "Date related Functions\n\nsource\n\nconvert_epoch_millisecond_to_datetime\n\n convert_epoch_millisecond_to_datetime (epoch:int)\n\nconvert Epoch time with miliseconds to Date time\n\nsource\n\n\nconvert_datetime_to_epoch_millisecond\n\n convert_datetime_to_epoch_millisecond (datetime:datetime.datetime)\n\nconvert DateTime to Epoch time with Miliseconds\n\nsample implementations of convert_datetime\n\nimport time\nimport datetime as dt\n\ncur_time = int(time.time() * 1000)\n\ncur_datetime = convert_epoch_millisecond_to_datetime(cur_time)\nprint(cur_datetime)\n\ntest_time = convert_datetime_to_epoch_millisecond(cur_datetime)\nprint(test_time)\n\nfctest.test_eq(test_time, cur_time)\n\n2024-03-23 20:06:29.441000\n1711224389441\n\n\n\n\n\n\nText related Functions\n\nsource\n\nconvert_snake_to_pascal\n\n convert_snake_to_pascal (clean_str)\n\nconverts ‘snake_case_str’ to ‘snakeCaseStr’\n\nsample implementation of convert_snake_case_to_pascal\n\nconvert_str = \"test_snake_case\"\n\nconvert_snake_to_pascal(convert_str)\n\n'testSnakeCase'\n\n\n\nsource\n\n\n\nconvert_str_to_snake_case\n\n convert_str_to_snake_case (text_str, is_only_alphanumeric:bool=False)\n\nconverts ‘snake_case_str’ to ‘snakeCaseStr’\n\n[\n    convert_str_to_snake_case(name, is_only_alphanumeric=True)\n    for name in [\n        \"Toolkit: Schema Management\",\n        \"Toolkit: DataSet S3 Backup\",\n        \"Sony Collaboration Publisher Executor\",\n        \"Toolkit: User Automation\",\n        \"Toolkit: DataSet Tag Automation\",\n    ]\n]\n\n['toolkit_schema_management',\n 'toolkit_dataset_s3_backup',\n 'sony_collaboration_publisher_executor',\n 'toolkit_user_automation',\n 'toolkit_dataset_tag_automation']\n\n\n\nsource\n\n\ntest_valid_email\n\n test_valid_email (email)\n\ntests if provided string is a for valid email\n\nsource\n\n\nInvalidEmail\n\n InvalidEmail (email)\n\nCommon base class for all non-exit exceptions.\n\ntest_valid_email(\"jae@onyxreporting.com\")\n\nTrue\n\n\n\ntry:\n    test_valid_email(\"jae myong@onyxreporting.com\")\nexcept InvalidEmail as e:\n    print(e)\n\ninvalid email: \"jae myong@onyxreporting.com\" provided\n\n\n\nsource\n\n\nconvert_string_to_bool\n\n convert_string_to_bool (v)\n\n\n\n\nDataFrame Conversion\n\nsource\n\nconcat_list_dataframe\n\n concat_list_dataframe (df_ls:list[pandas.core.frame.DataFrame])\n\ntake a list of dataframes and collapse into one dataframe\n\nsource\n\n\nConcatDataframe_InvalidElement\n\n ConcatDataframe_InvalidElement (elem)\n\nCommon base class for all non-exit exceptions.\n\ndf = pd.DataFrame([{\"col_a\": \"a\", \"col_b\": \"b\", \"col_c\": \"c\"}])\n\ndf_ls = [df, df, df]\n\nconcat_list_dataframe(df_ls)\n\n\n\n\n\n\n\n\n\ncol_a\ncol_b\ncol_c\n\n\n\n\n0\na\nb\nc\n\n\n1\na\nb\nc\n\n\n2\na\nb\nc",
    "crumbs": [
      "Blog",
      "Utils",
      "Conversion utility functions"
    ]
  },
  {
    "objectID": "utils/upload_data.html",
    "href": "utils/upload_data.html",
    "title": "Upload Data to Domo",
    "section": "",
    "text": "source\n\nupload_data\n\n upload_data (data_fn, instance_auth:domolibrary.client.DomoAuth.DomoAuth,\n              consol_ds:domolibrary.classes.DomoDataset.DomoDataset,\n              partition_key:str=None, upload_method:str='REPLACE',\n              is_index:bool=False, debug_prn:bool=False,\n              debug_fn:bool=True, debug_api:bool=False,\n              logger:domolibrary.client.Logger.Logger=None,\n              max_retry:int=2)\n\n\nsample implementation of upload_data with loop\n\n# import domolibrary.classes.DomoBootstrap as dmbsr\n# import httpx\n# import pandas as pd\n\n\nasync def data_fn(\n    instance_auth: dmda.DomoFullAuth,  # this API requires full auth\n    session: httpx.AsyncClient = None,\n    debug_api: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"function to call.  must return a dataframe.\"\"\"\n    try:\n        bsr = dmbsr.DomoBootstrap(auth=instance_auth)\n        instance_features = await bsr.get_features(debug_api=debug_api, session=session)\n\n        upload_df = pd.DataFrame(instance_features)\n        upload_df[\"instance\"] = instance_auth.domo_instance\n\n        return upload_df\n\n    except Exception as e:\n        print(f\"getting data : unexpected error: {e}\")\n        return None\n\n\n### get_auth\nfull_auth = dmda.DomoFullAuth(\n    domo_instance=\"domo-community\",\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n)\n\n# confirm retrieves token\nassert isinstance(await full_auth.get_auth_token(), str)\n\nds_id = \"44c5af30-ea04-49e4-9d7a-529afd223590\"\nds = await dmds.DomoDataset.get_from_id(dataset_id=ds_id, auth=full_auth)\n\nawait upload_data(\n    instance_auth=full_auth,  # instance where the data_fn function will execute against\n    consol_ds=ds,\n    partition_key=full_auth.domo_instance,\n    data_fn=data_fn,\n    is_index=True,\n    debug_fn=True,\n    debug_api=False,\n    max_retry=2,\n)\n\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 18, 'module_index': 12, 'num_stacks_to_drop_passed': 5}\n🏁 starting domo-community - data_fn\nstarting upload of 419 rows to domo-community in domo-community with 2 attempts\nattempt 1/2 for domo-community in domo-community\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 18, 'module_index': 12, 'num_stacks_to_drop_passed': 5}\n🚀 success upload of domo-community to 44c5af30-ea04-49e4-9d7a-529afd223590 in domo-community in data_fn\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 18, 'module_index': 12, 'num_stacks_to_drop_passed': 5}\n🥫 successfully indexed demo_instance_features in domo-community\n\n\nResponseGetData(status=200, response={'dataSourceId': '44c5af30-ea04-49e4-9d7a-529afd223590', 'uploadId': 1421, 'dataTag': 'domo-community', 'status': 'SUCCESS', 'size': {'rowCount': 419, 'columnCount': 7, 'numberOfBytes': 25956, 'partCount': 1}, 'indexing': {'requested': False}}, is_success=True, parent_class=None)\n\n\n\n# # | export\n# async def upload_data_with_date(\n#     instance_auth,\n#     data_fn,\n#     consol_ds,\n#     partition_date_col,\n#     partition_delimiter,\n#     start_date,\n#     end_date,\n#     debug_api: bool = False,\n#     debug_prn: bool = False,\n# ):\n\n#     instance_session = httpx.AsyncClient()\n\n#     print(\n#         f\"'🎬 upload_with_data: starting retrieval {start_date}, {end_date}, {instance_auth.domo_instance}\"\n#     )\n\n#     upload_df = await data_fn(\n#         instance_auth=instance_auth,\n#         session=instance_session,\n#         start_date=start_date,\n#         end_date=end_date,\n#         debug=debug,\n#     )\n\n#     await instance_session.aclose()\n\n#     if not isinstance(upload_df, pd.DataFrame):\n#         print(f\"🛑 error no data returned {instance_auth.domo_instance}\")\n#         print(upload_df)\n#         return None\n\n#     if debug_prn:\n#         print(\n#             f\"🧻 upload_with_data: starting upload {len(upload_df)} rows for {instance_auth.domo_instance}\"\n#         )\n\n#     task = []\n\n#     for index, partition_set in upload_df.drop_duplicates(\n#         subset=[partition_date_col]\n#     ).iterrows():\n#         partition_date = partition_set[partition_date_col]\n\n#         partition_key = (\n#             f\"{instance_auth.domo_instance}{partition_delimiter}{str(partition_date)}\"\n#         )\n\n#         task.append(\n#             consol_ds.upload_data(\n#                 upload_df=upload_df[(upload_df[partition_date_col] == partition_date)],\n#                 upload_method=\"REPLACE\",\n#                 partition_key=partition_key,\n#                 is_index=False,\n#                 debug_api=debug_api,\n#                 debug_prn=debug_prn,\n#             )\n#         )\n\n#     res = await asyncio.gather(*task)\n\n#     if debug_prn:\n#         print(\n#             f\"🎉 upload_with_data : finished uploading {len(upload_df)} rows for {instance_auth.domo_instance}\"\n#         )\n#     return res",
    "crumbs": [
      "Blog",
      "Utils",
      "Upload Data to Domo"
    ]
  },
  {
    "objectID": "client/logger.html",
    "href": "client/logger.html",
    "title": "Logger",
    "section": "",
    "text": "source\n\n\n\n get_traceback (root_module:str='&lt;module&gt;', num_stacks_to_drop=0,\n                parent_class:str=None, debug_traceback:bool=False)\n\nmethod that retrieves traceback\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nroot_module\nstr\n\n\n\n\nnum_stacks_to_drop\nint\n0\ndrop entries from the top of stack to exclude the functions that retrieve the traceback\n\n\nparent_class\nstr\nNone\n\n\n\ndebug_traceback\nbool\nFalse\n\n\n\nReturns\nTracebackDetails\n\nreturns a filtered list of FrameSummaries from traceback\n\n\n\n\nsource\n\n\n\n\n TracebackDetails (traceback_stack:[&lt;class'traceback.FrameSummary'&gt;],\n                   parent_class=None, debug_traceback:bool=False)\n\nresult of _get_traceback_details function\n\n\n\nclass Foo:\n    def __init__(self):\n        pass\n\n    def test_get_traceback_details(self, debug_traceback: bool = False):\n        return get_traceback(parent_class=self.__class__.__name__, debug_traceback=True)\n\n\n# # print traceback details for test_get_details function\ntest_foo = Foo()\n\ntest_foo.test_get_traceback_details(debug_traceback=True).__dict__\n\n{'len orig stack': 24, 'len filtered stack': 2, 'root_module_name': '&lt;module&gt;', 'root_module_index': 21, 'stacks_to_drop': 1}\n\n\n{'function_trail': '&lt;module&gt; -&gt; test_get_traceback_details',\n 'function_name': 'test_get_traceback_details',\n 'file_name': '/tmp/ipykernel_27360/1437577808.py',\n 'parent_class': 'Foo',\n 'traceback_stack': [&lt;FrameSummary file /tmp/ipykernel_27360/1437577808.py, line 13 in &lt;module&gt;&gt;,\n  &lt;FrameSummary file /tmp/ipykernel_27360/1437577808.py, line 6 in test_get_traceback_details&gt;]}\n\n\n\nsource\n\n\n\n\n\n Logger (app_name:str, root_module:Optional[str]='&lt;module&gt;',\n         output_fn:Optional[&lt;built-infunctioncallable&gt;]=None,\n         entity_id:Optional[str]=None, domo_instance:Optional[str]=None)\n\nlog class with user customizeable output method\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp_name\nstr\n\nname of the app for grouping logs\n\n\nroot_module\ntyping.Optional[str]\n\nroot module for stack trace\n\n\noutput_fn\ntyping.Optional[]\nNone\n\n\n\nentity_id\ntyping.Optional[str]\nNone\nfunction to call with write_logs method.\n\n\ndomo_instance\ntyping.Optional[str]\nNone\n\n\n\n\n\nsource\n\n\n\n\n Logger.get_traceback (root_module:str='&lt;module&gt;', num_stacks_to_drop=0,\n                       parent_class:str=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nroot_module\nstr\n\n\n\n\nnum_stacks_to_drop\nint\n0\ndrop entries from the top of stack to exclude the functions that retrieve the traceback\n\n\nparent_class\nstr\nNone\n\n\n\n\n\n\n\n\n# assert that the result of test_trace is of type FrameSummary\nlog = Logger(app_name=\"test traceback\")\n\n\nclass Foo:\n    logger: Logger\n\n    def __init__(self):\n        self.logger = Logger(app_name=self.__class__.__name__)\n\n    def test_traceback(self):\n        return self.logger.get_traceback().__dict__\n\n\ntest_foo = Foo()\n\ntest_foo.test_traceback()\n\n{'function_trail': '&lt;module&gt; -&gt; test_traceback',\n 'function_name': 'test_traceback',\n 'file_name': '/tmp/ipykernel_27360/2551220874.py',\n 'parent_class': 'Logger',\n 'traceback_stack': [&lt;FrameSummary file /tmp/ipykernel_27360/2551220874.py, line 17 in &lt;module&gt;&gt;,\n  &lt;FrameSummary file /tmp/ipykernel_27360/2551220874.py, line 12 in test_traceback&gt;]}\n\n\n\n\n\n\nsource\n\n\n\n Logger.log_warning (message, entity_id:Optional[str]=None,\n                     domo_instance:Optional[str]=None, debug_log=False,\n                     num_stacks_to_drop=3)\n\nlog a warning message\n\nsource\n\n\n\n\n Logger.log_error (message, entity_id:Optional[str]=None,\n                   domo_instance:Optional[str]=None, debug_log=False,\n                   num_stacks_to_drop=3)\n\nlog an error message\n\nsource\n\n\n\n\n Logger.log_info (message, entity_id:Optional[str]=None,\n                  domo_instance:Optional[str]=None, debug_log=False,\n                  num_stacks_to_drop=3)\n\nlog an informational message\n\nlogger = Logger(\n    app_name=\"test\",\n)\n\n\ndef test_log():\n    return logger.log_info(\"test the error returns type Info\", debug_log=False)\n\n\ntest_log()\n\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 27, 'module_index': 21, 'num_stacks_to_drop_passed': 5}\n\n\n{'date_time': datetime.datetime(2023, 9, 28, 13, 19, 58, 332482),\n 'application': 'test',\n 'log_type': 'Info',\n 'log_message': 'test the error returns type Info',\n 'breadcrumb': '',\n 'domo_instance': None,\n 'entity_id': None,\n 'function_name': 'test_log',\n 'file_name': '/tmp/ipykernel_27360/2082841627.py',\n 'function_trail': '&lt;module&gt; -&gt; test_log'}\n\n\n\n\n\n\nDuring Logger instantiation, users can pass a function, output_fn which will be called with the Logger.output_log method\n\nsource\n\n\n\n Logger.output_log ()\n\ncalls the user defined output function\n\n\n\nimport pandas as pd\n\n\ndef custom_write_logs_fn(logs):\n    print(\"printing logs\")\n    return pd.DataFrame(logs)\n\n\nlogger = Logger(app_name=\"test\", output_fn=custom_write_logs_fn)\n\n\ndef test_error():\n    try:\n        if 1 == 1:\n            raise Exception(\"random error\")\n\n    except Exception as e:\n        logger.log_error(e)\n\n\ndef double_test():\n    test_error()\n\n\n# record first error\ntest_error()\n\n# records second error nested inside double_test()\ndouble_test()\n\nlogger.output_log()\n\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 30, 'module_index': 24, 'num_stacks_to_drop_passed': 5}\nprinting logs\n\n\n\n\n\n\n\n\n\n\ndate_time\napplication\nlog_type\nlog_message\nbreadcrumb\ndomo_instance\nentity_id\nfunction_name\nfile_name\nfunction_trail\n\n\n\n\n0\n2024-03-23 20:06:29.613275\ntest\nError\nrandom error\n\nNone\nNone\ntest_error\n&lt;ipython-input-1-f54bafc5c909&gt;\n&lt;module&gt; -&gt; test_error\n\n\n1\n2024-03-23 20:06:29.613550\ntest\nError\nrandom error\n\nNone\nNone\ndouble_test\n&lt;ipython-input-1-f54bafc5c909&gt;\n&lt;module&gt; -&gt; double_test",
    "crumbs": [
      "Blog",
      "Client",
      "Logger"
    ]
  },
  {
    "objectID": "client/logger.html#logger-logging-methods",
    "href": "client/logger.html#logger-logging-methods",
    "title": "Logger",
    "section": "",
    "text": "source\n\n\n\n Logger.log_warning (message, entity_id:Optional[str]=None,\n                     domo_instance:Optional[str]=None, debug_log=False,\n                     num_stacks_to_drop=3)\n\nlog a warning message\n\nsource\n\n\n\n\n Logger.log_error (message, entity_id:Optional[str]=None,\n                   domo_instance:Optional[str]=None, debug_log=False,\n                   num_stacks_to_drop=3)\n\nlog an error message\n\nsource\n\n\n\n\n Logger.log_info (message, entity_id:Optional[str]=None,\n                  domo_instance:Optional[str]=None, debug_log=False,\n                  num_stacks_to_drop=3)\n\nlog an informational message\n\nlogger = Logger(\n    app_name=\"test\",\n)\n\n\ndef test_log():\n    return logger.log_info(\"test the error returns type Info\", debug_log=False)\n\n\ntest_log()\n\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 27, 'module_index': 21, 'num_stacks_to_drop_passed': 5}\n\n\n{'date_time': datetime.datetime(2023, 9, 28, 13, 19, 58, 332482),\n 'application': 'test',\n 'log_type': 'Info',\n 'log_message': 'test the error returns type Info',\n 'breadcrumb': '',\n 'domo_instance': None,\n 'entity_id': None,\n 'function_name': 'test_log',\n 'file_name': '/tmp/ipykernel_27360/2082841627.py',\n 'function_trail': '&lt;module&gt; -&gt; test_log'}",
    "crumbs": [
      "Blog",
      "Client",
      "Logger"
    ]
  },
  {
    "objectID": "client/logger.html#outputting-logs",
    "href": "client/logger.html#outputting-logs",
    "title": "Logger",
    "section": "",
    "text": "During Logger instantiation, users can pass a function, output_fn which will be called with the Logger.output_log method\n\nsource\n\n\n\n Logger.output_log ()\n\ncalls the user defined output function\n\n\n\nimport pandas as pd\n\n\ndef custom_write_logs_fn(logs):\n    print(\"printing logs\")\n    return pd.DataFrame(logs)\n\n\nlogger = Logger(app_name=\"test\", output_fn=custom_write_logs_fn)\n\n\ndef test_error():\n    try:\n        if 1 == 1:\n            raise Exception(\"random error\")\n\n    except Exception as e:\n        logger.log_error(e)\n\n\ndef double_test():\n    test_error()\n\n\n# record first error\ntest_error()\n\n# records second error nested inside double_test()\ndouble_test()\n\nlogger.output_log()\n\nadjusting num_stacks_to_drop, consider revising `get_traceback` call\n{'stack_length': 30, 'module_index': 24, 'num_stacks_to_drop_passed': 5}\nprinting logs\n\n\n\n\n\n\n\n\n\n\ndate_time\napplication\nlog_type\nlog_message\nbreadcrumb\ndomo_instance\nentity_id\nfunction_name\nfile_name\nfunction_trail\n\n\n\n\n0\n2024-03-23 20:06:29.613275\ntest\nError\nrandom error\n\nNone\nNone\ntest_error\n&lt;ipython-input-1-f54bafc5c909&gt;\n&lt;module&gt; -&gt; test_error\n\n\n1\n2024-03-23 20:06:29.613550\ntest\nError\nrandom error\n\nNone\nNone\ndouble_test\n&lt;ipython-input-1-f54bafc5c909&gt;\n&lt;module&gt; -&gt; double_test",
    "crumbs": [
      "Blog",
      "Client",
      "Logger"
    ]
  },
  {
    "objectID": "client/domoauth.html",
    "href": "client/domoauth.html",
    "title": "DomoAuth",
    "section": "",
    "text": "Different Domo Auth classes will have a variety of required vs optional parameters. To avoid multiple initialization and post_intialization statements, we mix multiple classes together such that classes with optional parameters are mixed in before classes with required parameters.\n\n\n\nsource\n\n\n\n DomoAuth (domo_instance:str, token:str=None, token_name:str=None,\n           user_id:str=None, auth_header:dict=None,\n           is_valid_token:bool=None, url_manual_login:Optional[str]=None)\n\nabstract DomoAuth class\n\n\n\n# validate can print manual login link\ndomo_instance = \"test\"\n\nda = DomoAuth(domo_instance)\n\nda.set_manual_login()\n\n'https://test.domo.com/auth/index?domoManualLogin=true'\n\n\n\n\n\n\n\n\nsource\n\n\n\n DomoFullAuth (domo_instance:str, domo_username:str, domo_password:str,\n               token:str=None, token_name:str=None, user_id:str=None,\n               auth_header:dict=None, is_valid_token:bool=None,\n               url_manual_login:Optional[str]=None)\n\nuse for full authentication token\n\n\n\ntry:\n    full_auth = DomoFullAuth(\n        domo_instance=\"test\", domo_username=\"test12@domo.com\", domo_password=\"test1234\"\n    )\n\n    await full_auth.get_auth_token()\n\n\nexcept InvalidInstanceError as e:\n    print(e)\n\n🛑  InvalidInstanceError 🛑 - function: DomoFullAuth.get_full_auth || status 403 || Forbidden at test\n\n\n\ntry:\n    full_auth = DomoFullAuth(\n        domo_instance=\"domo-community\",\n        domo_username=os.environ[\"DOMO_USERNAME\"],\n        domo_password=os.environ[\"DOJO_PASSWORD\"],\n    )\n\n    await full_auth.get_auth_token()\n\n\nexcept InvalidInstanceError as e:\n    print(e)\n\nassert full_auth.token\n\nawait full_auth.who_am_i()\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson1', 'department': 'Business Improvement', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1711210801112, 'created': 1588960518, 'active': True, 'pending': False, 'anonymous': False, 'systemUser': False}, is_success=True, parent_class='DomoFullAuth')\n\n\n\nsource\n\n\n\n\n\n test_is_full_auth (auth, function_name=None, num_stacks_to_drop=1)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nauth\n\n\n\n\n\nfunction_name\nNoneType\nNone\n\n\n\nnum_stacks_to_drop\nint\n1\npass q for route pass 2 for class\n\n\n\n\n\n\n\n\nsource\n\n\n\n DomoTokenAuth (domo_instance:str, domo_access_token:str, token:str=None,\n                token_name:str=None, user_id:str=None,\n                auth_header:dict=None, is_valid_token:bool=None,\n                url_manual_login:Optional[str]=None)\n\nuse for access_token authentication. Tokens are generated in domo &gt; admin &gt; access token Necessary in cases where direct sign on is not permitted\n\n\n\ntry:\n    domo_auth = DomoTokenAuth(\n        domo_instance=\"domo-community\", domo_access_token=\"fake password\"\n    )\n    token = await domo_auth.get_auth_token()\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  InvalidCredentialsError 🛑 - function: DomoTokenAuth.who_am_i || status 401 || Unauthorized at domo-community\n\n\n\ndomo_auth = DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait domo_auth.get_auth_token()\nawait domo_auth.who_am_i()\n\nawait domo_auth.generate_auth_header()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'x-domo-developer-token': '83ece44f1451d4b581e1191f98cd411164f0b5b6ad2755b3'}\n\n\n\n\n\n\n\n\nsource\n\n\n\n DomoDeveloperAuth (domo_client_id:str, domo_client_secret:str,\n                    token:str=None, token_name:str=None, user_id:str=None,\n                    auth_header:dict=None, is_valid_token:bool=None,\n                    url_manual_login:Optional[str]=None,\n                    domo_instance:str=None)\n\nuse for full authentication token\n\n\n\ndomo_client_id = \"test_client\"\ndomo_client_secret = \"test_secret\"\n\ntry:\n    domo_auth = DomoDeveloperAuth(\n        domo_client_id=domo_client_id, domo_client_secret=domo_client_secret\n    )\n    await domo_auth.get_auth_token()\nexcept InvalidCredentialsError as e:\n    print(e)\n\n🛑  InvalidCredentialsError 🛑 - function: get_developer_auth || status 401 || Unauthorized",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#define-the-domoauth-base-class",
    "href": "client/domoauth.html#define-the-domoauth-base-class",
    "title": "DomoAuth",
    "section": "",
    "text": "source\n\n\n\n DomoAuth (domo_instance:str, token:str=None, token_name:str=None,\n           user_id:str=None, auth_header:dict=None,\n           is_valid_token:bool=None, url_manual_login:Optional[str]=None)\n\nabstract DomoAuth class\n\n\n\n# validate can print manual login link\ndomo_instance = \"test\"\n\nda = DomoAuth(domo_instance)\n\nda.set_manual_login()\n\n'https://test.domo.com/auth/index?domoManualLogin=true'",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#domofullauth",
    "href": "client/domoauth.html#domofullauth",
    "title": "DomoAuth",
    "section": "",
    "text": "source\n\n\n\n DomoFullAuth (domo_instance:str, domo_username:str, domo_password:str,\n               token:str=None, token_name:str=None, user_id:str=None,\n               auth_header:dict=None, is_valid_token:bool=None,\n               url_manual_login:Optional[str]=None)\n\nuse for full authentication token\n\n\n\ntry:\n    full_auth = DomoFullAuth(\n        domo_instance=\"test\", domo_username=\"test12@domo.com\", domo_password=\"test1234\"\n    )\n\n    await full_auth.get_auth_token()\n\n\nexcept InvalidInstanceError as e:\n    print(e)\n\n🛑  InvalidInstanceError 🛑 - function: DomoFullAuth.get_full_auth || status 403 || Forbidden at test\n\n\n\ntry:\n    full_auth = DomoFullAuth(\n        domo_instance=\"domo-community\",\n        domo_username=os.environ[\"DOMO_USERNAME\"],\n        domo_password=os.environ[\"DOJO_PASSWORD\"],\n    )\n\n    await full_auth.get_auth_token()\n\n\nexcept InvalidInstanceError as e:\n    print(e)\n\nassert full_auth.token\n\nawait full_auth.who_am_i()\n\nResponseGetData(status=200, response={'id': 1893952720, 'invitorUserId': 587894148, 'displayName': 'Jae Wilson1', 'department': 'Business Improvement', 'userName': 'jae@onyxreporting.com', 'emailAddress': 'jae@onyxreporting.com', 'avatarKey': 'c605f478-0cd2-4451-9fd4-d82090b71e66', 'accepted': True, 'userType': 'USER', 'modified': 1711210801112, 'created': 1588960518, 'active': True, 'pending': False, 'anonymous': False, 'systemUser': False}, is_success=True, parent_class='DomoFullAuth')\n\n\n\nsource\n\n\n\n\n\n test_is_full_auth (auth, function_name=None, num_stacks_to_drop=1)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nauth\n\n\n\n\n\nfunction_name\nNoneType\nNone\n\n\n\nnum_stacks_to_drop\nint\n1\npass q for route pass 2 for class",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#domotokenauth",
    "href": "client/domoauth.html#domotokenauth",
    "title": "DomoAuth",
    "section": "",
    "text": "source\n\n\n\n DomoTokenAuth (domo_instance:str, domo_access_token:str, token:str=None,\n                token_name:str=None, user_id:str=None,\n                auth_header:dict=None, is_valid_token:bool=None,\n                url_manual_login:Optional[str]=None)\n\nuse for access_token authentication. Tokens are generated in domo &gt; admin &gt; access token Necessary in cases where direct sign on is not permitted\n\n\n\ntry:\n    domo_auth = DomoTokenAuth(\n        domo_instance=\"domo-community\", domo_access_token=\"fake password\"\n    )\n    token = await domo_auth.get_auth_token()\n\nexcept InvalidCredentialsError as e:\n    print(e)\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n🛑  InvalidCredentialsError 🛑 - function: DomoTokenAuth.who_am_i || status 401 || Unauthorized at domo-community\n\n\n\ndomo_auth = DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\nawait domo_auth.get_auth_token()\nawait domo_auth.who_am_i()\n\nawait domo_auth.generate_auth_header()\n\nwarning this token has not been validated by who_am_i, run get_auth_token first\n\n\n{'x-domo-developer-token': '83ece44f1451d4b581e1191f98cd411164f0b5b6ad2755b3'}",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#domodeveloperauth",
    "href": "client/domoauth.html#domodeveloperauth",
    "title": "DomoAuth",
    "section": "",
    "text": "source\n\n\n\n DomoDeveloperAuth (domo_client_id:str, domo_client_secret:str,\n                    token:str=None, token_name:str=None, user_id:str=None,\n                    auth_header:dict=None, is_valid_token:bool=None,\n                    url_manual_login:Optional[str]=None,\n                    domo_instance:str=None)\n\nuse for full authentication token\n\n\n\ndomo_client_id = \"test_client\"\ndomo_client_secret = \"test_secret\"\n\ntry:\n    domo_auth = DomoDeveloperAuth(\n        domo_client_id=domo_client_id, domo_client_secret=domo_client_secret\n    )\n    await domo_auth.get_auth_token()\nexcept InvalidCredentialsError as e:\n    print(e)\n\n🛑  InvalidCredentialsError 🛑 - function: get_developer_auth || status 401 || Unauthorized",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#define-domojupyterfullauth",
    "href": "client/domoauth.html#define-domojupyterfullauth",
    "title": "DomoAuth",
    "section": "define DomoJupyterFullAuth",
    "text": "define DomoJupyterFullAuth\n\nsource\n\nDomoJupyterFullAuth\n\n DomoJupyterFullAuth (jupyter_token:str, service_location:str,\n                      service_prefix:str, domo_instance:str,\n                      domo_username:str, domo_password:str,\n                      token:str=None, token_name:str=None,\n                      user_id:str=None, auth_header:dict=None,\n                      is_valid_token:bool=None,\n                      url_manual_login:Optional[str]=None)\n\n\nsample implementation of convert_auth\n\ndomo_instance = \"domo-community\"\n\nfull_auth = DomoFullAuth(\n    domo_instance=domo_instance,\n    domo_password=os.environ[\"DOJO_PASSWORD\"],\n    domo_username=os.environ[\"DOMO_USERNAME\"],\n)\n\ndj_auth = DomoJupyterFullAuth.convert_auth(\n    auth=full_auth,\n    jupyter_token=\"abc\",\n    service_location=\"service_location_123\",\n    service_prefix=\"service_prefix_32a\",\n)\n\n# await dj_auth.generate_auth_header()",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#define-domojupytertokenauth",
    "href": "client/domoauth.html#define-domojupytertokenauth",
    "title": "DomoAuth",
    "section": "define DomoJupyterTokenAuth",
    "text": "define DomoJupyterTokenAuth\n\nsource\n\nDomoJupyterTokenAuth\n\n DomoJupyterTokenAuth (jupyter_token:str, service_location:str,\n                       service_prefix:str, domo_instance:str,\n                       domo_access_token:str, token:str=None,\n                       token_name:str=None, user_id:str=None,\n                       auth_header:dict=None, is_valid_token:bool=None,\n                       url_manual_login:Optional[str]=None)\n\n\nsample implementation of convert\n\ntoken_auth = DomoTokenAuth(\n    domo_instance=\"domo-community\",\n    domo_access_token=os.environ[\"DOMO_DOJO_ACCESS_TOKEN\"],\n)\n\ndj_auth = DomoJupyterTokenAuth.convert_auth(\n    auth=token_auth,\n    jupyter_token=\"abc\",\n    service_location=\"service_location_123\",\n    service_prefix=\"service_prefix_32a\",\n)\n\n# await dj_auth.generate_auth_header()",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  },
  {
    "objectID": "client/domoauth.html#test-is-jupyter-auth",
    "href": "client/domoauth.html#test-is-jupyter-auth",
    "title": "DomoAuth",
    "section": "test is jupyter auth",
    "text": "test is jupyter auth\n\nsource\n\ntest_is_jupyter_auth\n\n test_is_jupyter_auth (auth:__main__.DomoJupyterAuth, function_name=None,\n                       required_auth_type_ls=[&lt;class\n                       '__main__.DomoJupyterFullAuth'&gt;, &lt;class\n                       '__main__.DomoJupyterTokenAuth'&gt;])",
    "crumbs": [
      "Blog",
      "Client",
      "DomoAuth"
    ]
  }
]